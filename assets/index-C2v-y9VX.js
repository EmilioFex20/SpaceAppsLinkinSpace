(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const s of r.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function e(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(i){if(i.ep)return;i.ep=!0;const r=e(i);fetch(i.href,r)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const J4="169",t3={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},J0={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},p6=0,E8=1,m6=2,R5=1,_6=2,Q2=3,m0=0,y2=1,W2=2,f0=0,e3=1,y8=2,T8=3,A8=4,g6=5,b0=100,v6=101,x6=102,M6=103,S6=104,E6=200,y6=201,T6=202,A6=203,u4=204,c4=205,b6=206,w6=207,R6=208,C6=209,P6=210,L6=211,D6=212,U6=213,I6=214,h4=0,d4=1,f4=2,i3=3,p4=4,m4=5,_4=6,g4=7,C5=0,N6=1,F6=2,p0=0,O6=1,B6=2,z6=3,H6=4,G6=5,V6=6,k6=7,P5=300,r3=301,s3=302,v4=303,x4=304,v9=306,M4=1e3,R0=1001,S4=1002,D2=1003,W6=1004,N3=1005,O2=1006,P9=1007,C0=1008,n0=1009,L5=1010,D5=1011,T3=1012,Q4=1013,D0=1014,t0=1015,C3=1016,t8=1017,e8=1018,a3=1020,U5=35902,I5=1021,N5=1022,z2=1023,F5=1024,O5=1025,n3=1026,o3=1027,B5=1028,n8=1029,z5=1030,l8=1031,i8=1033,r9=33776,s9=33777,a9=33778,o9=33779,E4=35840,y4=35841,T4=35842,A4=35843,b4=36196,w4=37492,R4=37496,C4=37808,P4=37809,L4=37810,D4=37811,U4=37812,I4=37813,N4=37814,F4=37815,O4=37816,B4=37817,z4=37818,H4=37819,G4=37820,V4=37821,u9=36492,k4=36494,W4=36495,H5=36283,X4=36284,Y4=36285,q4=36286,X6=3200,Y6=3201,q6=0,K6=1,d0="",V2="srgb",g0="srgb-linear",r8="display-p3",x9="display-p3-linear",d9="linear",Q1="srgb",f9="rec709",p9="p3",O0=7680,b8=519,j6=512,Z6=513,$6=514,G5=515,J6=516,Q6=517,t7=518,e7=519,w8=35044,R8="300 es",e0=2e3,m9=2001;class N0{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const r=i.indexOf(e);r!==-1&&i.splice(r,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let r=0,s=i.length;r<s;r++)i[r].call(this,t);t.target=null}}}const c2=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let C8=1234567;const E3=Math.PI/180,A3=180/Math.PI;function h3(){const l=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(c2[l&255]+c2[l>>8&255]+c2[l>>16&255]+c2[l>>24&255]+"-"+c2[t&255]+c2[t>>8&255]+"-"+c2[t>>16&15|64]+c2[t>>24&255]+"-"+c2[e&63|128]+c2[e>>8&255]+"-"+c2[e>>16&255]+c2[e>>24&255]+c2[n&255]+c2[n>>8&255]+c2[n>>16&255]+c2[n>>24&255]).toLowerCase()}function d2(l,t,e){return Math.max(t,Math.min(e,l))}function s8(l,t){return(l%t+t)%t}function n7(l,t,e,n,i){return n+(l-t)*(i-n)/(e-t)}function l7(l,t,e){return l!==t?(e-l)/(t-l):0}function y3(l,t,e){return(1-e)*l+e*t}function i7(l,t,e,n){return y3(l,t,1-Math.exp(-e*n))}function r7(l,t=1){return t-Math.abs(s8(l,t*2)-t)}function s7(l,t,e){return l<=t?0:l>=e?1:(l=(l-t)/(e-t),l*l*(3-2*l))}function a7(l,t,e){return l<=t?0:l>=e?1:(l=(l-t)/(e-t),l*l*l*(l*(l*6-15)+10))}function o7(l,t){return l+Math.floor(Math.random()*(t-l+1))}function u7(l,t){return l+Math.random()*(t-l)}function c7(l){return l*(.5-Math.random())}function h7(l){l!==void 0&&(C8=l);let t=C8+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function d7(l){return l*E3}function f7(l){return l*A3}function p7(l){return(l&l-1)===0&&l!==0}function m7(l){return Math.pow(2,Math.ceil(Math.log(l)/Math.LN2))}function _7(l){return Math.pow(2,Math.floor(Math.log(l)/Math.LN2))}function g7(l,t,e,n,i){const r=Math.cos,s=Math.sin,a=r(e/2),o=s(e/2),u=r((t+n)/2),c=s((t+n)/2),f=r((t-n)/2),p=s((t-n)/2),m=r((n-t)/2),v=s((n-t)/2);switch(i){case"XYX":l.set(a*c,o*f,o*p,a*u);break;case"YZY":l.set(o*p,a*c,o*f,a*u);break;case"ZXZ":l.set(o*f,o*p,a*c,a*u);break;case"XZX":l.set(a*c,o*v,o*m,a*u);break;case"YXY":l.set(o*m,a*c,o*v,a*u);break;case"ZYZ":l.set(o*v,o*m,a*c,a*u);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function $0(l,t){switch(t.constructor){case Float32Array:return l;case Uint32Array:return l/4294967295;case Uint16Array:return l/65535;case Uint8Array:return l/255;case Int32Array:return Math.max(l/2147483647,-1);case Int16Array:return Math.max(l/32767,-1);case Int8Array:return Math.max(l/127,-1);default:throw new Error("Invalid component type.")}}function f2(l,t){switch(t.constructor){case Float32Array:return l;case Uint32Array:return Math.round(l*4294967295);case Uint16Array:return Math.round(l*65535);case Uint8Array:return Math.round(l*255);case Int32Array:return Math.round(l*2147483647);case Int16Array:return Math.round(l*32767);case Int8Array:return Math.round(l*127);default:throw new Error("Invalid component type.")}}const v7={DEG2RAD:E3,RAD2DEG:A3,generateUUID:h3,clamp:d2,euclideanModulo:s8,mapLinear:n7,inverseLerp:l7,lerp:y3,damp:i7,pingpong:r7,smoothstep:s7,smootherstep:a7,randInt:o7,randFloat:u7,randFloatSpread:c7,seededRandom:h7,degToRad:d7,radToDeg:f7,isPowerOfTwo:p7,ceilPowerOfTwo:m7,floorPowerOfTwo:_7,setQuaternionFromProperEuler:g7,normalize:f2,denormalize:$0};class w1{constructor(t=0,e=0){w1.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(d2(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*n-s*i+t.x,this.y=r*i+s*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class L1{constructor(t,e,n,i,r,s,a,o,u){L1.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,r,s,a,o,u)}set(t,e,n,i,r,s,a,o,u){const c=this.elements;return c[0]=t,c[1]=i,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=s,c[8]=u,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[3],o=n[6],u=n[1],c=n[4],f=n[7],p=n[2],m=n[5],v=n[8],M=i[0],d=i[3],h=i[6],T=i[1],E=i[4],A=i[7],F=i[2],R=i[5],b=i[8];return r[0]=s*M+a*T+o*F,r[3]=s*d+a*E+o*R,r[6]=s*h+a*A+o*b,r[1]=u*M+c*T+f*F,r[4]=u*d+c*E+f*R,r[7]=u*h+c*A+f*b,r[2]=p*M+m*T+v*F,r[5]=p*d+m*E+v*R,r[8]=p*h+m*A+v*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],u=t[7],c=t[8];return e*s*c-e*a*u-n*r*c+n*a*o+i*r*u-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],u=t[7],c=t[8],f=c*s-a*u,p=a*o-c*r,m=u*r-s*o,v=e*f+n*p+i*m;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const M=1/v;return t[0]=f*M,t[1]=(i*u-c*n)*M,t[2]=(a*n-i*s)*M,t[3]=p*M,t[4]=(c*e-i*o)*M,t[5]=(i*r-a*e)*M,t[6]=m*M,t[7]=(n*o-u*e)*M,t[8]=(s*e-n*r)*M,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r),u=Math.sin(r);return this.set(n*o,n*u,-n*(o*s+u*a)+s+t,-i*u,i*o,-i*(-u*s+o*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(L9.makeScale(t,e)),this}rotate(t){return this.premultiply(L9.makeRotation(-t)),this}translate(t,e){return this.premultiply(L9.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const L9=new L1;function V5(l){for(let t=l.length-1;t>=0;--t)if(l[t]>=65535)return!0;return!1}function b3(l){return document.createElementNS("http://www.w3.org/1999/xhtml",l)}function x7(){const l=b3("canvas");return l.style.display="block",l}const P8={};function c9(l){l in P8||(P8[l]=!0,console.warn(l))}function M7(l,t,e){return new Promise(function(n,i){function r(){switch(l.clientWaitSync(t,l.SYNC_FLUSH_COMMANDS_BIT,0)){case l.WAIT_FAILED:i();break;case l.TIMEOUT_EXPIRED:setTimeout(r,e);break;default:n()}}setTimeout(r,e)})}function S7(l){const t=l.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function E7(l){const t=l.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const L8=new L1().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),D8=new L1().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),f3={[g0]:{transfer:d9,primaries:f9,luminanceCoefficients:[.2126,.7152,.0722],toReference:l=>l,fromReference:l=>l},[V2]:{transfer:Q1,primaries:f9,luminanceCoefficients:[.2126,.7152,.0722],toReference:l=>l.convertSRGBToLinear(),fromReference:l=>l.convertLinearToSRGB()},[x9]:{transfer:d9,primaries:p9,luminanceCoefficients:[.2289,.6917,.0793],toReference:l=>l.applyMatrix3(D8),fromReference:l=>l.applyMatrix3(L8)},[r8]:{transfer:Q1,primaries:p9,luminanceCoefficients:[.2289,.6917,.0793],toReference:l=>l.convertSRGBToLinear().applyMatrix3(D8),fromReference:l=>l.applyMatrix3(L8).convertLinearToSRGB()}},y7=new Set([g0,x9]),k1={enabled:!0,_workingColorSpace:g0,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(l){if(!y7.has(l))throw new Error(`Unsupported working color space, "${l}".`);this._workingColorSpace=l},convert:function(l,t,e){if(this.enabled===!1||t===e||!t||!e)return l;const n=f3[t].toReference,i=f3[e].fromReference;return i(n(l))},fromWorkingColorSpace:function(l,t){return this.convert(l,this._workingColorSpace,t)},toWorkingColorSpace:function(l,t){return this.convert(l,t,this._workingColorSpace)},getPrimaries:function(l){return f3[l].primaries},getTransfer:function(l){return l===d0?d9:f3[l].transfer},getLuminanceCoefficients:function(l,t=this._workingColorSpace){return l.fromArray(f3[t].luminanceCoefficients)}};function l3(l){return l<.04045?l*.0773993808:Math.pow(l*.9478672986+.0521327014,2.4)}function D9(l){return l<.0031308?l*12.92:1.055*Math.pow(l,.41666)-.055}let B0;class T7{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{B0===void 0&&(B0=b3("canvas")),B0.width=t.width,B0.height=t.height;const n=B0.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=B0}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=b3("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let s=0;s<r.length;s++)r[s]=l3(r[s]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(l3(e[n]/255)*255):e[n]=l3(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let A7=0;class k5{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:A7++}),this.uuid=h3(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let r;if(Array.isArray(i)){r=[];for(let s=0,a=i.length;s<a;s++)i[s].isDataTexture?r.push(U9(i[s].image)):r.push(U9(i[s]))}else r=U9(i);n.url=r}return e||(t.images[this.uuid]=n),n}}function U9(l){return typeof HTMLImageElement<"u"&&l instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&l instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&l instanceof ImageBitmap?T7.getDataURL(l):l.data?{data:Array.from(l.data),width:l.width,height:l.height,type:l.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let b7=0;class m2 extends N0{constructor(t=m2.DEFAULT_IMAGE,e=m2.DEFAULT_MAPPING,n=R0,i=R0,r=O2,s=C0,a=z2,o=n0,u=m2.DEFAULT_ANISOTROPY,c=d0){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:b7++}),this.uuid=h3(),this.name="",this.source=new k5(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=u,this.format=a,this.internalFormat=null,this.type=o,this.offset=new w1(0,0),this.repeat=new w1(1,1),this.center=new w1(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new L1,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==P5)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case M4:t.x=t.x-Math.floor(t.x);break;case R0:t.x=t.x<0?0:1;break;case S4:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case M4:t.y=t.y-Math.floor(t.y);break;case R0:t.y=t.y<0?0:1;break;case S4:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}m2.DEFAULT_IMAGE=null;m2.DEFAULT_MAPPING=P5;m2.DEFAULT_ANISOTROPY=1;class j1{constructor(t=0,e=0,n=0,i=1){j1.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const o=t.elements,u=o[0],c=o[4],f=o[8],p=o[1],m=o[5],v=o[9],M=o[2],d=o[6],h=o[10];if(Math.abs(c-p)<.01&&Math.abs(f-M)<.01&&Math.abs(v-d)<.01){if(Math.abs(c+p)<.1&&Math.abs(f+M)<.1&&Math.abs(v+d)<.1&&Math.abs(u+m+h-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const E=(u+1)/2,A=(m+1)/2,F=(h+1)/2,R=(c+p)/4,b=(f+M)/4,O=(v+d)/4;return E>A&&E>F?E<.01?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(E),i=R/n,r=b/n):A>F?A<.01?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(A),n=R/i,r=O/i):F<.01?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(F),n=b/r,i=O/r),this.set(n,i,r,e),this}let T=Math.sqrt((d-v)*(d-v)+(f-M)*(f-M)+(p-c)*(p-c));return Math.abs(T)<.001&&(T=1),this.x=(d-v)/T,this.y=(f-M)/T,this.z=(p-c)/T,this.w=Math.acos((u+m+h-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class w7 extends N0{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new j1(0,0,t,e),this.scissorTest=!1,this.viewport=new j1(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:O2,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new m2(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const s=n.count;for(let a=0;a<s;a++)this.textures[a]=r.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,i=t.textures.length;n<i;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new k5(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class U0 extends w7{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class W5 extends m2{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=D2,this.minFilter=D2,this.wrapR=R0,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class R7 extends m2{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=D2,this.minFilter=D2,this.wrapR=R0,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class I0{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],u=n[i+1],c=n[i+2],f=n[i+3];const p=r[s+0],m=r[s+1],v=r[s+2],M=r[s+3];if(a===0){t[e+0]=o,t[e+1]=u,t[e+2]=c,t[e+3]=f;return}if(a===1){t[e+0]=p,t[e+1]=m,t[e+2]=v,t[e+3]=M;return}if(f!==M||o!==p||u!==m||c!==v){let d=1-a;const h=o*p+u*m+c*v+f*M,T=h>=0?1:-1,E=1-h*h;if(E>Number.EPSILON){const F=Math.sqrt(E),R=Math.atan2(F,h*T);d=Math.sin(d*R)/F,a=Math.sin(a*R)/F}const A=a*T;if(o=o*d+p*A,u=u*d+m*A,c=c*d+v*A,f=f*d+M*A,d===1-a){const F=1/Math.sqrt(o*o+u*u+c*c+f*f);o*=F,u*=F,c*=F,f*=F}}t[e]=o,t[e+1]=u,t[e+2]=c,t[e+3]=f}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i],o=n[i+1],u=n[i+2],c=n[i+3],f=r[s],p=r[s+1],m=r[s+2],v=r[s+3];return t[e]=a*v+c*f+o*m-u*p,t[e+1]=o*v+c*p+u*f-a*m,t[e+2]=u*v+c*m+a*p-o*f,t[e+3]=c*v-a*f-o*p-u*m,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,u=a(n/2),c=a(i/2),f=a(r/2),p=o(n/2),m=o(i/2),v=o(r/2);switch(s){case"XYZ":this._x=p*c*f+u*m*v,this._y=u*m*f-p*c*v,this._z=u*c*v+p*m*f,this._w=u*c*f-p*m*v;break;case"YXZ":this._x=p*c*f+u*m*v,this._y=u*m*f-p*c*v,this._z=u*c*v-p*m*f,this._w=u*c*f+p*m*v;break;case"ZXY":this._x=p*c*f-u*m*v,this._y=u*m*f+p*c*v,this._z=u*c*v+p*m*f,this._w=u*c*f-p*m*v;break;case"ZYX":this._x=p*c*f-u*m*v,this._y=u*m*f+p*c*v,this._z=u*c*v-p*m*f,this._w=u*c*f+p*m*v;break;case"YZX":this._x=p*c*f+u*m*v,this._y=u*m*f+p*c*v,this._z=u*c*v-p*m*f,this._w=u*c*f-p*m*v;break;case"XZY":this._x=p*c*f-u*m*v,this._y=u*m*f-p*c*v,this._z=u*c*v+p*m*f,this._w=u*c*f+p*m*v;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],u=e[2],c=e[6],f=e[10],p=n+a+f;if(p>0){const m=.5/Math.sqrt(p+1);this._w=.25/m,this._x=(c-o)*m,this._y=(r-u)*m,this._z=(s-i)*m}else if(n>a&&n>f){const m=2*Math.sqrt(1+n-a-f);this._w=(c-o)/m,this._x=.25*m,this._y=(i+s)/m,this._z=(r+u)/m}else if(a>f){const m=2*Math.sqrt(1+a-n-f);this._w=(r-u)/m,this._x=(i+s)/m,this._y=.25*m,this._z=(o+c)/m}else{const m=2*Math.sqrt(1+f-n-a);this._w=(s-i)/m,this._x=(r+u)/m,this._y=(o+c)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(d2(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w,a=e._x,o=e._y,u=e._z,c=e._w;return this._x=n*c+s*a+i*u-r*o,this._y=i*c+s*o+r*a-n*u,this._z=r*c+s*u+n*o-i*a,this._w=s*c-n*a-i*o-r*u,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const m=1-e;return this._w=m*s+e*this._w,this._x=m*n+e*this._x,this._y=m*i+e*this._y,this._z=m*r+e*this._z,this.normalize(),this}const u=Math.sqrt(o),c=Math.atan2(u,a),f=Math.sin((1-e)*c)/u,p=Math.sin(e*c)/u;return this._w=s*f+this._w*p,this._x=n*f+this._x*p,this._y=i*f+this._y*p,this._z=r*f+this._z*p,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class L{constructor(t=0,e=0,n=0){L.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(U8.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(U8.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,a=t.z,o=t.w,u=2*(s*i-a*n),c=2*(a*e-r*i),f=2*(r*n-s*e);return this.x=e+o*u+s*f-a*c,this.y=n+o*c+a*u-r*f,this.z=i+o*f+r*c-s*u,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=i*o-r*a,this.y=r*s-n*o,this.z=n*a-i*s,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return I9.copy(this).projectOnVector(t),this.sub(I9)}reflect(t){return this.sub(I9.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(d2(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const I9=new L,U8=new I0;class P3{constructor(t=new L(1/0,1/0,1/0),e=new L(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(I2.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(I2.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=I2.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const r=n.getAttribute("position");if(e===!0&&r!==void 0&&t.isInstancedMesh!==!0)for(let s=0,a=r.count;s<a;s++)t.isMesh===!0?t.getVertexPosition(s,I2):I2.fromBufferAttribute(r,s),I2.applyMatrix4(t.matrixWorld),this.expandByPoint(I2);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),F3.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),F3.copy(n.boundingBox)),F3.applyMatrix4(t.matrixWorld),this.union(F3)}const i=t.children;for(let r=0,s=i.length;r<s;r++)this.expandByObject(i[r],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,I2),I2.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(p3),O3.subVectors(this.max,p3),z0.subVectors(t.a,p3),H0.subVectors(t.b,p3),G0.subVectors(t.c,p3),r0.subVectors(H0,z0),s0.subVectors(G0,H0),x0.subVectors(z0,G0);let e=[0,-r0.z,r0.y,0,-s0.z,s0.y,0,-x0.z,x0.y,r0.z,0,-r0.x,s0.z,0,-s0.x,x0.z,0,-x0.x,-r0.y,r0.x,0,-s0.y,s0.x,0,-x0.y,x0.x,0];return!N9(e,z0,H0,G0,O3)||(e=[1,0,0,0,1,0,0,0,1],!N9(e,z0,H0,G0,O3))?!1:(B3.crossVectors(r0,s0),e=[B3.x,B3.y,B3.z],N9(e,z0,H0,G0,O3))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,I2).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(I2).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(K2[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),K2[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),K2[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),K2[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),K2[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),K2[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),K2[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),K2[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(K2),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const K2=[new L,new L,new L,new L,new L,new L,new L,new L],I2=new L,F3=new P3,z0=new L,H0=new L,G0=new L,r0=new L,s0=new L,x0=new L,p3=new L,O3=new L,B3=new L,M0=new L;function N9(l,t,e,n,i){for(let r=0,s=l.length-3;r<=s;r+=3){M0.fromArray(l,r);const a=i.x*Math.abs(M0.x)+i.y*Math.abs(M0.y)+i.z*Math.abs(M0.z),o=t.dot(M0),u=e.dot(M0),c=n.dot(M0);if(Math.max(-Math.max(o,u,c),Math.min(o,u,c))>a)return!1}return!0}const C7=new P3,m3=new L,F9=new L;class M9{constructor(t=new L,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):C7.setFromPoints(t).getCenter(n);let i=0;for(let r=0,s=t.length;r<s;r++)i=Math.max(i,n.distanceToSquared(t[r]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;m3.subVectors(t,this.center);const e=m3.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(m3,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(F9.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(m3.copy(t.center).add(F9)),this.expandByPoint(m3.copy(t.center).sub(F9))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const j2=new L,O9=new L,z3=new L,a0=new L,B9=new L,H3=new L,z9=new L;class S9{constructor(t=new L,e=new L(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,j2)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=j2.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(j2.copy(this.origin).addScaledVector(this.direction,e),j2.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){O9.copy(t).add(e).multiplyScalar(.5),z3.copy(e).sub(t).normalize(),a0.copy(this.origin).sub(O9);const r=t.distanceTo(e)*.5,s=-this.direction.dot(z3),a=a0.dot(this.direction),o=-a0.dot(z3),u=a0.lengthSq(),c=Math.abs(1-s*s);let f,p,m,v;if(c>0)if(f=s*o-a,p=s*a-o,v=r*c,f>=0)if(p>=-v)if(p<=v){const M=1/c;f*=M,p*=M,m=f*(f+s*p+2*a)+p*(s*f+p+2*o)+u}else p=r,f=Math.max(0,-(s*p+a)),m=-f*f+p*(p+2*o)+u;else p=-r,f=Math.max(0,-(s*p+a)),m=-f*f+p*(p+2*o)+u;else p<=-v?(f=Math.max(0,-(-s*r+a)),p=f>0?-r:Math.min(Math.max(-r,-o),r),m=-f*f+p*(p+2*o)+u):p<=v?(f=0,p=Math.min(Math.max(-r,-o),r),m=p*(p+2*o)+u):(f=Math.max(0,-(s*r+a)),p=f>0?r:Math.min(Math.max(-r,-o),r),m=-f*f+p*(p+2*o)+u);else p=s>0?-r:r,f=Math.max(0,-(s*p+a)),m=-f*f+p*(p+2*o)+u;return n&&n.copy(this.origin).addScaledVector(this.direction,f),i&&i.copy(O9).addScaledVector(z3,p),m}intersectSphere(t,e){j2.subVectors(t.center,this.origin);const n=j2.dot(this.direction),i=j2.dot(j2)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,o=n+s;return o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,s,a,o;const u=1/this.direction.x,c=1/this.direction.y,f=1/this.direction.z,p=this.origin;return u>=0?(n=(t.min.x-p.x)*u,i=(t.max.x-p.x)*u):(n=(t.max.x-p.x)*u,i=(t.min.x-p.x)*u),c>=0?(r=(t.min.y-p.y)*c,s=(t.max.y-p.y)*c):(r=(t.max.y-p.y)*c,s=(t.min.y-p.y)*c),n>s||r>i||((r>n||isNaN(n))&&(n=r),(s<i||isNaN(i))&&(i=s),f>=0?(a=(t.min.z-p.z)*f,o=(t.max.z-p.z)*f):(a=(t.max.z-p.z)*f,o=(t.min.z-p.z)*f),n>o||a>i)||((a>n||n!==n)&&(n=a),(o<i||i!==i)&&(i=o),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,j2)!==null}intersectTriangle(t,e,n,i,r){B9.subVectors(e,t),H3.subVectors(n,t),z9.crossVectors(B9,H3);let s=this.direction.dot(z9),a;if(s>0){if(i)return null;a=1}else if(s<0)a=-1,s=-s;else return null;a0.subVectors(this.origin,t);const o=a*this.direction.dot(H3.crossVectors(a0,H3));if(o<0)return null;const u=a*this.direction.dot(B9.cross(a0));if(u<0||o+u>s)return null;const c=-a*a0.dot(z9);return c<0?null:this.at(c/s,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class t2{constructor(t,e,n,i,r,s,a,o,u,c,f,p,m,v,M,d){t2.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,r,s,a,o,u,c,f,p,m,v,M,d)}set(t,e,n,i,r,s,a,o,u,c,f,p,m,v,M,d){const h=this.elements;return h[0]=t,h[4]=e,h[8]=n,h[12]=i,h[1]=r,h[5]=s,h[9]=a,h[13]=o,h[2]=u,h[6]=c,h[10]=f,h[14]=p,h[3]=m,h[7]=v,h[11]=M,h[15]=d,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new t2().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/V0.setFromMatrixColumn(t,0).length(),r=1/V0.setFromMatrixColumn(t,1).length(),s=1/V0.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*s,e[9]=n[9]*s,e[10]=n[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),a=Math.sin(n),o=Math.cos(i),u=Math.sin(i),c=Math.cos(r),f=Math.sin(r);if(t.order==="XYZ"){const p=s*c,m=s*f,v=a*c,M=a*f;e[0]=o*c,e[4]=-o*f,e[8]=u,e[1]=m+v*u,e[5]=p-M*u,e[9]=-a*o,e[2]=M-p*u,e[6]=v+m*u,e[10]=s*o}else if(t.order==="YXZ"){const p=o*c,m=o*f,v=u*c,M=u*f;e[0]=p+M*a,e[4]=v*a-m,e[8]=s*u,e[1]=s*f,e[5]=s*c,e[9]=-a,e[2]=m*a-v,e[6]=M+p*a,e[10]=s*o}else if(t.order==="ZXY"){const p=o*c,m=o*f,v=u*c,M=u*f;e[0]=p-M*a,e[4]=-s*f,e[8]=v+m*a,e[1]=m+v*a,e[5]=s*c,e[9]=M-p*a,e[2]=-s*u,e[6]=a,e[10]=s*o}else if(t.order==="ZYX"){const p=s*c,m=s*f,v=a*c,M=a*f;e[0]=o*c,e[4]=v*u-m,e[8]=p*u+M,e[1]=o*f,e[5]=M*u+p,e[9]=m*u-v,e[2]=-u,e[6]=a*o,e[10]=s*o}else if(t.order==="YZX"){const p=s*o,m=s*u,v=a*o,M=a*u;e[0]=o*c,e[4]=M-p*f,e[8]=v*f+m,e[1]=f,e[5]=s*c,e[9]=-a*c,e[2]=-u*c,e[6]=m*f+v,e[10]=p-M*f}else if(t.order==="XZY"){const p=s*o,m=s*u,v=a*o,M=a*u;e[0]=o*c,e[4]=-f,e[8]=u*c,e[1]=p*f+M,e[5]=s*c,e[9]=m*f-v,e[2]=v*f-m,e[6]=a*c,e[10]=M*f+p}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(P7,t,L7)}lookAt(t,e,n){const i=this.elements;return w2.subVectors(t,e),w2.lengthSq()===0&&(w2.z=1),w2.normalize(),o0.crossVectors(n,w2),o0.lengthSq()===0&&(Math.abs(n.z)===1?w2.x+=1e-4:w2.z+=1e-4,w2.normalize(),o0.crossVectors(n,w2)),o0.normalize(),G3.crossVectors(w2,o0),i[0]=o0.x,i[4]=G3.x,i[8]=w2.x,i[1]=o0.y,i[5]=G3.y,i[9]=w2.y,i[2]=o0.z,i[6]=G3.z,i[10]=w2.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[4],o=n[8],u=n[12],c=n[1],f=n[5],p=n[9],m=n[13],v=n[2],M=n[6],d=n[10],h=n[14],T=n[3],E=n[7],A=n[11],F=n[15],R=i[0],b=i[4],O=i[8],t1=i[12],_=i[1],S=i[5],V=i[9],z=i[13],Y=i[2],j=i[6],G=i[10],K=i[14],H=i[3],a1=i[7],o1=i[11],_1=i[15];return r[0]=s*R+a*_+o*Y+u*H,r[4]=s*b+a*S+o*j+u*a1,r[8]=s*O+a*V+o*G+u*o1,r[12]=s*t1+a*z+o*K+u*_1,r[1]=c*R+f*_+p*Y+m*H,r[5]=c*b+f*S+p*j+m*a1,r[9]=c*O+f*V+p*G+m*o1,r[13]=c*t1+f*z+p*K+m*_1,r[2]=v*R+M*_+d*Y+h*H,r[6]=v*b+M*S+d*j+h*a1,r[10]=v*O+M*V+d*G+h*o1,r[14]=v*t1+M*z+d*K+h*_1,r[3]=T*R+E*_+A*Y+F*H,r[7]=T*b+E*S+A*j+F*a1,r[11]=T*O+E*V+A*G+F*o1,r[15]=T*t1+E*z+A*K+F*_1,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],a=t[5],o=t[9],u=t[13],c=t[2],f=t[6],p=t[10],m=t[14],v=t[3],M=t[7],d=t[11],h=t[15];return v*(+r*o*f-i*u*f-r*a*p+n*u*p+i*a*m-n*o*m)+M*(+e*o*m-e*u*p+r*s*p-i*s*m+i*u*c-r*o*c)+d*(+e*u*f-e*a*m-r*s*f+n*s*m+r*a*c-n*u*c)+h*(-i*a*c-e*o*f+e*a*p+i*s*f-n*s*p+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],u=t[7],c=t[8],f=t[9],p=t[10],m=t[11],v=t[12],M=t[13],d=t[14],h=t[15],T=f*d*u-M*p*u+M*o*m-a*d*m-f*o*h+a*p*h,E=v*p*u-c*d*u-v*o*m+s*d*m+c*o*h-s*p*h,A=c*M*u-v*f*u+v*a*m-s*M*m-c*a*h+s*f*h,F=v*f*o-c*M*o-v*a*p+s*M*p+c*a*d-s*f*d,R=e*T+n*E+i*A+r*F;if(R===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/R;return t[0]=T*b,t[1]=(M*p*r-f*d*r-M*i*m+n*d*m+f*i*h-n*p*h)*b,t[2]=(a*d*r-M*o*r+M*i*u-n*d*u-a*i*h+n*o*h)*b,t[3]=(f*o*r-a*p*r-f*i*u+n*p*u+a*i*m-n*o*m)*b,t[4]=E*b,t[5]=(c*d*r-v*p*r+v*i*m-e*d*m-c*i*h+e*p*h)*b,t[6]=(v*o*r-s*d*r-v*i*u+e*d*u+s*i*h-e*o*h)*b,t[7]=(s*p*r-c*o*r+c*i*u-e*p*u-s*i*m+e*o*m)*b,t[8]=A*b,t[9]=(v*f*r-c*M*r-v*n*m+e*M*m+c*n*h-e*f*h)*b,t[10]=(s*M*r-v*a*r+v*n*u-e*M*u-s*n*h+e*a*h)*b,t[11]=(c*a*r-s*f*r-c*n*u+e*f*u+s*n*m-e*a*m)*b,t[12]=F*b,t[13]=(c*M*i-v*f*i+v*n*p-e*M*p-c*n*d+e*f*d)*b,t[14]=(v*a*i-s*M*i-v*n*o+e*M*o+s*n*d-e*a*d)*b,t[15]=(s*f*i-c*a*i+c*n*o-e*f*o-s*n*p+e*a*p)*b,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,a=t.y,o=t.z,u=r*s,c=r*a;return this.set(u*s+n,u*a-i*o,u*o+i*a,0,u*a+i*o,c*a+n,c*o-i*s,0,u*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,s){return this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,u=r+r,c=s+s,f=a+a,p=r*u,m=r*c,v=r*f,M=s*c,d=s*f,h=a*f,T=o*u,E=o*c,A=o*f,F=n.x,R=n.y,b=n.z;return i[0]=(1-(M+h))*F,i[1]=(m+A)*F,i[2]=(v-E)*F,i[3]=0,i[4]=(m-A)*R,i[5]=(1-(p+h))*R,i[6]=(d+T)*R,i[7]=0,i[8]=(v+E)*b,i[9]=(d-T)*b,i[10]=(1-(p+M))*b,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=V0.set(i[0],i[1],i[2]).length();const s=V0.set(i[4],i[5],i[6]).length(),a=V0.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],N2.copy(this);const u=1/r,c=1/s,f=1/a;return N2.elements[0]*=u,N2.elements[1]*=u,N2.elements[2]*=u,N2.elements[4]*=c,N2.elements[5]*=c,N2.elements[6]*=c,N2.elements[8]*=f,N2.elements[9]*=f,N2.elements[10]*=f,e.setFromRotationMatrix(N2),n.x=r,n.y=s,n.z=a,this}makePerspective(t,e,n,i,r,s,a=e0){const o=this.elements,u=2*r/(e-t),c=2*r/(n-i),f=(e+t)/(e-t),p=(n+i)/(n-i);let m,v;if(a===e0)m=-(s+r)/(s-r),v=-2*s*r/(s-r);else if(a===m9)m=-s/(s-r),v=-s*r/(s-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return o[0]=u,o[4]=0,o[8]=f,o[12]=0,o[1]=0,o[5]=c,o[9]=p,o[13]=0,o[2]=0,o[6]=0,o[10]=m,o[14]=v,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,i,r,s,a=e0){const o=this.elements,u=1/(e-t),c=1/(n-i),f=1/(s-r),p=(e+t)*u,m=(n+i)*c;let v,M;if(a===e0)v=(s+r)*f,M=-2*f;else if(a===m9)v=r*f,M=-1*f;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return o[0]=2*u,o[4]=0,o[8]=0,o[12]=-p,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-m,o[2]=0,o[6]=0,o[10]=M,o[14]=-v,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const V0=new L,N2=new t2,P7=new L(0,0,0),L7=new L(1,1,1),o0=new L,G3=new L,w2=new L,I8=new t2,N8=new I0;class l0{constructor(t=0,e=0,n=0,i=l0.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],s=i[4],a=i[8],o=i[1],u=i[5],c=i[9],f=i[2],p=i[6],m=i[10];switch(e){case"XYZ":this._y=Math.asin(d2(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,m),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(p,u),this._z=0);break;case"YXZ":this._x=Math.asin(-d2(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,m),this._z=Math.atan2(o,u)):(this._y=Math.atan2(-f,r),this._z=0);break;case"ZXY":this._x=Math.asin(d2(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(-f,m),this._z=Math.atan2(-s,u)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-d2(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(p,m),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,u));break;case"YZX":this._z=Math.asin(d2(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,u),this._y=Math.atan2(-f,r)):(this._x=0,this._y=Math.atan2(a,m));break;case"XZY":this._z=Math.asin(-d2(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(p,u),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return I8.makeRotationFromQuaternion(t),this.setFromRotationMatrix(I8,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return N8.setFromEuler(this),this.setFromQuaternion(N8,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}l0.DEFAULT_ORDER="XYZ";class a8{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let D7=0;const F8=new L,k0=new I0,Z2=new t2,V3=new L,_3=new L,U7=new L,I7=new I0,O8=new L(1,0,0),B8=new L(0,1,0),z8=new L(0,0,1),H8={type:"added"},N7={type:"removed"},W0={type:"childadded",child:null},H9={type:"childremoved",child:null};class _2 extends N0{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:D7++}),this.uuid=h3(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=_2.DEFAULT_UP.clone();const t=new L,e=new l0,n=new I0,i=new L(1,1,1);function r(){n.setFromEuler(e,!1)}function s(){e.setFromQuaternion(n,void 0,!1)}e._onChange(r),n._onChange(s),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new t2},normalMatrix:{value:new L1}}),this.matrix=new t2,this.matrixWorld=new t2,this.matrixAutoUpdate=_2.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=_2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new a8,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return k0.setFromAxisAngle(t,e),this.quaternion.multiply(k0),this}rotateOnWorldAxis(t,e){return k0.setFromAxisAngle(t,e),this.quaternion.premultiply(k0),this}rotateX(t){return this.rotateOnAxis(O8,t)}rotateY(t){return this.rotateOnAxis(B8,t)}rotateZ(t){return this.rotateOnAxis(z8,t)}translateOnAxis(t,e){return F8.copy(t).applyQuaternion(this.quaternion),this.position.add(F8.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(O8,t)}translateY(t){return this.translateOnAxis(B8,t)}translateZ(t){return this.translateOnAxis(z8,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Z2.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?V3.copy(t):V3.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),_3.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Z2.lookAt(_3,V3,this.up):Z2.lookAt(V3,_3,this.up),this.quaternion.setFromRotationMatrix(Z2),i&&(Z2.extractRotation(i.matrixWorld),k0.setFromRotationMatrix(Z2),this.quaternion.premultiply(k0.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(H8),W0.child=t,this.dispatchEvent(W0),W0.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(N7),H9.child=t,this.dispatchEvent(H9),H9.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Z2.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Z2.multiply(t.parent.matrixWorld)),t.applyMatrix4(Z2),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(H8),W0.child=t,this.dispatchEvent(W0),W0.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const s=this.children[n].getObjectByProperty(t,e);if(s!==void 0)return s}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let r=0,s=i.length;r<s;r++)i[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_3,t,U7),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(_3,I7,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const i=this.children;for(let r=0,s=i.length;r<s;r++)i[r].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function r(a,o){return a[o.uuid]===void 0&&(a[o.uuid]=o.toJSON(t)),o.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const o=a.shapes;if(Array.isArray(o))for(let u=0,c=o.length;u<c;u++){const f=o[u];r(t.shapes,f)}else r(t.shapes,o)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let o=0,u=this.material.length;o<u;o++)a.push(r(t.materials,this.material[o]));i.material=a}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const o=this.animations[a];i.animations.push(r(t.animations,o))}}if(e){const a=s(t.geometries),o=s(t.materials),u=s(t.textures),c=s(t.images),f=s(t.shapes),p=s(t.skeletons),m=s(t.animations),v=s(t.nodes);a.length>0&&(n.geometries=a),o.length>0&&(n.materials=o),u.length>0&&(n.textures=u),c.length>0&&(n.images=c),f.length>0&&(n.shapes=f),p.length>0&&(n.skeletons=p),m.length>0&&(n.animations=m),v.length>0&&(n.nodes=v)}return n.object=i,n;function s(a){const o=[];for(const u in a){const c=a[u];delete c.metadata,o.push(c)}return o}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}}_2.DEFAULT_UP=new L(0,1,0);_2.DEFAULT_MATRIX_AUTO_UPDATE=!0;_2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const F2=new L,$2=new L,G9=new L,J2=new L,X0=new L,Y0=new L,G8=new L,V9=new L,k9=new L,W9=new L,X9=new j1,Y9=new j1,q9=new j1;class B2{constructor(t=new L,e=new L,n=new L){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),F2.subVectors(t,e),i.cross(F2);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){F2.subVectors(i,e),$2.subVectors(n,e),G9.subVectors(t,e);const s=F2.dot(F2),a=F2.dot($2),o=F2.dot(G9),u=$2.dot($2),c=$2.dot(G9),f=s*u-a*a;if(f===0)return r.set(0,0,0),null;const p=1/f,m=(u*o-a*c)*p,v=(s*c-a*o)*p;return r.set(1-m-v,v,m)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,J2)===null?!1:J2.x>=0&&J2.y>=0&&J2.x+J2.y<=1}static getInterpolation(t,e,n,i,r,s,a,o){return this.getBarycoord(t,e,n,i,J2)===null?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,J2.x),o.addScaledVector(s,J2.y),o.addScaledVector(a,J2.z),o)}static getInterpolatedAttribute(t,e,n,i,r,s){return X9.setScalar(0),Y9.setScalar(0),q9.setScalar(0),X9.fromBufferAttribute(t,e),Y9.fromBufferAttribute(t,n),q9.fromBufferAttribute(t,i),s.setScalar(0),s.addScaledVector(X9,r.x),s.addScaledVector(Y9,r.y),s.addScaledVector(q9,r.z),s}static isFrontFacing(t,e,n,i){return F2.subVectors(n,e),$2.subVectors(t,e),F2.cross($2).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return F2.subVectors(this.c,this.b),$2.subVectors(this.a,this.b),F2.cross($2).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return B2.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return B2.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,r){return B2.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return B2.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return B2.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;X0.subVectors(i,n),Y0.subVectors(r,n),V9.subVectors(t,n);const o=X0.dot(V9),u=Y0.dot(V9);if(o<=0&&u<=0)return e.copy(n);k9.subVectors(t,i);const c=X0.dot(k9),f=Y0.dot(k9);if(c>=0&&f<=c)return e.copy(i);const p=o*f-c*u;if(p<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(n).addScaledVector(X0,s);W9.subVectors(t,r);const m=X0.dot(W9),v=Y0.dot(W9);if(v>=0&&m<=v)return e.copy(r);const M=m*u-o*v;if(M<=0&&u>=0&&v<=0)return a=u/(u-v),e.copy(n).addScaledVector(Y0,a);const d=c*v-m*f;if(d<=0&&f-c>=0&&m-v>=0)return G8.subVectors(r,i),a=(f-c)/(f-c+(m-v)),e.copy(i).addScaledVector(G8,a);const h=1/(d+M+p);return s=M*h,a=p*h,e.copy(n).addScaledVector(X0,s).addScaledVector(Y0,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const X5={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},u0={h:0,s:0,l:0},k3={h:0,s:0,l:0};function K9(l,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?l+(t-l)*6*e:e<1/2?t:e<2/3?l+(t-l)*6*(2/3-e):l}class W1{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=V2){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,k1.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=k1.workingColorSpace){return this.r=t,this.g=e,this.b=n,k1.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=k1.workingColorSpace){if(t=s8(t,1),e=d2(e,0,1),n=d2(n,0,1),e===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+e):n+e-n*e,s=2*n-r;this.r=K9(s,r,t+1/3),this.g=K9(s,r,t),this.b=K9(s,r,t-1/3)}return k1.toWorkingColorSpace(this,i),this}setStyle(t,e=V2){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const s=i[1],a=i[2];switch(s){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const r=i[1],s=r.length;if(s===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,e);if(s===6)return this.setHex(parseInt(r,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=V2){const n=X5[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=l3(t.r),this.g=l3(t.g),this.b=l3(t.b),this}copyLinearToSRGB(t){return this.r=D9(t.r),this.g=D9(t.g),this.b=D9(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=V2){return k1.fromWorkingColorSpace(h2.copy(this),t),Math.round(d2(h2.r*255,0,255))*65536+Math.round(d2(h2.g*255,0,255))*256+Math.round(d2(h2.b*255,0,255))}getHexString(t=V2){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=k1.workingColorSpace){k1.fromWorkingColorSpace(h2.copy(this),e);const n=h2.r,i=h2.g,r=h2.b,s=Math.max(n,i,r),a=Math.min(n,i,r);let o,u;const c=(a+s)/2;if(a===s)o=0,u=0;else{const f=s-a;switch(u=c<=.5?f/(s+a):f/(2-s-a),s){case n:o=(i-r)/f+(i<r?6:0);break;case i:o=(r-n)/f+2;break;case r:o=(n-i)/f+4;break}o/=6}return t.h=o,t.s=u,t.l=c,t}getRGB(t,e=k1.workingColorSpace){return k1.fromWorkingColorSpace(h2.copy(this),e),t.r=h2.r,t.g=h2.g,t.b=h2.b,t}getStyle(t=V2){k1.fromWorkingColorSpace(h2.copy(this),t);const e=h2.r,n=h2.g,i=h2.b;return t!==V2?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){return this.getHSL(u0),this.setHSL(u0.h+t,u0.s+e,u0.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(u0),t.getHSL(k3);const n=y3(u0.h,k3.h,e),i=y3(u0.s,k3.s,e),r=y3(u0.l,k3.l,e);return this.setHSL(n,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*i,this.g=r[1]*e+r[4]*n+r[7]*i,this.b=r[2]*e+r[5]*n+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const h2=new W1;W1.NAMES=X5;let F7=0;class L3 extends N0{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:F7++}),this.uuid=h3(),this.name="",this.type="Material",this.blending=e3,this.side=m0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=u4,this.blendDst=c4,this.blendEquation=b0,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new W1(0,0,0),this.blendAlpha=0,this.depthFunc=i3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=b8,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=O0,this.stencilZFail=O0,this.stencilZPass=O0,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==e3&&(n.blending=this.blending),this.side!==m0&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==u4&&(n.blendSrc=this.blendSrc),this.blendDst!==c4&&(n.blendDst=this.blendDst),this.blendEquation!==b0&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==i3&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==b8&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==O0&&(n.stencilFail=this.stencilFail),this.stencilZFail!==O0&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==O0&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(r){const s=[];for(const a in r){const o=r[a];delete o.metadata,s.push(o)}return s}if(e){const r=i(t.textures),s=i(t.images);r.length>0&&(n.textures=r),s.length>0&&(n.images=s)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let r=0;r!==i;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class P0 extends L3{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new W1(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new l0,this.combine=C5,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const i2=new L,W3=new w1;class X2{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=w8,this.updateRanges=[],this.gpuType=t0,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)W3.fromBufferAttribute(this,e),W3.applyMatrix3(t),this.setXY(e,W3.x,W3.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)i2.fromBufferAttribute(this,e),i2.applyMatrix3(t),this.setXYZ(e,i2.x,i2.y,i2.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)i2.fromBufferAttribute(this,e),i2.applyMatrix4(t),this.setXYZ(e,i2.x,i2.y,i2.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)i2.fromBufferAttribute(this,e),i2.applyNormalMatrix(t),this.setXYZ(e,i2.x,i2.y,i2.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)i2.fromBufferAttribute(this,e),i2.transformDirection(t),this.setXYZ(e,i2.x,i2.y,i2.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=$0(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=f2(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=$0(e,this.array)),e}setX(t,e){return this.normalized&&(e=f2(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=$0(e,this.array)),e}setY(t,e){return this.normalized&&(e=f2(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=$0(e,this.array)),e}setZ(t,e){return this.normalized&&(e=f2(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=$0(e,this.array)),e}setW(t,e){return this.normalized&&(e=f2(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=f2(e,this.array),n=f2(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=f2(e,this.array),n=f2(n,this.array),i=f2(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=f2(e,this.array),n=f2(n,this.array),i=f2(i,this.array),r=f2(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==w8&&(t.usage=this.usage),t}}class Y5 extends X2{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class q5 extends X2{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class g2 extends X2{constructor(t,e,n){super(new Float32Array(t),e,n)}}let O7=0;const L2=new t2,j9=new _2,q0=new L,R2=new P3,g3=new P3,o2=new L;class G2 extends N0{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:O7++}),this.uuid=h3(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(V5(t)?q5:Y5)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new L1().getNormalMatrix(t);n.applyNormalMatrix(r),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return L2.makeRotationFromQuaternion(t),this.applyMatrix4(L2),this}rotateX(t){return L2.makeRotationX(t),this.applyMatrix4(L2),this}rotateY(t){return L2.makeRotationY(t),this.applyMatrix4(L2),this}rotateZ(t){return L2.makeRotationZ(t),this.applyMatrix4(L2),this}translate(t,e,n){return L2.makeTranslation(t,e,n),this.applyMatrix4(L2),this}scale(t,e,n){return L2.makeScale(t,e,n),this.applyMatrix4(L2),this}lookAt(t){return j9.lookAt(t),j9.updateMatrix(),this.applyMatrix4(j9.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(q0).negate(),this.translate(q0.x,q0.y,q0.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const r=t[n];e.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new g2(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new P3);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new L(-1/0,-1/0,-1/0),new L(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const r=e[n];R2.setFromBufferAttribute(r),this.morphTargetsRelative?(o2.addVectors(this.boundingBox.min,R2.min),this.boundingBox.expandByPoint(o2),o2.addVectors(this.boundingBox.max,R2.max),this.boundingBox.expandByPoint(o2)):(this.boundingBox.expandByPoint(R2.min),this.boundingBox.expandByPoint(R2.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new M9);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new L,1/0);return}if(t){const n=this.boundingSphere.center;if(R2.setFromBufferAttribute(t),e)for(let r=0,s=e.length;r<s;r++){const a=e[r];g3.setFromBufferAttribute(a),this.morphTargetsRelative?(o2.addVectors(R2.min,g3.min),R2.expandByPoint(o2),o2.addVectors(R2.max,g3.max),R2.expandByPoint(o2)):(R2.expandByPoint(g3.min),R2.expandByPoint(g3.max))}R2.getCenter(n);let i=0;for(let r=0,s=t.count;r<s;r++)o2.fromBufferAttribute(t,r),i=Math.max(i,n.distanceToSquared(o2));if(e)for(let r=0,s=e.length;r<s;r++){const a=e[r],o=this.morphTargetsRelative;for(let u=0,c=a.count;u<c;u++)o2.fromBufferAttribute(a,u),o&&(q0.fromBufferAttribute(t,u),o2.add(q0)),i=Math.max(i,n.distanceToSquared(o2))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,i=e.normal,r=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new X2(new Float32Array(4*n.count),4));const s=this.getAttribute("tangent"),a=[],o=[];for(let O=0;O<n.count;O++)a[O]=new L,o[O]=new L;const u=new L,c=new L,f=new L,p=new w1,m=new w1,v=new w1,M=new L,d=new L;function h(O,t1,_){u.fromBufferAttribute(n,O),c.fromBufferAttribute(n,t1),f.fromBufferAttribute(n,_),p.fromBufferAttribute(r,O),m.fromBufferAttribute(r,t1),v.fromBufferAttribute(r,_),c.sub(u),f.sub(u),m.sub(p),v.sub(p);const S=1/(m.x*v.y-v.x*m.y);isFinite(S)&&(M.copy(c).multiplyScalar(v.y).addScaledVector(f,-m.y).multiplyScalar(S),d.copy(f).multiplyScalar(m.x).addScaledVector(c,-v.x).multiplyScalar(S),a[O].add(M),a[t1].add(M),a[_].add(M),o[O].add(d),o[t1].add(d),o[_].add(d))}let T=this.groups;T.length===0&&(T=[{start:0,count:t.count}]);for(let O=0,t1=T.length;O<t1;++O){const _=T[O],S=_.start,V=_.count;for(let z=S,Y=S+V;z<Y;z+=3)h(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const E=new L,A=new L,F=new L,R=new L;function b(O){F.fromBufferAttribute(i,O),R.copy(F);const t1=a[O];E.copy(t1),E.sub(F.multiplyScalar(F.dot(t1))).normalize(),A.crossVectors(R,t1);const S=A.dot(o[O])<0?-1:1;s.setXYZW(O,E.x,E.y,E.z,S)}for(let O=0,t1=T.length;O<t1;++O){const _=T[O],S=_.start,V=_.count;for(let z=S,Y=S+V;z<Y;z+=3)b(t.getX(z+0)),b(t.getX(z+1)),b(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new X2(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let p=0,m=n.count;p<m;p++)n.setXYZ(p,0,0,0);const i=new L,r=new L,s=new L,a=new L,o=new L,u=new L,c=new L,f=new L;if(t)for(let p=0,m=t.count;p<m;p+=3){const v=t.getX(p+0),M=t.getX(p+1),d=t.getX(p+2);i.fromBufferAttribute(e,v),r.fromBufferAttribute(e,M),s.fromBufferAttribute(e,d),c.subVectors(s,r),f.subVectors(i,r),c.cross(f),a.fromBufferAttribute(n,v),o.fromBufferAttribute(n,M),u.fromBufferAttribute(n,d),a.add(c),o.add(c),u.add(c),n.setXYZ(v,a.x,a.y,a.z),n.setXYZ(M,o.x,o.y,o.z),n.setXYZ(d,u.x,u.y,u.z)}else for(let p=0,m=e.count;p<m;p+=3)i.fromBufferAttribute(e,p+0),r.fromBufferAttribute(e,p+1),s.fromBufferAttribute(e,p+2),c.subVectors(s,r),f.subVectors(i,r),c.cross(f),n.setXYZ(p+0,c.x,c.y,c.z),n.setXYZ(p+1,c.x,c.y,c.z),n.setXYZ(p+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)o2.fromBufferAttribute(t,e),o2.normalize(),t.setXYZ(e,o2.x,o2.y,o2.z)}toNonIndexed(){function t(a,o){const u=a.array,c=a.itemSize,f=a.normalized,p=new u.constructor(o.length*c);let m=0,v=0;for(let M=0,d=o.length;M<d;M++){a.isInterleavedBufferAttribute?m=o[M]*a.data.stride+a.offset:m=o[M]*c;for(let h=0;h<c;h++)p[v++]=u[m++]}return new X2(p,c,f)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new G2,n=this.index.array,i=this.attributes;for(const a in i){const o=i[a],u=t(o,n);e.setAttribute(a,u)}const r=this.morphAttributes;for(const a in r){const o=[],u=r[a];for(let c=0,f=u.length;c<f;c++){const p=u[c],m=t(p,n);o.push(m)}e.morphAttributes[a]=o}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let a=0,o=s.length;a<o;a++){const u=s[a];e.addGroup(u.start,u.count,u.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const o=this.parameters;for(const u in o)o[u]!==void 0&&(t[u]=o[u]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const o in n){const u=n[o];t.data.attributes[o]=u.toJSON(t.data)}const i={};let r=!1;for(const o in this.morphAttributes){const u=this.morphAttributes[o],c=[];for(let f=0,p=u.length;f<p;f++){const m=u[f];c.push(m.toJSON(t.data))}c.length>0&&(i[o]=c,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const u in i){const c=i[u];this.setAttribute(u,c.clone(e))}const r=t.morphAttributes;for(const u in r){const c=[],f=r[u];for(let p=0,m=f.length;p<m;p++)c.push(f[p].clone(e));this.morphAttributes[u]=c}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let u=0,c=s.length;u<c;u++){const f=s[u];this.addGroup(f.start,f.count,f.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const o=t.boundingSphere;return o!==null&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const V8=new t2,S0=new S9,X3=new M9,k8=new L,Y3=new L,q3=new L,K3=new L,Z9=new L,j3=new L,W8=new L,Z3=new L;class E2 extends _2{constructor(t=new G2,e=new P0){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const a=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,s=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(r&&a){j3.set(0,0,0);for(let o=0,u=r.length;o<u;o++){const c=a[o],f=r[o];c!==0&&(Z9.fromBufferAttribute(f,t),s?j3.addScaledVector(Z9,c):j3.addScaledVector(Z9.sub(e),c))}e.add(j3)}return e}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),X3.copy(n.boundingSphere),X3.applyMatrix4(r),S0.copy(t.ray).recast(t.near),!(X3.containsPoint(S0.origin)===!1&&(S0.intersectSphere(X3,k8)===null||S0.origin.distanceToSquared(k8)>(t.far-t.near)**2))&&(V8.copy(r).invert(),S0.copy(t.ray).applyMatrix4(V8),!(n.boundingBox!==null&&S0.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,S0)))}_computeIntersections(t,e,n){let i;const r=this.geometry,s=this.material,a=r.index,o=r.attributes.position,u=r.attributes.uv,c=r.attributes.uv1,f=r.attributes.normal,p=r.groups,m=r.drawRange;if(a!==null)if(Array.isArray(s))for(let v=0,M=p.length;v<M;v++){const d=p[v],h=s[d.materialIndex],T=Math.max(d.start,m.start),E=Math.min(a.count,Math.min(d.start+d.count,m.start+m.count));for(let A=T,F=E;A<F;A+=3){const R=a.getX(A),b=a.getX(A+1),O=a.getX(A+2);i=$3(this,h,t,n,u,c,f,R,b,O),i&&(i.faceIndex=Math.floor(A/3),i.face.materialIndex=d.materialIndex,e.push(i))}}else{const v=Math.max(0,m.start),M=Math.min(a.count,m.start+m.count);for(let d=v,h=M;d<h;d+=3){const T=a.getX(d),E=a.getX(d+1),A=a.getX(d+2);i=$3(this,s,t,n,u,c,f,T,E,A),i&&(i.faceIndex=Math.floor(d/3),e.push(i))}}else if(o!==void 0)if(Array.isArray(s))for(let v=0,M=p.length;v<M;v++){const d=p[v],h=s[d.materialIndex],T=Math.max(d.start,m.start),E=Math.min(o.count,Math.min(d.start+d.count,m.start+m.count));for(let A=T,F=E;A<F;A+=3){const R=A,b=A+1,O=A+2;i=$3(this,h,t,n,u,c,f,R,b,O),i&&(i.faceIndex=Math.floor(A/3),i.face.materialIndex=d.materialIndex,e.push(i))}}else{const v=Math.max(0,m.start),M=Math.min(o.count,m.start+m.count);for(let d=v,h=M;d<h;d+=3){const T=d,E=d+1,A=d+2;i=$3(this,s,t,n,u,c,f,T,E,A),i&&(i.faceIndex=Math.floor(d/3),e.push(i))}}}}function B7(l,t,e,n,i,r,s,a){let o;if(t.side===y2?o=n.intersectTriangle(s,r,i,!0,a):o=n.intersectTriangle(i,r,s,t.side===m0,a),o===null)return null;Z3.copy(a),Z3.applyMatrix4(l.matrixWorld);const u=e.ray.origin.distanceTo(Z3);return u<e.near||u>e.far?null:{distance:u,point:Z3.clone(),object:l}}function $3(l,t,e,n,i,r,s,a,o,u){l.getVertexPosition(a,Y3),l.getVertexPosition(o,q3),l.getVertexPosition(u,K3);const c=B7(l,t,e,n,Y3,q3,K3,W8);if(c){const f=new L;B2.getBarycoord(W8,Y3,q3,K3,f),i&&(c.uv=B2.getInterpolatedAttribute(i,a,o,u,f,new w1)),r&&(c.uv1=B2.getInterpolatedAttribute(r,a,o,u,f,new w1)),s&&(c.normal=B2.getInterpolatedAttribute(s,a,o,u,f,new L),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));const p={a,b:o,c:u,normal:new L,materialIndex:0};B2.getNormal(Y3,q3,K3,p.normal),c.face=p,c.barycoord=f}return c}class D3 extends G2{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const o=[],u=[],c=[],f=[];let p=0,m=0;v("z","y","x",-1,-1,n,e,t,s,r,0),v("z","y","x",1,-1,n,e,-t,s,r,1),v("x","z","y",1,1,t,n,e,i,s,2),v("x","z","y",1,-1,t,n,-e,i,s,3),v("x","y","z",1,-1,t,e,n,i,r,4),v("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new g2(u,3)),this.setAttribute("normal",new g2(c,3)),this.setAttribute("uv",new g2(f,2));function v(M,d,h,T,E,A,F,R,b,O,t1){const _=A/b,S=F/O,V=A/2,z=F/2,Y=R/2,j=b+1,G=O+1;let K=0,H=0;const a1=new L;for(let o1=0;o1<G;o1++){const _1=o1*S-z;for(let z1=0;z1<j;z1++){const X1=z1*_-V;a1[M]=X1*T,a1[d]=_1*E,a1[h]=Y,u.push(a1.x,a1.y,a1.z),a1[M]=0,a1[d]=0,a1[h]=R>0?1:-1,c.push(a1.x,a1.y,a1.z),f.push(z1/b),f.push(1-o1/O),K+=1}}for(let o1=0;o1<O;o1++)for(let _1=0;_1<b;_1++){const z1=p+_1+j*o1,X1=p+_1+j*(o1+1),k=p+(_1+1)+j*(o1+1),$=p+(_1+1)+j*o1;o.push(z1,X1,$),o.push(X1,k,$),H+=6}a.addGroup(m,H,t1),m+=H,p+=K}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new D3(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function u3(l){const t={};for(const e in l){t[e]={};for(const n in l[e]){const i=l[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function p2(l){const t={};for(let e=0;e<l.length;e++){const n=u3(l[e]);for(const i in n)t[i]=n[i]}return t}function z7(l){const t=[];for(let e=0;e<l.length;e++)t.push(l[e].clone());return t}function K5(l){const t=l.getRenderTarget();return t===null?l.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:k1.workingColorSpace}const H7={clone:u3,merge:p2};var G7=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,V7=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class _0 extends L3{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=G7,this.fragmentShader=V7,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=u3(t.uniforms),this.uniformsGroups=z7(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const s=this.uniforms[i].value;s&&s.isTexture?e.uniforms[i]={type:"t",value:s.toJSON(t).uuid}:s&&s.isColor?e.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?e.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?e.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?e.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?e.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?e.uniforms[i]={type:"m4",value:s.toArray()}:e.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class j5 extends _2{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new t2,this.projectionMatrix=new t2,this.projectionMatrixInverse=new t2,this.coordinateSystem=e0}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const c0=new L,X8=new w1,Y8=new w1;class C2 extends j5{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=A3*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(E3*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return A3*2*Math.atan(Math.tan(E3*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){c0.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(c0.x,c0.y).multiplyScalar(-t/c0.z),c0.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(c0.x,c0.y).multiplyScalar(-t/c0.z)}getViewSize(t,e){return this.getViewBounds(t,X8,Y8),e.subVectors(Y8,X8)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(E3*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const o=s.fullWidth,u=s.fullHeight;r+=s.offsetX*i/o,e-=s.offsetY*n/u,i*=s.width/o,n*=s.height/u}const a=this.filmOffset;a!==0&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const K0=-90,j0=1;class k7 extends _2{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new C2(K0,j0,t,e);i.layers=this.layers,this.add(i);const r=new C2(K0,j0,t,e);r.layers=this.layers,this.add(r);const s=new C2(K0,j0,t,e);s.layers=this.layers,this.add(s);const a=new C2(K0,j0,t,e);a.layers=this.layers,this.add(a);const o=new C2(K0,j0,t,e);o.layers=this.layers,this.add(o);const u=new C2(K0,j0,t,e);u.layers=this.layers,this.add(u)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,r,s,a,o]=e;for(const u of e)this.remove(u);if(t===e0)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),s.up.set(0,0,1),s.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else if(t===m9)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),s.up.set(0,0,-1),s.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const u of e)this.add(u),u.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,s,a,o,u,c]=this.children,f=t.getRenderTarget(),p=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),v=t.xr.enabled;t.xr.enabled=!1;const M=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,r),t.setRenderTarget(n,1,i),t.render(e,s),t.setRenderTarget(n,2,i),t.render(e,a),t.setRenderTarget(n,3,i),t.render(e,o),t.setRenderTarget(n,4,i),t.render(e,u),n.texture.generateMipmaps=M,t.setRenderTarget(n,5,i),t.render(e,c),t.setRenderTarget(f,p,m),t.xr.enabled=v,n.texture.needsPMREMUpdate=!0}}class Z5 extends m2{constructor(t,e,n,i,r,s,a,o,u,c){t=t!==void 0?t:[],e=e!==void 0?e:r3,super(t,e,n,i,r,s,a,o,u,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class W7 extends U0{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new Z5(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:O2}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new D3(5,5,5),r=new _0({name:"CubemapFromEquirect",uniforms:u3(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:y2,blending:f0});r.uniforms.tEquirect.value=e;const s=new E2(i,r),a=e.minFilter;return e.minFilter===C0&&(e.minFilter=O2),new k7(1,10,this).update(t,s),e.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let s=0;s<6;s++)t.setRenderTarget(this,s),t.clear(e,n,i);t.setRenderTarget(r)}}const $9=new L,X7=new L,Y7=new L1;class h0{constructor(t=new L(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=$9.subVectors(n,e).cross(X7.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta($9),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Y7.getNormalMatrix(t),i=this.coplanarPoint($9).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const E0=new M9,J3=new L;class o8{constructor(t=new h0,e=new h0,n=new h0,i=new h0,r=new h0,s=new h0){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=e0){const n=this.planes,i=t.elements,r=i[0],s=i[1],a=i[2],o=i[3],u=i[4],c=i[5],f=i[6],p=i[7],m=i[8],v=i[9],M=i[10],d=i[11],h=i[12],T=i[13],E=i[14],A=i[15];if(n[0].setComponents(o-r,p-u,d-m,A-h).normalize(),n[1].setComponents(o+r,p+u,d+m,A+h).normalize(),n[2].setComponents(o+s,p+c,d+v,A+T).normalize(),n[3].setComponents(o-s,p-c,d-v,A-T).normalize(),n[4].setComponents(o-a,p-f,d-M,A-E).normalize(),e===e0)n[5].setComponents(o+a,p+f,d+M,A+E).normalize();else if(e===m9)n[5].setComponents(a,f,M,E).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),E0.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),E0.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(E0)}intersectsSprite(t){return E0.center.set(0,0,0),E0.radius=.7071067811865476,E0.applyMatrix4(t.matrixWorld),this.intersectsSphere(E0)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let r=0;r<6;r++)if(e[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(J3.x=i.normal.x>0?t.max.x:t.min.x,J3.y=i.normal.y>0?t.max.y:t.min.y,J3.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(J3)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function $5(){let l=null,t=!1,e=null,n=null;function i(r,s){e(r,s),n=l.requestAnimationFrame(i)}return{start:function(){t!==!0&&e!==null&&(n=l.requestAnimationFrame(i),t=!0)},stop:function(){l.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(r){e=r},setContext:function(r){l=r}}}function q7(l){const t=new WeakMap;function e(a,o){const u=a.array,c=a.usage,f=u.byteLength,p=l.createBuffer();l.bindBuffer(o,p),l.bufferData(o,u,c),a.onUploadCallback();let m;if(u instanceof Float32Array)m=l.FLOAT;else if(u instanceof Uint16Array)a.isFloat16BufferAttribute?m=l.HALF_FLOAT:m=l.UNSIGNED_SHORT;else if(u instanceof Int16Array)m=l.SHORT;else if(u instanceof Uint32Array)m=l.UNSIGNED_INT;else if(u instanceof Int32Array)m=l.INT;else if(u instanceof Int8Array)m=l.BYTE;else if(u instanceof Uint8Array)m=l.UNSIGNED_BYTE;else if(u instanceof Uint8ClampedArray)m=l.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+u);return{buffer:p,type:m,bytesPerElement:u.BYTES_PER_ELEMENT,version:a.version,size:f}}function n(a,o,u){const c=o.array,f=o.updateRanges;if(l.bindBuffer(u,a),f.length===0)l.bufferSubData(u,0,c);else{f.sort((m,v)=>m.start-v.start);let p=0;for(let m=1;m<f.length;m++){const v=f[p],M=f[m];M.start<=v.start+v.count+1?v.count=Math.max(v.count,M.start+M.count-v.start):(++p,f[p]=M)}f.length=p+1;for(let m=0,v=f.length;m<v;m++){const M=f[m];l.bufferSubData(u,M.start*c.BYTES_PER_ELEMENT,c,M.start,M.count)}o.clearUpdateRanges()}o.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),t.get(a)}function r(a){a.isInterleavedBufferAttribute&&(a=a.data);const o=t.get(a);o&&(l.deleteBuffer(o.buffer),t.delete(a))}function s(a,o){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const c=t.get(a);(!c||c.version<a.version)&&t.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const u=t.get(a);if(u===void 0)t.set(a,e(a,o));else if(u.version<a.version){if(u.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(u.buffer,a,o),u.version=a.version}}return{get:i,remove:r,update:s}}class E9 extends G2{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,s=e/2,a=Math.floor(n),o=Math.floor(i),u=a+1,c=o+1,f=t/a,p=e/o,m=[],v=[],M=[],d=[];for(let h=0;h<c;h++){const T=h*p-s;for(let E=0;E<u;E++){const A=E*f-r;v.push(A,-T,0),M.push(0,0,1),d.push(E/a),d.push(1-h/o)}}for(let h=0;h<o;h++)for(let T=0;T<a;T++){const E=T+u*h,A=T+u*(h+1),F=T+1+u*(h+1),R=T+1+u*h;m.push(E,A,R),m.push(A,F,R)}this.setIndex(m),this.setAttribute("position",new g2(v,3)),this.setAttribute("normal",new g2(M,3)),this.setAttribute("uv",new g2(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new E9(t.width,t.height,t.widthSegments,t.heightSegments)}}var K7=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,j7=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,Z7=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,$7=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,J7=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,Q7=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,tt=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,et=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,nt=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,lt=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,it=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,rt=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,st=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,at=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,ot=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,ut=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,ct=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,ht=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,dt=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,ft=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,pt=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,mt=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,_t=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,gt=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,vt=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,xt=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Mt=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,St=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,Et=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,yt=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Tt="gl_FragColor = linearToOutputTexel( gl_FragColor );",At=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,bt=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,wt=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Rt=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Ct=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,Pt=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Lt=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Dt=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Ut=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,It=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Nt=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ft=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Ot=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Bt=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,zt=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Ht=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,Gt=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Vt=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,kt=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Wt=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Xt=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,Yt=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,qt=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Kt=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,jt=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Zt=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,$t=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Jt=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Qt=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,te=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,ee=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ne=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,le=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,ie=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,re=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,se=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,ae=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,oe=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,ue=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,ce=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,he=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,de=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,fe=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,pe=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,me=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,_e=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,ge=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,ve=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,xe=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,Me=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,Se=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Ee=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,ye=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Te=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Ae=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,be=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,we=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Re=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Ce=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,Pe=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Le=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,De=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Ue=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Ie=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Ne=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Fe=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Oe=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Be=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,ze=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,He=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Ge=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Ve=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,ke=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,We=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Xe=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,Ye=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const qe=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Ke=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,je=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Ze=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,$e=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,Je=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,Qe=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,tn=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,en=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,nn=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,ln=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,rn=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,sn=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,an=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,on=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,un=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cn=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,hn=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,dn=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,fn=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,pn=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,mn=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,_n=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,gn=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vn=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,xn=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Mn=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Sn=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,En=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,yn=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Tn=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,An=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,bn=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,wn=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,P1={alphahash_fragment:K7,alphahash_pars_fragment:j7,alphamap_fragment:Z7,alphamap_pars_fragment:$7,alphatest_fragment:J7,alphatest_pars_fragment:Q7,aomap_fragment:tt,aomap_pars_fragment:et,batching_pars_vertex:nt,batching_vertex:lt,begin_vertex:it,beginnormal_vertex:rt,bsdfs:st,iridescence_fragment:at,bumpmap_pars_fragment:ot,clipping_planes_fragment:ut,clipping_planes_pars_fragment:ct,clipping_planes_pars_vertex:ht,clipping_planes_vertex:dt,color_fragment:ft,color_pars_fragment:pt,color_pars_vertex:mt,color_vertex:_t,common:gt,cube_uv_reflection_fragment:vt,defaultnormal_vertex:xt,displacementmap_pars_vertex:Mt,displacementmap_vertex:St,emissivemap_fragment:Et,emissivemap_pars_fragment:yt,colorspace_fragment:Tt,colorspace_pars_fragment:At,envmap_fragment:bt,envmap_common_pars_fragment:wt,envmap_pars_fragment:Rt,envmap_pars_vertex:Ct,envmap_physical_pars_fragment:Ht,envmap_vertex:Pt,fog_vertex:Lt,fog_pars_vertex:Dt,fog_fragment:Ut,fog_pars_fragment:It,gradientmap_pars_fragment:Nt,lightmap_pars_fragment:Ft,lights_lambert_fragment:Ot,lights_lambert_pars_fragment:Bt,lights_pars_begin:zt,lights_toon_fragment:Gt,lights_toon_pars_fragment:Vt,lights_phong_fragment:kt,lights_phong_pars_fragment:Wt,lights_physical_fragment:Xt,lights_physical_pars_fragment:Yt,lights_fragment_begin:qt,lights_fragment_maps:Kt,lights_fragment_end:jt,logdepthbuf_fragment:Zt,logdepthbuf_pars_fragment:$t,logdepthbuf_pars_vertex:Jt,logdepthbuf_vertex:Qt,map_fragment:te,map_pars_fragment:ee,map_particle_fragment:ne,map_particle_pars_fragment:le,metalnessmap_fragment:ie,metalnessmap_pars_fragment:re,morphinstance_vertex:se,morphcolor_vertex:ae,morphnormal_vertex:oe,morphtarget_pars_vertex:ue,morphtarget_vertex:ce,normal_fragment_begin:he,normal_fragment_maps:de,normal_pars_fragment:fe,normal_pars_vertex:pe,normal_vertex:me,normalmap_pars_fragment:_e,clearcoat_normal_fragment_begin:ge,clearcoat_normal_fragment_maps:ve,clearcoat_pars_fragment:xe,iridescence_pars_fragment:Me,opaque_fragment:Se,packing:Ee,premultiplied_alpha_fragment:ye,project_vertex:Te,dithering_fragment:Ae,dithering_pars_fragment:be,roughnessmap_fragment:we,roughnessmap_pars_fragment:Re,shadowmap_pars_fragment:Ce,shadowmap_pars_vertex:Pe,shadowmap_vertex:Le,shadowmask_pars_fragment:De,skinbase_vertex:Ue,skinning_pars_vertex:Ie,skinning_vertex:Ne,skinnormal_vertex:Fe,specularmap_fragment:Oe,specularmap_pars_fragment:Be,tonemapping_fragment:ze,tonemapping_pars_fragment:He,transmission_fragment:Ge,transmission_pars_fragment:Ve,uv_pars_fragment:ke,uv_pars_vertex:We,uv_vertex:Xe,worldpos_vertex:Ye,background_vert:qe,background_frag:Ke,backgroundCube_vert:je,backgroundCube_frag:Ze,cube_vert:$e,cube_frag:Je,depth_vert:Qe,depth_frag:tn,distanceRGBA_vert:en,distanceRGBA_frag:nn,equirect_vert:ln,equirect_frag:rn,linedashed_vert:sn,linedashed_frag:an,meshbasic_vert:on,meshbasic_frag:un,meshlambert_vert:cn,meshlambert_frag:hn,meshmatcap_vert:dn,meshmatcap_frag:fn,meshnormal_vert:pn,meshnormal_frag:mn,meshphong_vert:_n,meshphong_frag:gn,meshphysical_vert:vn,meshphysical_frag:xn,meshtoon_vert:Mn,meshtoon_frag:Sn,points_vert:En,points_frag:yn,shadow_vert:Tn,shadow_frag:An,sprite_vert:bn,sprite_frag:wn},e1={common:{diffuse:{value:new W1(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new L1},alphaMap:{value:null},alphaMapTransform:{value:new L1},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new L1}},envmap:{envMap:{value:null},envMapRotation:{value:new L1},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new L1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new L1}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new L1},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new L1},normalScale:{value:new w1(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new L1},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new L1}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new L1}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new L1}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new W1(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new W1(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new L1},alphaTest:{value:0},uvTransform:{value:new L1}},sprite:{diffuse:{value:new W1(16777215)},opacity:{value:1},center:{value:new w1(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new L1},alphaMap:{value:null},alphaMapTransform:{value:new L1},alphaTest:{value:0}}},k2={basic:{uniforms:p2([e1.common,e1.specularmap,e1.envmap,e1.aomap,e1.lightmap,e1.fog]),vertexShader:P1.meshbasic_vert,fragmentShader:P1.meshbasic_frag},lambert:{uniforms:p2([e1.common,e1.specularmap,e1.envmap,e1.aomap,e1.lightmap,e1.emissivemap,e1.bumpmap,e1.normalmap,e1.displacementmap,e1.fog,e1.lights,{emissive:{value:new W1(0)}}]),vertexShader:P1.meshlambert_vert,fragmentShader:P1.meshlambert_frag},phong:{uniforms:p2([e1.common,e1.specularmap,e1.envmap,e1.aomap,e1.lightmap,e1.emissivemap,e1.bumpmap,e1.normalmap,e1.displacementmap,e1.fog,e1.lights,{emissive:{value:new W1(0)},specular:{value:new W1(1118481)},shininess:{value:30}}]),vertexShader:P1.meshphong_vert,fragmentShader:P1.meshphong_frag},standard:{uniforms:p2([e1.common,e1.envmap,e1.aomap,e1.lightmap,e1.emissivemap,e1.bumpmap,e1.normalmap,e1.displacementmap,e1.roughnessmap,e1.metalnessmap,e1.fog,e1.lights,{emissive:{value:new W1(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:P1.meshphysical_vert,fragmentShader:P1.meshphysical_frag},toon:{uniforms:p2([e1.common,e1.aomap,e1.lightmap,e1.emissivemap,e1.bumpmap,e1.normalmap,e1.displacementmap,e1.gradientmap,e1.fog,e1.lights,{emissive:{value:new W1(0)}}]),vertexShader:P1.meshtoon_vert,fragmentShader:P1.meshtoon_frag},matcap:{uniforms:p2([e1.common,e1.bumpmap,e1.normalmap,e1.displacementmap,e1.fog,{matcap:{value:null}}]),vertexShader:P1.meshmatcap_vert,fragmentShader:P1.meshmatcap_frag},points:{uniforms:p2([e1.points,e1.fog]),vertexShader:P1.points_vert,fragmentShader:P1.points_frag},dashed:{uniforms:p2([e1.common,e1.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:P1.linedashed_vert,fragmentShader:P1.linedashed_frag},depth:{uniforms:p2([e1.common,e1.displacementmap]),vertexShader:P1.depth_vert,fragmentShader:P1.depth_frag},normal:{uniforms:p2([e1.common,e1.bumpmap,e1.normalmap,e1.displacementmap,{opacity:{value:1}}]),vertexShader:P1.meshnormal_vert,fragmentShader:P1.meshnormal_frag},sprite:{uniforms:p2([e1.sprite,e1.fog]),vertexShader:P1.sprite_vert,fragmentShader:P1.sprite_frag},background:{uniforms:{uvTransform:{value:new L1},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:P1.background_vert,fragmentShader:P1.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new L1}},vertexShader:P1.backgroundCube_vert,fragmentShader:P1.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:P1.cube_vert,fragmentShader:P1.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:P1.equirect_vert,fragmentShader:P1.equirect_frag},distanceRGBA:{uniforms:p2([e1.common,e1.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:P1.distanceRGBA_vert,fragmentShader:P1.distanceRGBA_frag},shadow:{uniforms:p2([e1.lights,e1.fog,{color:{value:new W1(0)},opacity:{value:1}}]),vertexShader:P1.shadow_vert,fragmentShader:P1.shadow_frag}};k2.physical={uniforms:p2([k2.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new L1},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new L1},clearcoatNormalScale:{value:new w1(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new L1},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new L1},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new L1},sheen:{value:0},sheenColor:{value:new W1(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new L1},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new L1},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new L1},transmissionSamplerSize:{value:new w1},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new L1},attenuationDistance:{value:0},attenuationColor:{value:new W1(0)},specularColor:{value:new W1(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new L1},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new L1},anisotropyVector:{value:new w1},anisotropyMap:{value:null},anisotropyMapTransform:{value:new L1}}]),vertexShader:P1.meshphysical_vert,fragmentShader:P1.meshphysical_frag};const Q3={r:0,b:0,g:0},y0=new l0,Rn=new t2;function Cn(l,t,e,n,i,r,s){const a=new W1(0);let o=r===!0?0:1,u,c,f=null,p=0,m=null;function v(T){let E=T.isScene===!0?T.background:null;return E&&E.isTexture&&(E=(T.backgroundBlurriness>0?e:t).get(E)),E}function M(T){let E=!1;const A=v(T);A===null?h(a,o):A&&A.isColor&&(h(A,1),E=!0);const F=l.xr.getEnvironmentBlendMode();F==="additive"?n.buffers.color.setClear(0,0,0,1,s):F==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,s),(l.autoClear||E)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),l.clear(l.autoClearColor,l.autoClearDepth,l.autoClearStencil))}function d(T,E){const A=v(E);A&&(A.isCubeTexture||A.mapping===v9)?(c===void 0&&(c=new E2(new D3(1,1,1),new _0({name:"BackgroundCubeMaterial",uniforms:u3(k2.backgroundCube.uniforms),vertexShader:k2.backgroundCube.vertexShader,fragmentShader:k2.backgroundCube.fragmentShader,side:y2,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(F,R,b){this.matrixWorld.copyPosition(b.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(c)),y0.copy(E.backgroundRotation),y0.x*=-1,y0.y*=-1,y0.z*=-1,A.isCubeTexture&&A.isRenderTargetTexture===!1&&(y0.y*=-1,y0.z*=-1),c.material.uniforms.envMap.value=A,c.material.uniforms.flipEnvMap.value=A.isCubeTexture&&A.isRenderTargetTexture===!1?-1:1,c.material.uniforms.backgroundBlurriness.value=E.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=E.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(Rn.makeRotationFromEuler(y0)),c.material.toneMapped=k1.getTransfer(A.colorSpace)!==Q1,(f!==A||p!==A.version||m!==l.toneMapping)&&(c.material.needsUpdate=!0,f=A,p=A.version,m=l.toneMapping),c.layers.enableAll(),T.unshift(c,c.geometry,c.material,0,0,null)):A&&A.isTexture&&(u===void 0&&(u=new E2(new E9(2,2),new _0({name:"BackgroundMaterial",uniforms:u3(k2.background.uniforms),vertexShader:k2.background.vertexShader,fragmentShader:k2.background.fragmentShader,side:m0,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),Object.defineProperty(u.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(u)),u.material.uniforms.t2D.value=A,u.material.uniforms.backgroundIntensity.value=E.backgroundIntensity,u.material.toneMapped=k1.getTransfer(A.colorSpace)!==Q1,A.matrixAutoUpdate===!0&&A.updateMatrix(),u.material.uniforms.uvTransform.value.copy(A.matrix),(f!==A||p!==A.version||m!==l.toneMapping)&&(u.material.needsUpdate=!0,f=A,p=A.version,m=l.toneMapping),u.layers.enableAll(),T.unshift(u,u.geometry,u.material,0,0,null))}function h(T,E){T.getRGB(Q3,K5(l)),n.buffers.color.setClear(Q3.r,Q3.g,Q3.b,E,s)}return{getClearColor:function(){return a},setClearColor:function(T,E=1){a.set(T),o=E,h(a,o)},getClearAlpha:function(){return o},setClearAlpha:function(T){o=T,h(a,o)},render:M,addToRenderList:d}}function Pn(l,t){const e=l.getParameter(l.MAX_VERTEX_ATTRIBS),n={},i=p(null);let r=i,s=!1;function a(_,S,V,z,Y){let j=!1;const G=f(z,V,S);r!==G&&(r=G,u(r.object)),j=m(_,z,V,Y),j&&v(_,z,V,Y),Y!==null&&t.update(Y,l.ELEMENT_ARRAY_BUFFER),(j||s)&&(s=!1,A(_,S,V,z),Y!==null&&l.bindBuffer(l.ELEMENT_ARRAY_BUFFER,t.get(Y).buffer))}function o(){return l.createVertexArray()}function u(_){return l.bindVertexArray(_)}function c(_){return l.deleteVertexArray(_)}function f(_,S,V){const z=V.wireframe===!0;let Y=n[_.id];Y===void 0&&(Y={},n[_.id]=Y);let j=Y[S.id];j===void 0&&(j={},Y[S.id]=j);let G=j[z];return G===void 0&&(G=p(o()),j[z]=G),G}function p(_){const S=[],V=[],z=[];for(let Y=0;Y<e;Y++)S[Y]=0,V[Y]=0,z[Y]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:S,enabledAttributes:V,attributeDivisors:z,object:_,attributes:{},index:null}}function m(_,S,V,z){const Y=r.attributes,j=S.attributes;let G=0;const K=V.getAttributes();for(const H in K)if(K[H].location>=0){const o1=Y[H];let _1=j[H];if(_1===void 0&&(H==="instanceMatrix"&&_.instanceMatrix&&(_1=_.instanceMatrix),H==="instanceColor"&&_.instanceColor&&(_1=_.instanceColor)),o1===void 0||o1.attribute!==_1||_1&&o1.data!==_1.data)return!0;G++}return r.attributesNum!==G||r.index!==z}function v(_,S,V,z){const Y={},j=S.attributes;let G=0;const K=V.getAttributes();for(const H in K)if(K[H].location>=0){let o1=j[H];o1===void 0&&(H==="instanceMatrix"&&_.instanceMatrix&&(o1=_.instanceMatrix),H==="instanceColor"&&_.instanceColor&&(o1=_.instanceColor));const _1={};_1.attribute=o1,o1&&o1.data&&(_1.data=o1.data),Y[H]=_1,G++}r.attributes=Y,r.attributesNum=G,r.index=z}function M(){const _=r.newAttributes;for(let S=0,V=_.length;S<V;S++)_[S]=0}function d(_){h(_,0)}function h(_,S){const V=r.newAttributes,z=r.enabledAttributes,Y=r.attributeDivisors;V[_]=1,z[_]===0&&(l.enableVertexAttribArray(_),z[_]=1),Y[_]!==S&&(l.vertexAttribDivisor(_,S),Y[_]=S)}function T(){const _=r.newAttributes,S=r.enabledAttributes;for(let V=0,z=S.length;V<z;V++)S[V]!==_[V]&&(l.disableVertexAttribArray(V),S[V]=0)}function E(_,S,V,z,Y,j,G){G===!0?l.vertexAttribIPointer(_,S,V,Y,j):l.vertexAttribPointer(_,S,V,z,Y,j)}function A(_,S,V,z){M();const Y=z.attributes,j=V.getAttributes(),G=S.defaultAttributeValues;for(const K in j){const H=j[K];if(H.location>=0){let a1=Y[K];if(a1===void 0&&(K==="instanceMatrix"&&_.instanceMatrix&&(a1=_.instanceMatrix),K==="instanceColor"&&_.instanceColor&&(a1=_.instanceColor)),a1!==void 0){const o1=a1.normalized,_1=a1.itemSize,z1=t.get(a1);if(z1===void 0)continue;const X1=z1.buffer,k=z1.type,$=z1.bytesPerElement,p1=k===l.INT||k===l.UNSIGNED_INT||a1.gpuType===Q4;if(a1.isInterleavedBufferAttribute){const u1=a1.data,R1=u1.stride,S1=a1.offset;if(u1.isInstancedInterleavedBuffer){for(let I1=0;I1<H.locationSize;I1++)h(H.location+I1,u1.meshPerAttribute);_.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=u1.meshPerAttribute*u1.count)}else for(let I1=0;I1<H.locationSize;I1++)d(H.location+I1);l.bindBuffer(l.ARRAY_BUFFER,X1);for(let I1=0;I1<H.locationSize;I1++)E(H.location+I1,_1/H.locationSize,k,o1,R1*$,(S1+_1/H.locationSize*I1)*$,p1)}else{if(a1.isInstancedBufferAttribute){for(let u1=0;u1<H.locationSize;u1++)h(H.location+u1,a1.meshPerAttribute);_.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=a1.meshPerAttribute*a1.count)}else for(let u1=0;u1<H.locationSize;u1++)d(H.location+u1);l.bindBuffer(l.ARRAY_BUFFER,X1);for(let u1=0;u1<H.locationSize;u1++)E(H.location+u1,_1/H.locationSize,k,o1,_1*$,_1/H.locationSize*u1*$,p1)}}else if(G!==void 0){const o1=G[K];if(o1!==void 0)switch(o1.length){case 2:l.vertexAttrib2fv(H.location,o1);break;case 3:l.vertexAttrib3fv(H.location,o1);break;case 4:l.vertexAttrib4fv(H.location,o1);break;default:l.vertexAttrib1fv(H.location,o1)}}}}T()}function F(){O();for(const _ in n){const S=n[_];for(const V in S){const z=S[V];for(const Y in z)c(z[Y].object),delete z[Y];delete S[V]}delete n[_]}}function R(_){if(n[_.id]===void 0)return;const S=n[_.id];for(const V in S){const z=S[V];for(const Y in z)c(z[Y].object),delete z[Y];delete S[V]}delete n[_.id]}function b(_){for(const S in n){const V=n[S];if(V[_.id]===void 0)continue;const z=V[_.id];for(const Y in z)c(z[Y].object),delete z[Y];delete V[_.id]}}function O(){t1(),s=!0,r!==i&&(r=i,u(r.object))}function t1(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:O,resetDefaultState:t1,dispose:F,releaseStatesOfGeometry:R,releaseStatesOfProgram:b,initAttributes:M,enableAttribute:d,disableUnusedAttributes:T}}function Ln(l,t,e){let n;function i(u){n=u}function r(u,c){l.drawArrays(n,u,c),e.update(c,n,1)}function s(u,c,f){f!==0&&(l.drawArraysInstanced(n,u,c,f),e.update(c,n,f))}function a(u,c,f){if(f===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,u,0,c,0,f);let m=0;for(let v=0;v<f;v++)m+=c[v];e.update(m,n,1)}function o(u,c,f,p){if(f===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let v=0;v<u.length;v++)s(u[v],c[v],p[v]);else{m.multiDrawArraysInstancedWEBGL(n,u,0,c,0,p,0,f);let v=0;for(let M=0;M<f;M++)v+=c[M];for(let M=0;M<p.length;M++)e.update(v,n,p[M])}}this.setMode=i,this.render=r,this.renderInstances=s,this.renderMultiDraw=a,this.renderMultiDrawInstances=o}function Dn(l,t,e,n){let i;function r(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const b=t.get("EXT_texture_filter_anisotropic");i=l.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function s(b){return!(b!==z2&&n.convert(b)!==l.getParameter(l.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(b){const O=b===C3&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(b!==n0&&n.convert(b)!==l.getParameter(l.IMPLEMENTATION_COLOR_READ_TYPE)&&b!==t0&&!O)}function o(b){if(b==="highp"){if(l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.HIGH_FLOAT).precision>0&&l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.HIGH_FLOAT).precision>0)return"highp";b="mediump"}return b==="mediump"&&l.getShaderPrecisionFormat(l.VERTEX_SHADER,l.MEDIUM_FLOAT).precision>0&&l.getShaderPrecisionFormat(l.FRAGMENT_SHADER,l.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let u=e.precision!==void 0?e.precision:"highp";const c=o(u);c!==u&&(console.warn("THREE.WebGLRenderer:",u,"not supported, using",c,"instead."),u=c);const f=e.logarithmicDepthBuffer===!0,p=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control");if(p===!0){const b=t.get("EXT_clip_control");b.clipControlEXT(b.LOWER_LEFT_EXT,b.ZERO_TO_ONE_EXT)}const m=l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS),v=l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS),M=l.getParameter(l.MAX_TEXTURE_SIZE),d=l.getParameter(l.MAX_CUBE_MAP_TEXTURE_SIZE),h=l.getParameter(l.MAX_VERTEX_ATTRIBS),T=l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),E=l.getParameter(l.MAX_VARYING_VECTORS),A=l.getParameter(l.MAX_FRAGMENT_UNIFORM_VECTORS),F=v>0,R=l.getParameter(l.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:o,textureFormatReadable:s,textureTypeReadable:a,precision:u,logarithmicDepthBuffer:f,reverseDepthBuffer:p,maxTextures:m,maxVertexTextures:v,maxTextureSize:M,maxCubemapSize:d,maxAttributes:h,maxVertexUniforms:T,maxVaryings:E,maxFragmentUniforms:A,vertexTextures:F,maxSamples:R}}function Un(l){const t=this;let e=null,n=0,i=!1,r=!1;const s=new h0,a=new L1,o={value:null,needsUpdate:!1};this.uniform=o,this.numPlanes=0,this.numIntersection=0,this.init=function(f,p){const m=f.length!==0||p||n!==0||i;return i=p,n=f.length,m},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(f,p){e=c(f,p,0)},this.setState=function(f,p,m){const v=f.clippingPlanes,M=f.clipIntersection,d=f.clipShadows,h=l.get(f);if(!i||v===null||v.length===0||r&&!d)r?c(null):u();else{const T=r?0:n,E=T*4;let A=h.clippingState||null;o.value=A,A=c(v,p,E,m);for(let F=0;F!==E;++F)A[F]=e[F];h.clippingState=A,this.numIntersection=M?this.numPlanes:0,this.numPlanes+=T}};function u(){o.value!==e&&(o.value=e,o.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function c(f,p,m,v){const M=f!==null?f.length:0;let d=null;if(M!==0){if(d=o.value,v!==!0||d===null){const h=m+M*4,T=p.matrixWorldInverse;a.getNormalMatrix(T),(d===null||d.length<h)&&(d=new Float32Array(h));for(let E=0,A=m;E!==M;++E,A+=4)s.copy(f[E]).applyMatrix4(T,a),s.normal.toArray(d,A),d[A+3]=s.constant}o.value=d,o.needsUpdate=!0}return t.numPlanes=M,t.numIntersection=0,d}}function In(l){let t=new WeakMap;function e(s,a){return a===v4?s.mapping=r3:a===x4&&(s.mapping=s3),s}function n(s){if(s&&s.isTexture){const a=s.mapping;if(a===v4||a===x4)if(t.has(s)){const o=t.get(s).texture;return e(o,s.mapping)}else{const o=s.image;if(o&&o.height>0){const u=new W7(o.height);return u.fromEquirectangularTexture(l,s),t.set(s,u),s.addEventListener("dispose",i),e(u.texture,s.mapping)}else return null}}return s}function i(s){const a=s.target;a.removeEventListener("dispose",i);const o=t.get(a);o!==void 0&&(t.delete(a),o.dispose())}function r(){t=new WeakMap}return{get:n,dispose:r}}class Nn extends j5{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,s){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,a=i+e,o=i-e;if(this.view!==null&&this.view.enabled){const u=(this.right-this.left)/this.view.fullWidth/this.zoom,c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=u*this.view.offsetX,s=r+u*this.view.width,a-=c*this.view.offsetY,o=a-c*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}const Q0=4,q8=[.125,.215,.35,.446,.526,.582],w0=20,J9=new Nn,K8=new W1;let Q9=null,t4=0,e4=0,n4=!1;const A0=(1+Math.sqrt(5))/2,Z0=1/A0,j8=[new L(-A0,Z0,0),new L(A0,Z0,0),new L(-Z0,0,A0),new L(Z0,0,A0),new L(0,A0,-Z0),new L(0,A0,Z0),new L(-1,1,-1),new L(1,1,-1),new L(-1,1,1),new L(1,1,1)];class Z8{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Q9=this._renderer.getRenderTarget(),t4=this._renderer.getActiveCubeFace(),e4=this._renderer.getActiveMipmapLevel(),n4=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Q8(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=J8(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Q9,t4,e4),this._renderer.xr.enabled=n4,t.scissorTest=!1,t9(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===r3||t.mapping===s3?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Q9=this._renderer.getRenderTarget(),t4=this._renderer.getActiveCubeFace(),e4=this._renderer.getActiveMipmapLevel(),n4=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:O2,minFilter:O2,generateMipmaps:!1,type:C3,format:z2,colorSpace:g0,depthBuffer:!1},i=$8(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=$8(t,e,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Fn(r)),this._blurMaterial=On(r,t,e)}return i}_compileMaterial(t){const e=new E2(this._lodPlanes[0],t);this._renderer.compile(e,J9)}_sceneToCubeUV(t,e,n,i){const a=new C2(90,1,e,n),o=[1,-1,1,1,1,1],u=[1,1,1,-1,-1,-1],c=this._renderer,f=c.autoClear,p=c.toneMapping;c.getClearColor(K8),c.toneMapping=p0,c.autoClear=!1;const m=new P0({name:"PMREM.Background",side:y2,depthWrite:!1,depthTest:!1}),v=new E2(new D3,m);let M=!1;const d=t.background;d?d.isColor&&(m.color.copy(d),t.background=null,M=!0):(m.color.copy(K8),M=!0);for(let h=0;h<6;h++){const T=h%3;T===0?(a.up.set(0,o[h],0),a.lookAt(u[h],0,0)):T===1?(a.up.set(0,0,o[h]),a.lookAt(0,u[h],0)):(a.up.set(0,o[h],0),a.lookAt(0,0,u[h]));const E=this._cubeSize;t9(i,T*E,h>2?E:0,E,E),c.setRenderTarget(i),M&&c.render(v,a),c.render(t,a)}v.geometry.dispose(),v.material.dispose(),c.toneMapping=p,c.autoClear=f,t.background=d}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===r3||t.mapping===s3;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=Q8()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=J8());const r=i?this._cubemapMaterial:this._equirectMaterial,s=new E2(this._lodPlanes[0],r),a=r.uniforms;a.envMap.value=t;const o=this._cubeSize;t9(e,0,0,3*o,2*o),n.setRenderTarget(e),n.render(s,J9)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let r=1;r<i;r++){const s=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),a=j8[(i-r-1)%j8.length];this._blur(t,r-1,r,s,a)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r),this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer,u=this._blurMaterial;s!=="latitudinal"&&s!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const c=3,f=new E2(this._lodPlanes[i],u),p=u.uniforms,m=this._sizeLods[n]-1,v=isFinite(r)?Math.PI/(2*m):2*Math.PI/(2*w0-1),M=r/v,d=isFinite(r)?1+Math.floor(c*M):w0;d>w0&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${d} samples when the maximum is set to ${w0}`);const h=[];let T=0;for(let b=0;b<w0;++b){const O=b/M,t1=Math.exp(-O*O/2);h.push(t1),b===0?T+=t1:b<d&&(T+=2*t1)}for(let b=0;b<h.length;b++)h[b]=h[b]/T;p.envMap.value=t.texture,p.samples.value=d,p.weights.value=h,p.latitudinal.value=s==="latitudinal",a&&(p.poleAxis.value=a);const{_lodMax:E}=this;p.dTheta.value=v,p.mipInt.value=E-n;const A=this._sizeLods[i],F=3*A*(i>E-Q0?i-E+Q0:0),R=4*(this._cubeSize-A);t9(e,F,R,3*A,2*A),o.setRenderTarget(e),o.render(f,J9)}}function Fn(l){const t=[],e=[],n=[];let i=l;const r=l-Q0+1+q8.length;for(let s=0;s<r;s++){const a=Math.pow(2,i);e.push(a);let o=1/a;s>l-Q0?o=q8[s-l+Q0-1]:s===0&&(o=0),n.push(o);const u=1/(a-2),c=-u,f=1+u,p=[c,c,f,c,f,f,c,c,f,f,c,f],m=6,v=6,M=3,d=2,h=1,T=new Float32Array(M*v*m),E=new Float32Array(d*v*m),A=new Float32Array(h*v*m);for(let R=0;R<m;R++){const b=R%3*2/3-1,O=R>2?0:-1,t1=[b,O,0,b+2/3,O,0,b+2/3,O+1,0,b,O,0,b+2/3,O+1,0,b,O+1,0];T.set(t1,M*v*R),E.set(p,d*v*R);const _=[R,R,R,R,R,R];A.set(_,h*v*R)}const F=new G2;F.setAttribute("position",new X2(T,M)),F.setAttribute("uv",new X2(E,d)),F.setAttribute("faceIndex",new X2(A,h)),t.push(F),i>Q0&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function $8(l,t,e){const n=new U0(l,t,e);return n.texture.mapping=v9,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function t9(l,t,e,n,i){l.viewport.set(t,e,n,i),l.scissor.set(t,e,n,i)}function On(l,t,e){const n=new Float32Array(w0),i=new L(0,1,0);return new _0({name:"SphericalGaussianBlur",defines:{n:w0,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${l}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:u8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:f0,depthTest:!1,depthWrite:!1})}function J8(){return new _0({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:u8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:f0,depthTest:!1,depthWrite:!1})}function Q8(){return new _0({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:u8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:f0,depthTest:!1,depthWrite:!1})}function u8(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Bn(l){let t=new WeakMap,e=null;function n(a){if(a&&a.isTexture){const o=a.mapping,u=o===v4||o===x4,c=o===r3||o===s3;if(u||c){let f=t.get(a);const p=f!==void 0?f.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==p)return e===null&&(e=new Z8(l)),f=u?e.fromEquirectangular(a,f):e.fromCubemap(a,f),f.texture.pmremVersion=a.pmremVersion,t.set(a,f),f.texture;if(f!==void 0)return f.texture;{const m=a.image;return u&&m&&m.height>0||c&&m&&i(m)?(e===null&&(e=new Z8(l)),f=u?e.fromEquirectangular(a):e.fromCubemap(a),f.texture.pmremVersion=a.pmremVersion,t.set(a,f),a.addEventListener("dispose",r),f.texture):null}}}return a}function i(a){let o=0;const u=6;for(let c=0;c<u;c++)a[c]!==void 0&&o++;return o===u}function r(a){const o=a.target;o.removeEventListener("dispose",r);const u=t.get(o);u!==void 0&&(t.delete(o),u.dispose())}function s(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:s}}function zn(l){const t={};function e(n){if(t[n]!==void 0)return t[n];let i;switch(n){case"WEBGL_depth_texture":i=l.getExtension("WEBGL_depth_texture")||l.getExtension("MOZ_WEBGL_depth_texture")||l.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=l.getExtension("EXT_texture_filter_anisotropic")||l.getExtension("MOZ_EXT_texture_filter_anisotropic")||l.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=l.getExtension("WEBGL_compressed_texture_s3tc")||l.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=l.getExtension("WEBGL_compressed_texture_pvrtc")||l.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=l.getExtension(n)}return t[n]=i,i}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const i=e(n);return i===null&&c9("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Hn(l,t,e,n){const i={},r=new WeakMap;function s(f){const p=f.target;p.index!==null&&t.remove(p.index);for(const v in p.attributes)t.remove(p.attributes[v]);for(const v in p.morphAttributes){const M=p.morphAttributes[v];for(let d=0,h=M.length;d<h;d++)t.remove(M[d])}p.removeEventListener("dispose",s),delete i[p.id];const m=r.get(p);m&&(t.remove(m),r.delete(p)),n.releaseStatesOfGeometry(p),p.isInstancedBufferGeometry===!0&&delete p._maxInstanceCount,e.memory.geometries--}function a(f,p){return i[p.id]===!0||(p.addEventListener("dispose",s),i[p.id]=!0,e.memory.geometries++),p}function o(f){const p=f.attributes;for(const v in p)t.update(p[v],l.ARRAY_BUFFER);const m=f.morphAttributes;for(const v in m){const M=m[v];for(let d=0,h=M.length;d<h;d++)t.update(M[d],l.ARRAY_BUFFER)}}function u(f){const p=[],m=f.index,v=f.attributes.position;let M=0;if(m!==null){const T=m.array;M=m.version;for(let E=0,A=T.length;E<A;E+=3){const F=T[E+0],R=T[E+1],b=T[E+2];p.push(F,R,R,b,b,F)}}else if(v!==void 0){const T=v.array;M=v.version;for(let E=0,A=T.length/3-1;E<A;E+=3){const F=E+0,R=E+1,b=E+2;p.push(F,R,R,b,b,F)}}else return;const d=new(V5(p)?q5:Y5)(p,1);d.version=M;const h=r.get(f);h&&t.remove(h),r.set(f,d)}function c(f){const p=r.get(f);if(p){const m=f.index;m!==null&&p.version<m.version&&u(f)}else u(f);return r.get(f)}return{get:a,update:o,getWireframeAttribute:c}}function Gn(l,t,e){let n;function i(p){n=p}let r,s;function a(p){r=p.type,s=p.bytesPerElement}function o(p,m){l.drawElements(n,m,r,p*s),e.update(m,n,1)}function u(p,m,v){v!==0&&(l.drawElementsInstanced(n,m,r,p*s,v),e.update(m,n,v))}function c(p,m,v){if(v===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,m,0,r,p,0,v);let d=0;for(let h=0;h<v;h++)d+=m[h];e.update(d,n,1)}function f(p,m,v,M){if(v===0)return;const d=t.get("WEBGL_multi_draw");if(d===null)for(let h=0;h<p.length;h++)u(p[h]/s,m[h],M[h]);else{d.multiDrawElementsInstancedWEBGL(n,m,0,r,p,0,M,0,v);let h=0;for(let T=0;T<v;T++)h+=m[T];for(let T=0;T<M.length;T++)e.update(h,n,M[T])}}this.setMode=i,this.setIndex=a,this.render=o,this.renderInstances=u,this.renderMultiDraw=c,this.renderMultiDrawInstances=f}function Vn(l){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,s,a){switch(e.calls++,s){case l.TRIANGLES:e.triangles+=a*(r/3);break;case l.LINES:e.lines+=a*(r/2);break;case l.LINE_STRIP:e.lines+=a*(r-1);break;case l.LINE_LOOP:e.lines+=a*r;break;case l.POINTS:e.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function i(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:i,update:n}}function kn(l,t,e){const n=new WeakMap,i=new j1;function r(s,a,o){const u=s.morphTargetInfluences,c=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,f=c!==void 0?c.length:0;let p=n.get(a);if(p===void 0||p.count!==f){let _=function(){O.dispose(),n.delete(a),a.removeEventListener("dispose",_)};var m=_;p!==void 0&&p.texture.dispose();const v=a.morphAttributes.position!==void 0,M=a.morphAttributes.normal!==void 0,d=a.morphAttributes.color!==void 0,h=a.morphAttributes.position||[],T=a.morphAttributes.normal||[],E=a.morphAttributes.color||[];let A=0;v===!0&&(A=1),M===!0&&(A=2),d===!0&&(A=3);let F=a.attributes.position.count*A,R=1;F>t.maxTextureSize&&(R=Math.ceil(F/t.maxTextureSize),F=t.maxTextureSize);const b=new Float32Array(F*R*4*f),O=new W5(b,F,R,f);O.type=t0,O.needsUpdate=!0;const t1=A*4;for(let S=0;S<f;S++){const V=h[S],z=T[S],Y=E[S],j=F*R*4*S;for(let G=0;G<V.count;G++){const K=G*t1;v===!0&&(i.fromBufferAttribute(V,G),b[j+K+0]=i.x,b[j+K+1]=i.y,b[j+K+2]=i.z,b[j+K+3]=0),M===!0&&(i.fromBufferAttribute(z,G),b[j+K+4]=i.x,b[j+K+5]=i.y,b[j+K+6]=i.z,b[j+K+7]=0),d===!0&&(i.fromBufferAttribute(Y,G),b[j+K+8]=i.x,b[j+K+9]=i.y,b[j+K+10]=i.z,b[j+K+11]=Y.itemSize===4?i.w:1)}}p={count:f,texture:O,size:new w1(F,R)},n.set(a,p),a.addEventListener("dispose",_)}if(s.isInstancedMesh===!0&&s.morphTexture!==null)o.getUniforms().setValue(l,"morphTexture",s.morphTexture,e);else{let v=0;for(let d=0;d<u.length;d++)v+=u[d];const M=a.morphTargetsRelative?1:1-v;o.getUniforms().setValue(l,"morphTargetBaseInfluence",M),o.getUniforms().setValue(l,"morphTargetInfluences",u)}o.getUniforms().setValue(l,"morphTargetsTexture",p.texture,e),o.getUniforms().setValue(l,"morphTargetsTextureSize",p.size)}return{update:r}}function Wn(l,t,e,n){let i=new WeakMap;function r(o){const u=n.render.frame,c=o.geometry,f=t.get(o,c);if(i.get(f)!==u&&(t.update(f),i.set(f,u)),o.isInstancedMesh&&(o.hasEventListener("dispose",a)===!1&&o.addEventListener("dispose",a),i.get(o)!==u&&(e.update(o.instanceMatrix,l.ARRAY_BUFFER),o.instanceColor!==null&&e.update(o.instanceColor,l.ARRAY_BUFFER),i.set(o,u))),o.isSkinnedMesh){const p=o.skeleton;i.get(p)!==u&&(p.update(),i.set(p,u))}return f}function s(){i=new WeakMap}function a(o){const u=o.target;u.removeEventListener("dispose",a),e.remove(u.instanceMatrix),u.instanceColor!==null&&e.remove(u.instanceColor)}return{update:r,dispose:s}}class J5 extends m2{constructor(t,e,n,i,r,s,a,o,u,c=n3){if(c!==n3&&c!==o3)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&c===n3&&(n=D0),n===void 0&&c===o3&&(n=a3),super(null,i,r,s,a,o,c,n,u),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:D2,this.minFilter=o!==void 0?o:D2,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}const Q5=new m2,t5=new J5(1,1),t6=new W5,e6=new R7,n6=new Z5,e5=[],n5=[],l5=new Float32Array(16),i5=new Float32Array(9),r5=new Float32Array(4);function d3(l,t,e){const n=l[0];if(n<=0||n>0)return l;const i=t*e;let r=e5[i];if(r===void 0&&(r=new Float32Array(i),e5[i]=r),t!==0){n.toArray(r,0);for(let s=1,a=0;s!==t;++s)a+=e,l[s].toArray(r,a)}return r}function s2(l,t){if(l.length!==t.length)return!1;for(let e=0,n=l.length;e<n;e++)if(l[e]!==t[e])return!1;return!0}function a2(l,t){for(let e=0,n=t.length;e<n;e++)l[e]=t[e]}function y9(l,t){let e=n5[t];e===void 0&&(e=new Int32Array(t),n5[t]=e);for(let n=0;n!==t;++n)e[n]=l.allocateTextureUnit();return e}function Xn(l,t){const e=this.cache;e[0]!==t&&(l.uniform1f(this.addr,t),e[0]=t)}function Yn(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(l.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(s2(e,t))return;l.uniform2fv(this.addr,t),a2(e,t)}}function qn(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(l.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(l.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(s2(e,t))return;l.uniform3fv(this.addr,t),a2(e,t)}}function Kn(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(l.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(s2(e,t))return;l.uniform4fv(this.addr,t),a2(e,t)}}function jn(l,t){const e=this.cache,n=t.elements;if(n===void 0){if(s2(e,t))return;l.uniformMatrix2fv(this.addr,!1,t),a2(e,t)}else{if(s2(e,n))return;r5.set(n),l.uniformMatrix2fv(this.addr,!1,r5),a2(e,n)}}function Zn(l,t){const e=this.cache,n=t.elements;if(n===void 0){if(s2(e,t))return;l.uniformMatrix3fv(this.addr,!1,t),a2(e,t)}else{if(s2(e,n))return;i5.set(n),l.uniformMatrix3fv(this.addr,!1,i5),a2(e,n)}}function $n(l,t){const e=this.cache,n=t.elements;if(n===void 0){if(s2(e,t))return;l.uniformMatrix4fv(this.addr,!1,t),a2(e,t)}else{if(s2(e,n))return;l5.set(n),l.uniformMatrix4fv(this.addr,!1,l5),a2(e,n)}}function Jn(l,t){const e=this.cache;e[0]!==t&&(l.uniform1i(this.addr,t),e[0]=t)}function Qn(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(l.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(s2(e,t))return;l.uniform2iv(this.addr,t),a2(e,t)}}function tl(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(l.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(s2(e,t))return;l.uniform3iv(this.addr,t),a2(e,t)}}function el(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(l.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(s2(e,t))return;l.uniform4iv(this.addr,t),a2(e,t)}}function nl(l,t){const e=this.cache;e[0]!==t&&(l.uniform1ui(this.addr,t),e[0]=t)}function ll(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(l.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(s2(e,t))return;l.uniform2uiv(this.addr,t),a2(e,t)}}function il(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(l.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(s2(e,t))return;l.uniform3uiv(this.addr,t),a2(e,t)}}function rl(l,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(l.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(s2(e,t))return;l.uniform4uiv(this.addr,t),a2(e,t)}}function sl(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i);let r;this.type===l.SAMPLER_2D_SHADOW?(t5.compareFunction=G5,r=t5):r=Q5,e.setTexture2D(t||r,i)}function al(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||e6,i)}function ol(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||n6,i)}function ul(l,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(l.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||t6,i)}function cl(l){switch(l){case 5126:return Xn;case 35664:return Yn;case 35665:return qn;case 35666:return Kn;case 35674:return jn;case 35675:return Zn;case 35676:return $n;case 5124:case 35670:return Jn;case 35667:case 35671:return Qn;case 35668:case 35672:return tl;case 35669:case 35673:return el;case 5125:return nl;case 36294:return ll;case 36295:return il;case 36296:return rl;case 35678:case 36198:case 36298:case 36306:case 35682:return sl;case 35679:case 36299:case 36307:return al;case 35680:case 36300:case 36308:case 36293:return ol;case 36289:case 36303:case 36311:case 36292:return ul}}function hl(l,t){l.uniform1fv(this.addr,t)}function dl(l,t){const e=d3(t,this.size,2);l.uniform2fv(this.addr,e)}function fl(l,t){const e=d3(t,this.size,3);l.uniform3fv(this.addr,e)}function pl(l,t){const e=d3(t,this.size,4);l.uniform4fv(this.addr,e)}function ml(l,t){const e=d3(t,this.size,4);l.uniformMatrix2fv(this.addr,!1,e)}function _l(l,t){const e=d3(t,this.size,9);l.uniformMatrix3fv(this.addr,!1,e)}function gl(l,t){const e=d3(t,this.size,16);l.uniformMatrix4fv(this.addr,!1,e)}function vl(l,t){l.uniform1iv(this.addr,t)}function xl(l,t){l.uniform2iv(this.addr,t)}function Ml(l,t){l.uniform3iv(this.addr,t)}function Sl(l,t){l.uniform4iv(this.addr,t)}function El(l,t){l.uniform1uiv(this.addr,t)}function yl(l,t){l.uniform2uiv(this.addr,t)}function Tl(l,t){l.uniform3uiv(this.addr,t)}function Al(l,t){l.uniform4uiv(this.addr,t)}function bl(l,t,e){const n=this.cache,i=t.length,r=y9(e,i);s2(n,r)||(l.uniform1iv(this.addr,r),a2(n,r));for(let s=0;s!==i;++s)e.setTexture2D(t[s]||Q5,r[s])}function wl(l,t,e){const n=this.cache,i=t.length,r=y9(e,i);s2(n,r)||(l.uniform1iv(this.addr,r),a2(n,r));for(let s=0;s!==i;++s)e.setTexture3D(t[s]||e6,r[s])}function Rl(l,t,e){const n=this.cache,i=t.length,r=y9(e,i);s2(n,r)||(l.uniform1iv(this.addr,r),a2(n,r));for(let s=0;s!==i;++s)e.setTextureCube(t[s]||n6,r[s])}function Cl(l,t,e){const n=this.cache,i=t.length,r=y9(e,i);s2(n,r)||(l.uniform1iv(this.addr,r),a2(n,r));for(let s=0;s!==i;++s)e.setTexture2DArray(t[s]||t6,r[s])}function Pl(l){switch(l){case 5126:return hl;case 35664:return dl;case 35665:return fl;case 35666:return pl;case 35674:return ml;case 35675:return _l;case 35676:return gl;case 5124:case 35670:return vl;case 35667:case 35671:return xl;case 35668:case 35672:return Ml;case 35669:case 35673:return Sl;case 5125:return El;case 36294:return yl;case 36295:return Tl;case 36296:return Al;case 35678:case 36198:case 36298:case 36306:case 35682:return bl;case 35679:case 36299:case 36307:return wl;case 35680:case 36300:case 36308:case 36293:return Rl;case 36289:case 36303:case 36311:case 36292:return Cl}}class Ll{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=cl(e.type)}}class Dl{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=Pl(e.type)}}class Ul{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const a=i[r];a.setValue(t,e[a.id],n)}}}const l4=/(\w+)(\])?(\[|\.)?/g;function s5(l,t){l.seq.push(t),l.map[t.id]=t}function Il(l,t,e){const n=l.name,i=n.length;for(l4.lastIndex=0;;){const r=l4.exec(n),s=l4.lastIndex;let a=r[1];const o=r[2]==="]",u=r[3];if(o&&(a=a|0),u===void 0||u==="["&&s+2===i){s5(e,u===void 0?new Ll(a,l,t):new Dl(a,l,t));break}else{let f=e.map[a];f===void 0&&(f=new Ul(a),s5(e,f)),e=f}}}class h9{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const r=t.getActiveUniform(e,i),s=t.getUniformLocation(e,r.name);Il(r,s,this)}}setValue(t,e,n,i){const r=this.map[e];r!==void 0&&r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];i!==void 0&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const a=e[r],o=n[a.id];o.needsUpdate!==!1&&a.setValue(t,o.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const s=t[i];s.id in e&&n.push(s)}return n}}function a5(l,t,e){const n=l.createShader(t);return l.shaderSource(n,e),l.compileShader(n),n}const Nl=37297;let Fl=0;function Ol(l,t){const e=l.split(`
`),n=[],i=Math.max(t-6,0),r=Math.min(t+6,e.length);for(let s=i;s<r;s++){const a=s+1;n.push(`${a===t?">":" "} ${a}: ${e[s]}`)}return n.join(`
`)}function Bl(l){const t=k1.getPrimaries(k1.workingColorSpace),e=k1.getPrimaries(l);let n;switch(t===e?n="":t===p9&&e===f9?n="LinearDisplayP3ToLinearSRGB":t===f9&&e===p9&&(n="LinearSRGBToLinearDisplayP3"),l){case g0:case x9:return[n,"LinearTransferOETF"];case V2:case r8:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",l),[n,"LinearTransferOETF"]}}function o5(l,t,e){const n=l.getShaderParameter(t,l.COMPILE_STATUS),i=l.getShaderInfoLog(t).trim();if(n&&i==="")return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const s=parseInt(r[1]);return e.toUpperCase()+`

`+i+`

`+Ol(l.getShaderSource(t),s)}else return i}function zl(l,t){const e=Bl(t);return`vec4 ${l}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`}function Hl(l,t){let e;switch(t){case O6:e="Linear";break;case B6:e="Reinhard";break;case z6:e="Cineon";break;case H6:e="ACESFilmic";break;case V6:e="AgX";break;case k6:e="Neutral";break;case G6:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+l+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const e9=new L;function Gl(){k1.getLuminanceCoefficients(e9);const l=e9.x.toFixed(4),t=e9.y.toFixed(4),e=e9.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${l}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function Vl(l){return[l.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",l.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(M3).join(`
`)}function kl(l){const t=[];for(const e in l){const n=l[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function Wl(l,t){const e={},n=l.getProgramParameter(t,l.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const r=l.getActiveAttrib(t,i),s=r.name;let a=1;r.type===l.FLOAT_MAT2&&(a=2),r.type===l.FLOAT_MAT3&&(a=3),r.type===l.FLOAT_MAT4&&(a=4),e[s]={type:r.type,location:l.getAttribLocation(t,s),locationSize:a}}return e}function M3(l){return l!==""}function u5(l,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return l.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function c5(l,t){return l.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Xl=/^[ \t]*#include +<([\w\d./]+)>/gm;function K4(l){return l.replace(Xl,ql)}const Yl=new Map;function ql(l,t){let e=P1[t];if(e===void 0){const n=Yl.get(t);if(n!==void 0)e=P1[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return K4(e)}const Kl=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function h5(l){return l.replace(Kl,jl)}function jl(l,t,e,n){let i="";for(let r=parseInt(t);r<parseInt(e);r++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return i}function d5(l){let t=`precision ${l.precision} float;
	precision ${l.precision} int;
	precision ${l.precision} sampler2D;
	precision ${l.precision} samplerCube;
	precision ${l.precision} sampler3D;
	precision ${l.precision} sampler2DArray;
	precision ${l.precision} sampler2DShadow;
	precision ${l.precision} samplerCubeShadow;
	precision ${l.precision} sampler2DArrayShadow;
	precision ${l.precision} isampler2D;
	precision ${l.precision} isampler3D;
	precision ${l.precision} isamplerCube;
	precision ${l.precision} isampler2DArray;
	precision ${l.precision} usampler2D;
	precision ${l.precision} usampler3D;
	precision ${l.precision} usamplerCube;
	precision ${l.precision} usampler2DArray;
	`;return l.precision==="highp"?t+=`
#define HIGH_PRECISION`:l.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:l.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function Zl(l){let t="SHADOWMAP_TYPE_BASIC";return l.shadowMapType===R5?t="SHADOWMAP_TYPE_PCF":l.shadowMapType===_6?t="SHADOWMAP_TYPE_PCF_SOFT":l.shadowMapType===Q2&&(t="SHADOWMAP_TYPE_VSM"),t}function $l(l){let t="ENVMAP_TYPE_CUBE";if(l.envMap)switch(l.envMapMode){case r3:case s3:t="ENVMAP_TYPE_CUBE";break;case v9:t="ENVMAP_TYPE_CUBE_UV";break}return t}function Jl(l){let t="ENVMAP_MODE_REFLECTION";if(l.envMap)switch(l.envMapMode){case s3:t="ENVMAP_MODE_REFRACTION";break}return t}function Ql(l){let t="ENVMAP_BLENDING_NONE";if(l.envMap)switch(l.combine){case C5:t="ENVMAP_BLENDING_MULTIPLY";break;case N6:t="ENVMAP_BLENDING_MIX";break;case F6:t="ENVMAP_BLENDING_ADD";break}return t}function ti(l){const t=l.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function ei(l,t,e,n){const i=l.getContext(),r=e.defines;let s=e.vertexShader,a=e.fragmentShader;const o=Zl(e),u=$l(e),c=Jl(e),f=Ql(e),p=ti(e),m=Vl(e),v=kl(r),M=i.createProgram();let d,h,T=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(d=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(M3).join(`
`),d.length>0&&(d+=`
`),h=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(M3).join(`
`),h.length>0&&(h+=`
`)):(d=[d5(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+o:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(M3).join(`
`),h=[d5(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+u:"",e.envMap?"#define "+c:"",e.envMap?"#define "+f:"",p?"#define CUBEUV_TEXEL_WIDTH "+p.texelWidth:"",p?"#define CUBEUV_TEXEL_HEIGHT "+p.texelHeight:"",p?"#define CUBEUV_MAX_MIP "+p.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+o:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==p0?"#define TONE_MAPPING":"",e.toneMapping!==p0?P1.tonemapping_pars_fragment:"",e.toneMapping!==p0?Hl("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",P1.colorspace_pars_fragment,zl("linearToOutputTexel",e.outputColorSpace),Gl(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(M3).join(`
`)),s=K4(s),s=u5(s,e),s=c5(s,e),a=K4(a),a=u5(a,e),a=c5(a,e),s=h5(s),a=h5(a),e.isRawShaderMaterial!==!0&&(T=`#version 300 es
`,d=[m,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+d,h=["#define varying in",e.glslVersion===R8?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===R8?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+h);const E=T+d+s,A=T+h+a,F=a5(i,i.VERTEX_SHADER,E),R=a5(i,i.FRAGMENT_SHADER,A);i.attachShader(M,F),i.attachShader(M,R),e.index0AttributeName!==void 0?i.bindAttribLocation(M,0,e.index0AttributeName):e.morphTargets===!0&&i.bindAttribLocation(M,0,"position"),i.linkProgram(M);function b(S){if(l.debug.checkShaderErrors){const V=i.getProgramInfoLog(M).trim(),z=i.getShaderInfoLog(F).trim(),Y=i.getShaderInfoLog(R).trim();let j=!0,G=!0;if(i.getProgramParameter(M,i.LINK_STATUS)===!1)if(j=!1,typeof l.debug.onShaderError=="function")l.debug.onShaderError(i,M,F,R);else{const K=o5(i,F,"vertex"),H=o5(i,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(M,i.VALIDATE_STATUS)+`

Material Name: `+S.name+`
Material Type: `+S.type+`

Program Info Log: `+V+`
`+K+`
`+H)}else V!==""?console.warn("THREE.WebGLProgram: Program Info Log:",V):(z===""||Y==="")&&(G=!1);G&&(S.diagnostics={runnable:j,programLog:V,vertexShader:{log:z,prefix:d},fragmentShader:{log:Y,prefix:h}})}i.deleteShader(F),i.deleteShader(R),O=new h9(i,M),t1=Wl(i,M)}let O;this.getUniforms=function(){return O===void 0&&b(this),O};let t1;this.getAttributes=function(){return t1===void 0&&b(this),t1};let _=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return _===!1&&(_=i.getProgramParameter(M,Nl)),_},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(M),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=Fl++,this.cacheKey=t,this.usedTimes=1,this.program=M,this.vertexShader=F,this.fragmentShader=R,this}let ni=0;class li{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(t);return s.has(i)===!1&&(s.add(i),i.usedTimes++),s.has(r)===!1&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new ii(t),e.set(t,n)),n}}class ii{constructor(t){this.id=ni++,this.code=t,this.usedTimes=0}}function ri(l,t,e,n,i,r,s){const a=new a8,o=new li,u=new Set,c=[],f=i.logarithmicDepthBuffer,p=i.reverseDepthBuffer,m=i.vertexTextures;let v=i.precision;const M={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function d(_){return u.add(_),_===0?"uv":`uv${_}`}function h(_,S,V,z,Y){const j=z.fog,G=Y.geometry,K=_.isMeshStandardMaterial?z.environment:null,H=(_.isMeshStandardMaterial?e:t).get(_.envMap||K),a1=H&&H.mapping===v9?H.image.height:null,o1=M[_.type];_.precision!==null&&(v=i.getMaxPrecision(_.precision),v!==_.precision&&console.warn("THREE.WebGLProgram.getParameters:",_.precision,"not supported, using",v,"instead."));const _1=G.morphAttributes.position||G.morphAttributes.normal||G.morphAttributes.color,z1=_1!==void 0?_1.length:0;let X1=0;G.morphAttributes.position!==void 0&&(X1=1),G.morphAttributes.normal!==void 0&&(X1=2),G.morphAttributes.color!==void 0&&(X1=3);let k,$,p1,u1;if(o1){const x2=k2[o1];k=x2.vertexShader,$=x2.fragmentShader}else k=_.vertexShader,$=_.fragmentShader,o.update(_),p1=o.getVertexShaderID(_),u1=o.getFragmentShaderID(_);const R1=l.getRenderTarget(),S1=Y.isInstancedMesh===!0,I1=Y.isBatchedMesh===!0,q1=!!_.map,N1=!!_.matcap,w=!!H,T2=!!_.aoMap,D1=!!_.lightMap,O1=!!_.bumpMap,y1=!!_.normalMap,$1=!!_.displacementMap,b1=!!_.emissiveMap,y=!!_.metalnessMap,g=!!_.roughnessMap,U=_.anisotropy>0,X=_.clearcoat>0,Z=_.dispersion>0,W=_.iridescence>0,g1=_.sheen>0,n1=_.transmission>0,c1=U&&!!_.anisotropyMap,B1=X&&!!_.clearcoatMap,J=X&&!!_.clearcoatNormalMap,h1=X&&!!_.clearcoatRoughnessMap,T1=W&&!!_.iridescenceMap,A1=W&&!!_.iridescenceThicknessMap,d1=g1&&!!_.sheenColorMap,U1=g1&&!!_.sheenRoughnessMap,C1=!!_.specularMap,Z1=!!_.specularColorMap,C=!!_.specularIntensityMap,r1=n1&&!!_.transmissionMap,B=n1&&!!_.thicknessMap,q=!!_.gradientMap,l1=!!_.alphaMap,s1=_.alphaTest>0,F1=!!_.alphaHash,l2=!!_.extensions;let v2=p0;_.toneMapped&&(R1===null||R1.isXRRenderTarget===!0)&&(v2=l.toneMapping);const H1={shaderID:o1,shaderType:_.type,shaderName:_.name,vertexShader:k,fragmentShader:$,defines:_.defines,customVertexShaderID:p1,customFragmentShaderID:u1,isRawShaderMaterial:_.isRawShaderMaterial===!0,glslVersion:_.glslVersion,precision:v,batching:I1,batchingColor:I1&&Y._colorsTexture!==null,instancing:S1,instancingColor:S1&&Y.instanceColor!==null,instancingMorph:S1&&Y.morphTexture!==null,supportsVertexTextures:m,outputColorSpace:R1===null?l.outputColorSpace:R1.isXRRenderTarget===!0?R1.texture.colorSpace:g0,alphaToCoverage:!!_.alphaToCoverage,map:q1,matcap:N1,envMap:w,envMapMode:w&&H.mapping,envMapCubeUVHeight:a1,aoMap:T2,lightMap:D1,bumpMap:O1,normalMap:y1,displacementMap:m&&$1,emissiveMap:b1,normalMapObjectSpace:y1&&_.normalMapType===K6,normalMapTangentSpace:y1&&_.normalMapType===q6,metalnessMap:y,roughnessMap:g,anisotropy:U,anisotropyMap:c1,clearcoat:X,clearcoatMap:B1,clearcoatNormalMap:J,clearcoatRoughnessMap:h1,dispersion:Z,iridescence:W,iridescenceMap:T1,iridescenceThicknessMap:A1,sheen:g1,sheenColorMap:d1,sheenRoughnessMap:U1,specularMap:C1,specularColorMap:Z1,specularIntensityMap:C,transmission:n1,transmissionMap:r1,thicknessMap:B,gradientMap:q,opaque:_.transparent===!1&&_.blending===e3&&_.alphaToCoverage===!1,alphaMap:l1,alphaTest:s1,alphaHash:F1,combine:_.combine,mapUv:q1&&d(_.map.channel),aoMapUv:T2&&d(_.aoMap.channel),lightMapUv:D1&&d(_.lightMap.channel),bumpMapUv:O1&&d(_.bumpMap.channel),normalMapUv:y1&&d(_.normalMap.channel),displacementMapUv:$1&&d(_.displacementMap.channel),emissiveMapUv:b1&&d(_.emissiveMap.channel),metalnessMapUv:y&&d(_.metalnessMap.channel),roughnessMapUv:g&&d(_.roughnessMap.channel),anisotropyMapUv:c1&&d(_.anisotropyMap.channel),clearcoatMapUv:B1&&d(_.clearcoatMap.channel),clearcoatNormalMapUv:J&&d(_.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:h1&&d(_.clearcoatRoughnessMap.channel),iridescenceMapUv:T1&&d(_.iridescenceMap.channel),iridescenceThicknessMapUv:A1&&d(_.iridescenceThicknessMap.channel),sheenColorMapUv:d1&&d(_.sheenColorMap.channel),sheenRoughnessMapUv:U1&&d(_.sheenRoughnessMap.channel),specularMapUv:C1&&d(_.specularMap.channel),specularColorMapUv:Z1&&d(_.specularColorMap.channel),specularIntensityMapUv:C&&d(_.specularIntensityMap.channel),transmissionMapUv:r1&&d(_.transmissionMap.channel),thicknessMapUv:B&&d(_.thicknessMap.channel),alphaMapUv:l1&&d(_.alphaMap.channel),vertexTangents:!!G.attributes.tangent&&(y1||U),vertexColors:_.vertexColors,vertexAlphas:_.vertexColors===!0&&!!G.attributes.color&&G.attributes.color.itemSize===4,pointsUvs:Y.isPoints===!0&&!!G.attributes.uv&&(q1||l1),fog:!!j,useFog:_.fog===!0,fogExp2:!!j&&j.isFogExp2,flatShading:_.flatShading===!0,sizeAttenuation:_.sizeAttenuation===!0,logarithmicDepthBuffer:f,reverseDepthBuffer:p,skinning:Y.isSkinnedMesh===!0,morphTargets:G.morphAttributes.position!==void 0,morphNormals:G.morphAttributes.normal!==void 0,morphColors:G.morphAttributes.color!==void 0,morphTargetsCount:z1,morphTextureStride:X1,numDirLights:S.directional.length,numPointLights:S.point.length,numSpotLights:S.spot.length,numSpotLightMaps:S.spotLightMap.length,numRectAreaLights:S.rectArea.length,numHemiLights:S.hemi.length,numDirLightShadows:S.directionalShadowMap.length,numPointLightShadows:S.pointShadowMap.length,numSpotLightShadows:S.spotShadowMap.length,numSpotLightShadowsWithMaps:S.numSpotLightShadowsWithMaps,numLightProbes:S.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:_.dithering,shadowMapEnabled:l.shadowMap.enabled&&V.length>0,shadowMapType:l.shadowMap.type,toneMapping:v2,decodeVideoTexture:q1&&_.map.isVideoTexture===!0&&k1.getTransfer(_.map.colorSpace)===Q1,premultipliedAlpha:_.premultipliedAlpha,doubleSided:_.side===W2,flipSided:_.side===y2,useDepthPacking:_.depthPacking>=0,depthPacking:_.depthPacking||0,index0AttributeName:_.index0AttributeName,extensionClipCullDistance:l2&&_.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(l2&&_.extensions.multiDraw===!0||I1)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:_.customProgramCacheKey()};return H1.vertexUv1s=u.has(1),H1.vertexUv2s=u.has(2),H1.vertexUv3s=u.has(3),u.clear(),H1}function T(_){const S=[];if(_.shaderID?S.push(_.shaderID):(S.push(_.customVertexShaderID),S.push(_.customFragmentShaderID)),_.defines!==void 0)for(const V in _.defines)S.push(V),S.push(_.defines[V]);return _.isRawShaderMaterial===!1&&(E(S,_),A(S,_),S.push(l.outputColorSpace)),S.push(_.customProgramCacheKey),S.join()}function E(_,S){_.push(S.precision),_.push(S.outputColorSpace),_.push(S.envMapMode),_.push(S.envMapCubeUVHeight),_.push(S.mapUv),_.push(S.alphaMapUv),_.push(S.lightMapUv),_.push(S.aoMapUv),_.push(S.bumpMapUv),_.push(S.normalMapUv),_.push(S.displacementMapUv),_.push(S.emissiveMapUv),_.push(S.metalnessMapUv),_.push(S.roughnessMapUv),_.push(S.anisotropyMapUv),_.push(S.clearcoatMapUv),_.push(S.clearcoatNormalMapUv),_.push(S.clearcoatRoughnessMapUv),_.push(S.iridescenceMapUv),_.push(S.iridescenceThicknessMapUv),_.push(S.sheenColorMapUv),_.push(S.sheenRoughnessMapUv),_.push(S.specularMapUv),_.push(S.specularColorMapUv),_.push(S.specularIntensityMapUv),_.push(S.transmissionMapUv),_.push(S.thicknessMapUv),_.push(S.combine),_.push(S.fogExp2),_.push(S.sizeAttenuation),_.push(S.morphTargetsCount),_.push(S.morphAttributeCount),_.push(S.numDirLights),_.push(S.numPointLights),_.push(S.numSpotLights),_.push(S.numSpotLightMaps),_.push(S.numHemiLights),_.push(S.numRectAreaLights),_.push(S.numDirLightShadows),_.push(S.numPointLightShadows),_.push(S.numSpotLightShadows),_.push(S.numSpotLightShadowsWithMaps),_.push(S.numLightProbes),_.push(S.shadowMapType),_.push(S.toneMapping),_.push(S.numClippingPlanes),_.push(S.numClipIntersection),_.push(S.depthPacking)}function A(_,S){a.disableAll(),S.supportsVertexTextures&&a.enable(0),S.instancing&&a.enable(1),S.instancingColor&&a.enable(2),S.instancingMorph&&a.enable(3),S.matcap&&a.enable(4),S.envMap&&a.enable(5),S.normalMapObjectSpace&&a.enable(6),S.normalMapTangentSpace&&a.enable(7),S.clearcoat&&a.enable(8),S.iridescence&&a.enable(9),S.alphaTest&&a.enable(10),S.vertexColors&&a.enable(11),S.vertexAlphas&&a.enable(12),S.vertexUv1s&&a.enable(13),S.vertexUv2s&&a.enable(14),S.vertexUv3s&&a.enable(15),S.vertexTangents&&a.enable(16),S.anisotropy&&a.enable(17),S.alphaHash&&a.enable(18),S.batching&&a.enable(19),S.dispersion&&a.enable(20),S.batchingColor&&a.enable(21),_.push(a.mask),a.disableAll(),S.fog&&a.enable(0),S.useFog&&a.enable(1),S.flatShading&&a.enable(2),S.logarithmicDepthBuffer&&a.enable(3),S.reverseDepthBuffer&&a.enable(4),S.skinning&&a.enable(5),S.morphTargets&&a.enable(6),S.morphNormals&&a.enable(7),S.morphColors&&a.enable(8),S.premultipliedAlpha&&a.enable(9),S.shadowMapEnabled&&a.enable(10),S.doubleSided&&a.enable(11),S.flipSided&&a.enable(12),S.useDepthPacking&&a.enable(13),S.dithering&&a.enable(14),S.transmission&&a.enable(15),S.sheen&&a.enable(16),S.opaque&&a.enable(17),S.pointsUvs&&a.enable(18),S.decodeVideoTexture&&a.enable(19),S.alphaToCoverage&&a.enable(20),_.push(a.mask)}function F(_){const S=M[_.type];let V;if(S){const z=k2[S];V=H7.clone(z.uniforms)}else V=_.uniforms;return V}function R(_,S){let V;for(let z=0,Y=c.length;z<Y;z++){const j=c[z];if(j.cacheKey===S){V=j,++V.usedTimes;break}}return V===void 0&&(V=new ei(l,S,_,r),c.push(V)),V}function b(_){if(--_.usedTimes===0){const S=c.indexOf(_);c[S]=c[c.length-1],c.pop(),_.destroy()}}function O(_){o.remove(_)}function t1(){o.dispose()}return{getParameters:h,getProgramCacheKey:T,getUniforms:F,acquireProgram:R,releaseProgram:b,releaseShaderCache:O,programs:c,dispose:t1}}function si(){let l=new WeakMap;function t(s){return l.has(s)}function e(s){let a=l.get(s);return a===void 0&&(a={},l.set(s,a)),a}function n(s){l.delete(s)}function i(s,a,o){l.get(s)[a]=o}function r(){l=new WeakMap}return{has:t,get:e,remove:n,update:i,dispose:r}}function ai(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.material.id!==t.material.id?l.material.id-t.material.id:l.z!==t.z?l.z-t.z:l.id-t.id}function f5(l,t){return l.groupOrder!==t.groupOrder?l.groupOrder-t.groupOrder:l.renderOrder!==t.renderOrder?l.renderOrder-t.renderOrder:l.z!==t.z?t.z-l.z:l.id-t.id}function p5(){const l=[];let t=0;const e=[],n=[],i=[];function r(){t=0,e.length=0,n.length=0,i.length=0}function s(f,p,m,v,M,d){let h=l[t];return h===void 0?(h={id:f.id,object:f,geometry:p,material:m,groupOrder:v,renderOrder:f.renderOrder,z:M,group:d},l[t]=h):(h.id=f.id,h.object=f,h.geometry=p,h.material=m,h.groupOrder=v,h.renderOrder=f.renderOrder,h.z=M,h.group=d),t++,h}function a(f,p,m,v,M,d){const h=s(f,p,m,v,M,d);m.transmission>0?n.push(h):m.transparent===!0?i.push(h):e.push(h)}function o(f,p,m,v,M,d){const h=s(f,p,m,v,M,d);m.transmission>0?n.unshift(h):m.transparent===!0?i.unshift(h):e.unshift(h)}function u(f,p){e.length>1&&e.sort(f||ai),n.length>1&&n.sort(p||f5),i.length>1&&i.sort(p||f5)}function c(){for(let f=t,p=l.length;f<p;f++){const m=l[f];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:e,transmissive:n,transparent:i,init:r,push:a,unshift:o,finish:c,sort:u}}function oi(){let l=new WeakMap;function t(n,i){const r=l.get(n);let s;return r===void 0?(s=new p5,l.set(n,[s])):i>=r.length?(s=new p5,r.push(s)):s=r[i],s}function e(){l=new WeakMap}return{get:t,dispose:e}}function ui(){const l={};return{get:function(t){if(l[t.id]!==void 0)return l[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new L,color:new W1};break;case"SpotLight":e={position:new L,direction:new L,color:new W1,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new L,color:new W1,distance:0,decay:0};break;case"HemisphereLight":e={direction:new L,skyColor:new W1,groundColor:new W1};break;case"RectAreaLight":e={color:new W1,position:new L,halfWidth:new L,halfHeight:new L};break}return l[t.id]=e,e}}}function ci(){const l={};return{get:function(t){if(l[t.id]!==void 0)return l[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w1};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w1};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new w1,shadowCameraNear:1,shadowCameraFar:1e3};break}return l[t.id]=e,e}}}let hi=0;function di(l,t){return(t.castShadow?2:0)-(l.castShadow?2:0)+(t.map?1:0)-(l.map?1:0)}function fi(l){const t=new ui,e=ci(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let u=0;u<9;u++)n.probe.push(new L);const i=new L,r=new t2,s=new t2;function a(u){let c=0,f=0,p=0;for(let t1=0;t1<9;t1++)n.probe[t1].set(0,0,0);let m=0,v=0,M=0,d=0,h=0,T=0,E=0,A=0,F=0,R=0,b=0;u.sort(di);for(let t1=0,_=u.length;t1<_;t1++){const S=u[t1],V=S.color,z=S.intensity,Y=S.distance,j=S.shadow&&S.shadow.map?S.shadow.map.texture:null;if(S.isAmbientLight)c+=V.r*z,f+=V.g*z,p+=V.b*z;else if(S.isLightProbe){for(let G=0;G<9;G++)n.probe[G].addScaledVector(S.sh.coefficients[G],z);b++}else if(S.isDirectionalLight){const G=t.get(S);if(G.color.copy(S.color).multiplyScalar(S.intensity),S.castShadow){const K=S.shadow,H=e.get(S);H.shadowIntensity=K.intensity,H.shadowBias=K.bias,H.shadowNormalBias=K.normalBias,H.shadowRadius=K.radius,H.shadowMapSize=K.mapSize,n.directionalShadow[m]=H,n.directionalShadowMap[m]=j,n.directionalShadowMatrix[m]=S.shadow.matrix,T++}n.directional[m]=G,m++}else if(S.isSpotLight){const G=t.get(S);G.position.setFromMatrixPosition(S.matrixWorld),G.color.copy(V).multiplyScalar(z),G.distance=Y,G.coneCos=Math.cos(S.angle),G.penumbraCos=Math.cos(S.angle*(1-S.penumbra)),G.decay=S.decay,n.spot[M]=G;const K=S.shadow;if(S.map&&(n.spotLightMap[F]=S.map,F++,K.updateMatrices(S),S.castShadow&&R++),n.spotLightMatrix[M]=K.matrix,S.castShadow){const H=e.get(S);H.shadowIntensity=K.intensity,H.shadowBias=K.bias,H.shadowNormalBias=K.normalBias,H.shadowRadius=K.radius,H.shadowMapSize=K.mapSize,n.spotShadow[M]=H,n.spotShadowMap[M]=j,A++}M++}else if(S.isRectAreaLight){const G=t.get(S);G.color.copy(V).multiplyScalar(z),G.halfWidth.set(S.width*.5,0,0),G.halfHeight.set(0,S.height*.5,0),n.rectArea[d]=G,d++}else if(S.isPointLight){const G=t.get(S);if(G.color.copy(S.color).multiplyScalar(S.intensity),G.distance=S.distance,G.decay=S.decay,S.castShadow){const K=S.shadow,H=e.get(S);H.shadowIntensity=K.intensity,H.shadowBias=K.bias,H.shadowNormalBias=K.normalBias,H.shadowRadius=K.radius,H.shadowMapSize=K.mapSize,H.shadowCameraNear=K.camera.near,H.shadowCameraFar=K.camera.far,n.pointShadow[v]=H,n.pointShadowMap[v]=j,n.pointShadowMatrix[v]=S.shadow.matrix,E++}n.point[v]=G,v++}else if(S.isHemisphereLight){const G=t.get(S);G.skyColor.copy(S.color).multiplyScalar(z),G.groundColor.copy(S.groundColor).multiplyScalar(z),n.hemi[h]=G,h++}}d>0&&(l.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=e1.LTC_FLOAT_1,n.rectAreaLTC2=e1.LTC_FLOAT_2):(n.rectAreaLTC1=e1.LTC_HALF_1,n.rectAreaLTC2=e1.LTC_HALF_2)),n.ambient[0]=c,n.ambient[1]=f,n.ambient[2]=p;const O=n.hash;(O.directionalLength!==m||O.pointLength!==v||O.spotLength!==M||O.rectAreaLength!==d||O.hemiLength!==h||O.numDirectionalShadows!==T||O.numPointShadows!==E||O.numSpotShadows!==A||O.numSpotMaps!==F||O.numLightProbes!==b)&&(n.directional.length=m,n.spot.length=M,n.rectArea.length=d,n.point.length=v,n.hemi.length=h,n.directionalShadow.length=T,n.directionalShadowMap.length=T,n.pointShadow.length=E,n.pointShadowMap.length=E,n.spotShadow.length=A,n.spotShadowMap.length=A,n.directionalShadowMatrix.length=T,n.pointShadowMatrix.length=E,n.spotLightMatrix.length=A+F-R,n.spotLightMap.length=F,n.numSpotLightShadowsWithMaps=R,n.numLightProbes=b,O.directionalLength=m,O.pointLength=v,O.spotLength=M,O.rectAreaLength=d,O.hemiLength=h,O.numDirectionalShadows=T,O.numPointShadows=E,O.numSpotShadows=A,O.numSpotMaps=F,O.numLightProbes=b,n.version=hi++)}function o(u,c){let f=0,p=0,m=0,v=0,M=0;const d=c.matrixWorldInverse;for(let h=0,T=u.length;h<T;h++){const E=u[h];if(E.isDirectionalLight){const A=n.directional[f];A.direction.setFromMatrixPosition(E.matrixWorld),i.setFromMatrixPosition(E.target.matrixWorld),A.direction.sub(i),A.direction.transformDirection(d),f++}else if(E.isSpotLight){const A=n.spot[m];A.position.setFromMatrixPosition(E.matrixWorld),A.position.applyMatrix4(d),A.direction.setFromMatrixPosition(E.matrixWorld),i.setFromMatrixPosition(E.target.matrixWorld),A.direction.sub(i),A.direction.transformDirection(d),m++}else if(E.isRectAreaLight){const A=n.rectArea[v];A.position.setFromMatrixPosition(E.matrixWorld),A.position.applyMatrix4(d),s.identity(),r.copy(E.matrixWorld),r.premultiply(d),s.extractRotation(r),A.halfWidth.set(E.width*.5,0,0),A.halfHeight.set(0,E.height*.5,0),A.halfWidth.applyMatrix4(s),A.halfHeight.applyMatrix4(s),v++}else if(E.isPointLight){const A=n.point[p];A.position.setFromMatrixPosition(E.matrixWorld),A.position.applyMatrix4(d),p++}else if(E.isHemisphereLight){const A=n.hemi[M];A.direction.setFromMatrixPosition(E.matrixWorld),A.direction.transformDirection(d),M++}}}return{setup:a,setupView:o,state:n}}function m5(l){const t=new fi(l),e=[],n=[];function i(c){u.camera=c,e.length=0,n.length=0}function r(c){e.push(c)}function s(c){n.push(c)}function a(){t.setup(e)}function o(c){t.setupView(e,c)}const u={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:i,state:u,setupLights:a,setupLightsView:o,pushLight:r,pushShadow:s}}function pi(l){let t=new WeakMap;function e(i,r=0){const s=t.get(i);let a;return s===void 0?(a=new m5(l),t.set(i,[a])):r>=s.length?(a=new m5(l),s.push(a)):a=s[r],a}function n(){t=new WeakMap}return{get:e,dispose:n}}class mi extends L3{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=X6,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class _i extends L3{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const gi=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,vi=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function xi(l,t,e){let n=new o8;const i=new w1,r=new w1,s=new j1,a=new mi({depthPacking:Y6}),o=new _i,u={},c=e.maxTextureSize,f={[m0]:y2,[y2]:m0,[W2]:W2},p=new _0({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new w1},radius:{value:4}},vertexShader:gi,fragmentShader:vi}),m=p.clone();m.defines.HORIZONTAL_PASS=1;const v=new G2;v.setAttribute("position",new X2(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const M=new E2(v,p),d=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=R5;let h=this.type;this.render=function(R,b,O){if(d.enabled===!1||d.autoUpdate===!1&&d.needsUpdate===!1||R.length===0)return;const t1=l.getRenderTarget(),_=l.getActiveCubeFace(),S=l.getActiveMipmapLevel(),V=l.state;V.setBlending(f0),V.buffers.color.setClear(1,1,1,1),V.buffers.depth.setTest(!0),V.setScissorTest(!1);const z=h!==Q2&&this.type===Q2,Y=h===Q2&&this.type!==Q2;for(let j=0,G=R.length;j<G;j++){const K=R[j],H=K.shadow;if(H===void 0){console.warn("THREE.WebGLShadowMap:",K,"has no shadow.");continue}if(H.autoUpdate===!1&&H.needsUpdate===!1)continue;i.copy(H.mapSize);const a1=H.getFrameExtents();if(i.multiply(a1),r.copy(H.mapSize),(i.x>c||i.y>c)&&(i.x>c&&(r.x=Math.floor(c/a1.x),i.x=r.x*a1.x,H.mapSize.x=r.x),i.y>c&&(r.y=Math.floor(c/a1.y),i.y=r.y*a1.y,H.mapSize.y=r.y)),H.map===null||z===!0||Y===!0){const _1=this.type!==Q2?{minFilter:D2,magFilter:D2}:{};H.map!==null&&H.map.dispose(),H.map=new U0(i.x,i.y,_1),H.map.texture.name=K.name+".shadowMap",H.camera.updateProjectionMatrix()}l.setRenderTarget(H.map),l.clear();const o1=H.getViewportCount();for(let _1=0;_1<o1;_1++){const z1=H.getViewport(_1);s.set(r.x*z1.x,r.y*z1.y,r.x*z1.z,r.y*z1.w),V.viewport(s),H.updateMatrices(K,_1),n=H.getFrustum(),A(b,O,H.camera,K,this.type)}H.isPointLightShadow!==!0&&this.type===Q2&&T(H,O),H.needsUpdate=!1}h=this.type,d.needsUpdate=!1,l.setRenderTarget(t1,_,S)};function T(R,b){const O=t.update(M);p.defines.VSM_SAMPLES!==R.blurSamples&&(p.defines.VSM_SAMPLES=R.blurSamples,m.defines.VSM_SAMPLES=R.blurSamples,p.needsUpdate=!0,m.needsUpdate=!0),R.mapPass===null&&(R.mapPass=new U0(i.x,i.y)),p.uniforms.shadow_pass.value=R.map.texture,p.uniforms.resolution.value=R.mapSize,p.uniforms.radius.value=R.radius,l.setRenderTarget(R.mapPass),l.clear(),l.renderBufferDirect(b,null,O,p,M,null),m.uniforms.shadow_pass.value=R.mapPass.texture,m.uniforms.resolution.value=R.mapSize,m.uniforms.radius.value=R.radius,l.setRenderTarget(R.map),l.clear(),l.renderBufferDirect(b,null,O,m,M,null)}function E(R,b,O,t1){let _=null;const S=O.isPointLight===!0?R.customDistanceMaterial:R.customDepthMaterial;if(S!==void 0)_=S;else if(_=O.isPointLight===!0?o:a,l.localClippingEnabled&&b.clipShadows===!0&&Array.isArray(b.clippingPlanes)&&b.clippingPlanes.length!==0||b.displacementMap&&b.displacementScale!==0||b.alphaMap&&b.alphaTest>0||b.map&&b.alphaTest>0){const V=_.uuid,z=b.uuid;let Y=u[V];Y===void 0&&(Y={},u[V]=Y);let j=Y[z];j===void 0&&(j=_.clone(),Y[z]=j,b.addEventListener("dispose",F)),_=j}if(_.visible=b.visible,_.wireframe=b.wireframe,t1===Q2?_.side=b.shadowSide!==null?b.shadowSide:b.side:_.side=b.shadowSide!==null?b.shadowSide:f[b.side],_.alphaMap=b.alphaMap,_.alphaTest=b.alphaTest,_.map=b.map,_.clipShadows=b.clipShadows,_.clippingPlanes=b.clippingPlanes,_.clipIntersection=b.clipIntersection,_.displacementMap=b.displacementMap,_.displacementScale=b.displacementScale,_.displacementBias=b.displacementBias,_.wireframeLinewidth=b.wireframeLinewidth,_.linewidth=b.linewidth,O.isPointLight===!0&&_.isMeshDistanceMaterial===!0){const V=l.properties.get(_);V.light=O}return _}function A(R,b,O,t1,_){if(R.visible===!1)return;if(R.layers.test(b.layers)&&(R.isMesh||R.isLine||R.isPoints)&&(R.castShadow||R.receiveShadow&&_===Q2)&&(!R.frustumCulled||n.intersectsObject(R))){R.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,R.matrixWorld);const z=t.update(R),Y=R.material;if(Array.isArray(Y)){const j=z.groups;for(let G=0,K=j.length;G<K;G++){const H=j[G],a1=Y[H.materialIndex];if(a1&&a1.visible){const o1=E(R,a1,t1,_);R.onBeforeShadow(l,R,b,O,z,o1,H),l.renderBufferDirect(O,null,z,o1,R,H),R.onAfterShadow(l,R,b,O,z,o1,H)}}}else if(Y.visible){const j=E(R,Y,t1,_);R.onBeforeShadow(l,R,b,O,z,j,null),l.renderBufferDirect(O,null,z,j,R,null),R.onAfterShadow(l,R,b,O,z,j,null)}}const V=R.children;for(let z=0,Y=V.length;z<Y;z++)A(V[z],b,O,t1,_)}function F(R){R.target.removeEventListener("dispose",F);for(const O in u){const t1=u[O],_=R.target.uuid;_ in t1&&(t1[_].dispose(),delete t1[_])}}}const Mi={[h4]:d4,[f4]:_4,[p4]:g4,[i3]:m4,[d4]:h4,[_4]:f4,[g4]:p4,[m4]:i3};function Si(l){function t(){let C=!1;const r1=new j1;let B=null;const q=new j1(0,0,0,0);return{setMask:function(l1){B!==l1&&!C&&(l.colorMask(l1,l1,l1,l1),B=l1)},setLocked:function(l1){C=l1},setClear:function(l1,s1,F1,l2,v2){v2===!0&&(l1*=l2,s1*=l2,F1*=l2),r1.set(l1,s1,F1,l2),q.equals(r1)===!1&&(l.clearColor(l1,s1,F1,l2),q.copy(r1))},reset:function(){C=!1,B=null,q.set(-1,0,0,0)}}}function e(){let C=!1,r1=!1,B=null,q=null,l1=null;return{setReversed:function(s1){r1=s1},setTest:function(s1){s1?p1(l.DEPTH_TEST):u1(l.DEPTH_TEST)},setMask:function(s1){B!==s1&&!C&&(l.depthMask(s1),B=s1)},setFunc:function(s1){if(r1&&(s1=Mi[s1]),q!==s1){switch(s1){case h4:l.depthFunc(l.NEVER);break;case d4:l.depthFunc(l.ALWAYS);break;case f4:l.depthFunc(l.LESS);break;case i3:l.depthFunc(l.LEQUAL);break;case p4:l.depthFunc(l.EQUAL);break;case m4:l.depthFunc(l.GEQUAL);break;case _4:l.depthFunc(l.GREATER);break;case g4:l.depthFunc(l.NOTEQUAL);break;default:l.depthFunc(l.LEQUAL)}q=s1}},setLocked:function(s1){C=s1},setClear:function(s1){l1!==s1&&(l.clearDepth(s1),l1=s1)},reset:function(){C=!1,B=null,q=null,l1=null}}}function n(){let C=!1,r1=null,B=null,q=null,l1=null,s1=null,F1=null,l2=null,v2=null;return{setTest:function(H1){C||(H1?p1(l.STENCIL_TEST):u1(l.STENCIL_TEST))},setMask:function(H1){r1!==H1&&!C&&(l.stencilMask(H1),r1=H1)},setFunc:function(H1,x2,q2){(B!==H1||q!==x2||l1!==q2)&&(l.stencilFunc(H1,x2,q2),B=H1,q=x2,l1=q2)},setOp:function(H1,x2,q2){(s1!==H1||F1!==x2||l2!==q2)&&(l.stencilOp(H1,x2,q2),s1=H1,F1=x2,l2=q2)},setLocked:function(H1){C=H1},setClear:function(H1){v2!==H1&&(l.clearStencil(H1),v2=H1)},reset:function(){C=!1,r1=null,B=null,q=null,l1=null,s1=null,F1=null,l2=null,v2=null}}}const i=new t,r=new e,s=new n,a=new WeakMap,o=new WeakMap;let u={},c={},f=new WeakMap,p=[],m=null,v=!1,M=null,d=null,h=null,T=null,E=null,A=null,F=null,R=new W1(0,0,0),b=0,O=!1,t1=null,_=null,S=null,V=null,z=null;const Y=l.getParameter(l.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let j=!1,G=0;const K=l.getParameter(l.VERSION);K.indexOf("WebGL")!==-1?(G=parseFloat(/^WebGL (\d)/.exec(K)[1]),j=G>=1):K.indexOf("OpenGL ES")!==-1&&(G=parseFloat(/^OpenGL ES (\d)/.exec(K)[1]),j=G>=2);let H=null,a1={};const o1=l.getParameter(l.SCISSOR_BOX),_1=l.getParameter(l.VIEWPORT),z1=new j1().fromArray(o1),X1=new j1().fromArray(_1);function k(C,r1,B,q){const l1=new Uint8Array(4),s1=l.createTexture();l.bindTexture(C,s1),l.texParameteri(C,l.TEXTURE_MIN_FILTER,l.NEAREST),l.texParameteri(C,l.TEXTURE_MAG_FILTER,l.NEAREST);for(let F1=0;F1<B;F1++)C===l.TEXTURE_3D||C===l.TEXTURE_2D_ARRAY?l.texImage3D(r1,0,l.RGBA,1,1,q,0,l.RGBA,l.UNSIGNED_BYTE,l1):l.texImage2D(r1+F1,0,l.RGBA,1,1,0,l.RGBA,l.UNSIGNED_BYTE,l1);return s1}const $={};$[l.TEXTURE_2D]=k(l.TEXTURE_2D,l.TEXTURE_2D,1),$[l.TEXTURE_CUBE_MAP]=k(l.TEXTURE_CUBE_MAP,l.TEXTURE_CUBE_MAP_POSITIVE_X,6),$[l.TEXTURE_2D_ARRAY]=k(l.TEXTURE_2D_ARRAY,l.TEXTURE_2D_ARRAY,1,1),$[l.TEXTURE_3D]=k(l.TEXTURE_3D,l.TEXTURE_3D,1,1),i.setClear(0,0,0,1),r.setClear(1),s.setClear(0),p1(l.DEPTH_TEST),r.setFunc(i3),D1(!1),O1(E8),p1(l.CULL_FACE),w(f0);function p1(C){u[C]!==!0&&(l.enable(C),u[C]=!0)}function u1(C){u[C]!==!1&&(l.disable(C),u[C]=!1)}function R1(C,r1){return c[C]!==r1?(l.bindFramebuffer(C,r1),c[C]=r1,C===l.DRAW_FRAMEBUFFER&&(c[l.FRAMEBUFFER]=r1),C===l.FRAMEBUFFER&&(c[l.DRAW_FRAMEBUFFER]=r1),!0):!1}function S1(C,r1){let B=p,q=!1;if(C){B=f.get(r1),B===void 0&&(B=[],f.set(r1,B));const l1=C.textures;if(B.length!==l1.length||B[0]!==l.COLOR_ATTACHMENT0){for(let s1=0,F1=l1.length;s1<F1;s1++)B[s1]=l.COLOR_ATTACHMENT0+s1;B.length=l1.length,q=!0}}else B[0]!==l.BACK&&(B[0]=l.BACK,q=!0);q&&l.drawBuffers(B)}function I1(C){return m!==C?(l.useProgram(C),m=C,!0):!1}const q1={[b0]:l.FUNC_ADD,[v6]:l.FUNC_SUBTRACT,[x6]:l.FUNC_REVERSE_SUBTRACT};q1[M6]=l.MIN,q1[S6]=l.MAX;const N1={[E6]:l.ZERO,[y6]:l.ONE,[T6]:l.SRC_COLOR,[u4]:l.SRC_ALPHA,[P6]:l.SRC_ALPHA_SATURATE,[R6]:l.DST_COLOR,[b6]:l.DST_ALPHA,[A6]:l.ONE_MINUS_SRC_COLOR,[c4]:l.ONE_MINUS_SRC_ALPHA,[C6]:l.ONE_MINUS_DST_COLOR,[w6]:l.ONE_MINUS_DST_ALPHA,[L6]:l.CONSTANT_COLOR,[D6]:l.ONE_MINUS_CONSTANT_COLOR,[U6]:l.CONSTANT_ALPHA,[I6]:l.ONE_MINUS_CONSTANT_ALPHA};function w(C,r1,B,q,l1,s1,F1,l2,v2,H1){if(C===f0){v===!0&&(u1(l.BLEND),v=!1);return}if(v===!1&&(p1(l.BLEND),v=!0),C!==g6){if(C!==M||H1!==O){if((d!==b0||E!==b0)&&(l.blendEquation(l.FUNC_ADD),d=b0,E=b0),H1)switch(C){case e3:l.blendFuncSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case y8:l.blendFunc(l.ONE,l.ONE);break;case T8:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case A8:l.blendFuncSeparate(l.ZERO,l.SRC_COLOR,l.ZERO,l.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}else switch(C){case e3:l.blendFuncSeparate(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case y8:l.blendFunc(l.SRC_ALPHA,l.ONE);break;case T8:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case A8:l.blendFunc(l.ZERO,l.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}h=null,T=null,A=null,F=null,R.set(0,0,0),b=0,M=C,O=H1}return}l1=l1||r1,s1=s1||B,F1=F1||q,(r1!==d||l1!==E)&&(l.blendEquationSeparate(q1[r1],q1[l1]),d=r1,E=l1),(B!==h||q!==T||s1!==A||F1!==F)&&(l.blendFuncSeparate(N1[B],N1[q],N1[s1],N1[F1]),h=B,T=q,A=s1,F=F1),(l2.equals(R)===!1||v2!==b)&&(l.blendColor(l2.r,l2.g,l2.b,v2),R.copy(l2),b=v2),M=C,O=!1}function T2(C,r1){C.side===W2?u1(l.CULL_FACE):p1(l.CULL_FACE);let B=C.side===y2;r1&&(B=!B),D1(B),C.blending===e3&&C.transparent===!1?w(f0):w(C.blending,C.blendEquation,C.blendSrc,C.blendDst,C.blendEquationAlpha,C.blendSrcAlpha,C.blendDstAlpha,C.blendColor,C.blendAlpha,C.premultipliedAlpha),r.setFunc(C.depthFunc),r.setTest(C.depthTest),r.setMask(C.depthWrite),i.setMask(C.colorWrite);const q=C.stencilWrite;s.setTest(q),q&&(s.setMask(C.stencilWriteMask),s.setFunc(C.stencilFunc,C.stencilRef,C.stencilFuncMask),s.setOp(C.stencilFail,C.stencilZFail,C.stencilZPass)),$1(C.polygonOffset,C.polygonOffsetFactor,C.polygonOffsetUnits),C.alphaToCoverage===!0?p1(l.SAMPLE_ALPHA_TO_COVERAGE):u1(l.SAMPLE_ALPHA_TO_COVERAGE)}function D1(C){t1!==C&&(C?l.frontFace(l.CW):l.frontFace(l.CCW),t1=C)}function O1(C){C!==p6?(p1(l.CULL_FACE),C!==_&&(C===E8?l.cullFace(l.BACK):C===m6?l.cullFace(l.FRONT):l.cullFace(l.FRONT_AND_BACK))):u1(l.CULL_FACE),_=C}function y1(C){C!==S&&(j&&l.lineWidth(C),S=C)}function $1(C,r1,B){C?(p1(l.POLYGON_OFFSET_FILL),(V!==r1||z!==B)&&(l.polygonOffset(r1,B),V=r1,z=B)):u1(l.POLYGON_OFFSET_FILL)}function b1(C){C?p1(l.SCISSOR_TEST):u1(l.SCISSOR_TEST)}function y(C){C===void 0&&(C=l.TEXTURE0+Y-1),H!==C&&(l.activeTexture(C),H=C)}function g(C,r1,B){B===void 0&&(H===null?B=l.TEXTURE0+Y-1:B=H);let q=a1[B];q===void 0&&(q={type:void 0,texture:void 0},a1[B]=q),(q.type!==C||q.texture!==r1)&&(H!==B&&(l.activeTexture(B),H=B),l.bindTexture(C,r1||$[C]),q.type=C,q.texture=r1)}function U(){const C=a1[H];C!==void 0&&C.type!==void 0&&(l.bindTexture(C.type,null),C.type=void 0,C.texture=void 0)}function X(){try{l.compressedTexImage2D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function Z(){try{l.compressedTexImage3D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function W(){try{l.texSubImage2D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function g1(){try{l.texSubImage3D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function n1(){try{l.compressedTexSubImage2D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function c1(){try{l.compressedTexSubImage3D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function B1(){try{l.texStorage2D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function J(){try{l.texStorage3D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function h1(){try{l.texImage2D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function T1(){try{l.texImage3D.apply(l,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function A1(C){z1.equals(C)===!1&&(l.scissor(C.x,C.y,C.z,C.w),z1.copy(C))}function d1(C){X1.equals(C)===!1&&(l.viewport(C.x,C.y,C.z,C.w),X1.copy(C))}function U1(C,r1){let B=o.get(r1);B===void 0&&(B=new WeakMap,o.set(r1,B));let q=B.get(C);q===void 0&&(q=l.getUniformBlockIndex(r1,C.name),B.set(C,q))}function C1(C,r1){const q=o.get(r1).get(C);a.get(r1)!==q&&(l.uniformBlockBinding(r1,q,C.__bindingPointIndex),a.set(r1,q))}function Z1(){l.disable(l.BLEND),l.disable(l.CULL_FACE),l.disable(l.DEPTH_TEST),l.disable(l.POLYGON_OFFSET_FILL),l.disable(l.SCISSOR_TEST),l.disable(l.STENCIL_TEST),l.disable(l.SAMPLE_ALPHA_TO_COVERAGE),l.blendEquation(l.FUNC_ADD),l.blendFunc(l.ONE,l.ZERO),l.blendFuncSeparate(l.ONE,l.ZERO,l.ONE,l.ZERO),l.blendColor(0,0,0,0),l.colorMask(!0,!0,!0,!0),l.clearColor(0,0,0,0),l.depthMask(!0),l.depthFunc(l.LESS),l.clearDepth(1),l.stencilMask(4294967295),l.stencilFunc(l.ALWAYS,0,4294967295),l.stencilOp(l.KEEP,l.KEEP,l.KEEP),l.clearStencil(0),l.cullFace(l.BACK),l.frontFace(l.CCW),l.polygonOffset(0,0),l.activeTexture(l.TEXTURE0),l.bindFramebuffer(l.FRAMEBUFFER,null),l.bindFramebuffer(l.DRAW_FRAMEBUFFER,null),l.bindFramebuffer(l.READ_FRAMEBUFFER,null),l.useProgram(null),l.lineWidth(1),l.scissor(0,0,l.canvas.width,l.canvas.height),l.viewport(0,0,l.canvas.width,l.canvas.height),u={},H=null,a1={},c={},f=new WeakMap,p=[],m=null,v=!1,M=null,d=null,h=null,T=null,E=null,A=null,F=null,R=new W1(0,0,0),b=0,O=!1,t1=null,_=null,S=null,V=null,z=null,z1.set(0,0,l.canvas.width,l.canvas.height),X1.set(0,0,l.canvas.width,l.canvas.height),i.reset(),r.reset(),s.reset()}return{buffers:{color:i,depth:r,stencil:s},enable:p1,disable:u1,bindFramebuffer:R1,drawBuffers:S1,useProgram:I1,setBlending:w,setMaterial:T2,setFlipSided:D1,setCullFace:O1,setLineWidth:y1,setPolygonOffset:$1,setScissorTest:b1,activeTexture:y,bindTexture:g,unbindTexture:U,compressedTexImage2D:X,compressedTexImage3D:Z,texImage2D:h1,texImage3D:T1,updateUBOMapping:U1,uniformBlockBinding:C1,texStorage2D:B1,texStorage3D:J,texSubImage2D:W,texSubImage3D:g1,compressedTexSubImage2D:n1,compressedTexSubImage3D:c1,scissor:A1,viewport:d1,reset:Z1}}function _5(l,t,e,n){const i=Ei(n);switch(e){case I5:return l*t;case F5:return l*t;case O5:return l*t*2;case B5:return l*t/i.components*i.byteLength;case n8:return l*t/i.components*i.byteLength;case z5:return l*t*2/i.components*i.byteLength;case l8:return l*t*2/i.components*i.byteLength;case N5:return l*t*3/i.components*i.byteLength;case z2:return l*t*4/i.components*i.byteLength;case i8:return l*t*4/i.components*i.byteLength;case r9:case s9:return Math.floor((l+3)/4)*Math.floor((t+3)/4)*8;case a9:case o9:return Math.floor((l+3)/4)*Math.floor((t+3)/4)*16;case y4:case A4:return Math.max(l,16)*Math.max(t,8)/4;case E4:case T4:return Math.max(l,8)*Math.max(t,8)/2;case b4:case w4:return Math.floor((l+3)/4)*Math.floor((t+3)/4)*8;case R4:return Math.floor((l+3)/4)*Math.floor((t+3)/4)*16;case C4:return Math.floor((l+3)/4)*Math.floor((t+3)/4)*16;case P4:return Math.floor((l+4)/5)*Math.floor((t+3)/4)*16;case L4:return Math.floor((l+4)/5)*Math.floor((t+4)/5)*16;case D4:return Math.floor((l+5)/6)*Math.floor((t+4)/5)*16;case U4:return Math.floor((l+5)/6)*Math.floor((t+5)/6)*16;case I4:return Math.floor((l+7)/8)*Math.floor((t+4)/5)*16;case N4:return Math.floor((l+7)/8)*Math.floor((t+5)/6)*16;case F4:return Math.floor((l+7)/8)*Math.floor((t+7)/8)*16;case O4:return Math.floor((l+9)/10)*Math.floor((t+4)/5)*16;case B4:return Math.floor((l+9)/10)*Math.floor((t+5)/6)*16;case z4:return Math.floor((l+9)/10)*Math.floor((t+7)/8)*16;case H4:return Math.floor((l+9)/10)*Math.floor((t+9)/10)*16;case G4:return Math.floor((l+11)/12)*Math.floor((t+9)/10)*16;case V4:return Math.floor((l+11)/12)*Math.floor((t+11)/12)*16;case u9:case k4:case W4:return Math.ceil(l/4)*Math.ceil(t/4)*16;case H5:case X4:return Math.ceil(l/4)*Math.ceil(t/4)*8;case Y4:case q4:return Math.ceil(l/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function Ei(l){switch(l){case n0:case L5:return{byteLength:1,components:1};case T3:case D5:case C3:return{byteLength:2,components:1};case t8:case e8:return{byteLength:2,components:4};case D0:case Q4:case t0:return{byteLength:4,components:1};case U5:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${l}.`)}function yi(l,t,e,n,i,r,s){const a=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,o=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),u=new w1,c=new WeakMap;let f;const p=new WeakMap;let m=!1;try{m=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(y,g){return m?new OffscreenCanvas(y,g):b3("canvas")}function M(y,g,U){let X=1;const Z=b1(y);if((Z.width>U||Z.height>U)&&(X=U/Math.max(Z.width,Z.height)),X<1)if(typeof HTMLImageElement<"u"&&y instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&y instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&y instanceof ImageBitmap||typeof VideoFrame<"u"&&y instanceof VideoFrame){const W=Math.floor(X*Z.width),g1=Math.floor(X*Z.height);f===void 0&&(f=v(W,g1));const n1=g?v(W,g1):f;return n1.width=W,n1.height=g1,n1.getContext("2d").drawImage(y,0,0,W,g1),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Z.width+"x"+Z.height+") to ("+W+"x"+g1+")."),n1}else return"data"in y&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Z.width+"x"+Z.height+")."),y;return y}function d(y){return y.generateMipmaps&&y.minFilter!==D2&&y.minFilter!==O2}function h(y){l.generateMipmap(y)}function T(y,g,U,X,Z=!1){if(y!==null){if(l[y]!==void 0)return l[y];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+y+"'")}let W=g;if(g===l.RED&&(U===l.FLOAT&&(W=l.R32F),U===l.HALF_FLOAT&&(W=l.R16F),U===l.UNSIGNED_BYTE&&(W=l.R8)),g===l.RED_INTEGER&&(U===l.UNSIGNED_BYTE&&(W=l.R8UI),U===l.UNSIGNED_SHORT&&(W=l.R16UI),U===l.UNSIGNED_INT&&(W=l.R32UI),U===l.BYTE&&(W=l.R8I),U===l.SHORT&&(W=l.R16I),U===l.INT&&(W=l.R32I)),g===l.RG&&(U===l.FLOAT&&(W=l.RG32F),U===l.HALF_FLOAT&&(W=l.RG16F),U===l.UNSIGNED_BYTE&&(W=l.RG8)),g===l.RG_INTEGER&&(U===l.UNSIGNED_BYTE&&(W=l.RG8UI),U===l.UNSIGNED_SHORT&&(W=l.RG16UI),U===l.UNSIGNED_INT&&(W=l.RG32UI),U===l.BYTE&&(W=l.RG8I),U===l.SHORT&&(W=l.RG16I),U===l.INT&&(W=l.RG32I)),g===l.RGB_INTEGER&&(U===l.UNSIGNED_BYTE&&(W=l.RGB8UI),U===l.UNSIGNED_SHORT&&(W=l.RGB16UI),U===l.UNSIGNED_INT&&(W=l.RGB32UI),U===l.BYTE&&(W=l.RGB8I),U===l.SHORT&&(W=l.RGB16I),U===l.INT&&(W=l.RGB32I)),g===l.RGBA_INTEGER&&(U===l.UNSIGNED_BYTE&&(W=l.RGBA8UI),U===l.UNSIGNED_SHORT&&(W=l.RGBA16UI),U===l.UNSIGNED_INT&&(W=l.RGBA32UI),U===l.BYTE&&(W=l.RGBA8I),U===l.SHORT&&(W=l.RGBA16I),U===l.INT&&(W=l.RGBA32I)),g===l.RGB&&U===l.UNSIGNED_INT_5_9_9_9_REV&&(W=l.RGB9_E5),g===l.RGBA){const g1=Z?d9:k1.getTransfer(X);U===l.FLOAT&&(W=l.RGBA32F),U===l.HALF_FLOAT&&(W=l.RGBA16F),U===l.UNSIGNED_BYTE&&(W=g1===Q1?l.SRGB8_ALPHA8:l.RGBA8),U===l.UNSIGNED_SHORT_4_4_4_4&&(W=l.RGBA4),U===l.UNSIGNED_SHORT_5_5_5_1&&(W=l.RGB5_A1)}return(W===l.R16F||W===l.R32F||W===l.RG16F||W===l.RG32F||W===l.RGBA16F||W===l.RGBA32F)&&t.get("EXT_color_buffer_float"),W}function E(y,g){let U;return y?g===null||g===D0||g===a3?U=l.DEPTH24_STENCIL8:g===t0?U=l.DEPTH32F_STENCIL8:g===T3&&(U=l.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):g===null||g===D0||g===a3?U=l.DEPTH_COMPONENT24:g===t0?U=l.DEPTH_COMPONENT32F:g===T3&&(U=l.DEPTH_COMPONENT16),U}function A(y,g){return d(y)===!0||y.isFramebufferTexture&&y.minFilter!==D2&&y.minFilter!==O2?Math.log2(Math.max(g.width,g.height))+1:y.mipmaps!==void 0&&y.mipmaps.length>0?y.mipmaps.length:y.isCompressedTexture&&Array.isArray(y.image)?g.mipmaps.length:1}function F(y){const g=y.target;g.removeEventListener("dispose",F),b(g),g.isVideoTexture&&c.delete(g)}function R(y){const g=y.target;g.removeEventListener("dispose",R),t1(g)}function b(y){const g=n.get(y);if(g.__webglInit===void 0)return;const U=y.source,X=p.get(U);if(X){const Z=X[g.__cacheKey];Z.usedTimes--,Z.usedTimes===0&&O(y),Object.keys(X).length===0&&p.delete(U)}n.remove(y)}function O(y){const g=n.get(y);l.deleteTexture(g.__webglTexture);const U=y.source,X=p.get(U);delete X[g.__cacheKey],s.memory.textures--}function t1(y){const g=n.get(y);if(y.depthTexture&&y.depthTexture.dispose(),y.isWebGLCubeRenderTarget)for(let X=0;X<6;X++){if(Array.isArray(g.__webglFramebuffer[X]))for(let Z=0;Z<g.__webglFramebuffer[X].length;Z++)l.deleteFramebuffer(g.__webglFramebuffer[X][Z]);else l.deleteFramebuffer(g.__webglFramebuffer[X]);g.__webglDepthbuffer&&l.deleteRenderbuffer(g.__webglDepthbuffer[X])}else{if(Array.isArray(g.__webglFramebuffer))for(let X=0;X<g.__webglFramebuffer.length;X++)l.deleteFramebuffer(g.__webglFramebuffer[X]);else l.deleteFramebuffer(g.__webglFramebuffer);if(g.__webglDepthbuffer&&l.deleteRenderbuffer(g.__webglDepthbuffer),g.__webglMultisampledFramebuffer&&l.deleteFramebuffer(g.__webglMultisampledFramebuffer),g.__webglColorRenderbuffer)for(let X=0;X<g.__webglColorRenderbuffer.length;X++)g.__webglColorRenderbuffer[X]&&l.deleteRenderbuffer(g.__webglColorRenderbuffer[X]);g.__webglDepthRenderbuffer&&l.deleteRenderbuffer(g.__webglDepthRenderbuffer)}const U=y.textures;for(let X=0,Z=U.length;X<Z;X++){const W=n.get(U[X]);W.__webglTexture&&(l.deleteTexture(W.__webglTexture),s.memory.textures--),n.remove(U[X])}n.remove(y)}let _=0;function S(){_=0}function V(){const y=_;return y>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+y+" texture units while this GPU supports only "+i.maxTextures),_+=1,y}function z(y){const g=[];return g.push(y.wrapS),g.push(y.wrapT),g.push(y.wrapR||0),g.push(y.magFilter),g.push(y.minFilter),g.push(y.anisotropy),g.push(y.internalFormat),g.push(y.format),g.push(y.type),g.push(y.generateMipmaps),g.push(y.premultiplyAlpha),g.push(y.flipY),g.push(y.unpackAlignment),g.push(y.colorSpace),g.join()}function Y(y,g){const U=n.get(y);if(y.isVideoTexture&&y1(y),y.isRenderTargetTexture===!1&&y.version>0&&U.__version!==y.version){const X=y.image;if(X===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(X.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{X1(U,y,g);return}}e.bindTexture(l.TEXTURE_2D,U.__webglTexture,l.TEXTURE0+g)}function j(y,g){const U=n.get(y);if(y.version>0&&U.__version!==y.version){X1(U,y,g);return}e.bindTexture(l.TEXTURE_2D_ARRAY,U.__webglTexture,l.TEXTURE0+g)}function G(y,g){const U=n.get(y);if(y.version>0&&U.__version!==y.version){X1(U,y,g);return}e.bindTexture(l.TEXTURE_3D,U.__webglTexture,l.TEXTURE0+g)}function K(y,g){const U=n.get(y);if(y.version>0&&U.__version!==y.version){k(U,y,g);return}e.bindTexture(l.TEXTURE_CUBE_MAP,U.__webglTexture,l.TEXTURE0+g)}const H={[M4]:l.REPEAT,[R0]:l.CLAMP_TO_EDGE,[S4]:l.MIRRORED_REPEAT},a1={[D2]:l.NEAREST,[W6]:l.NEAREST_MIPMAP_NEAREST,[N3]:l.NEAREST_MIPMAP_LINEAR,[O2]:l.LINEAR,[P9]:l.LINEAR_MIPMAP_NEAREST,[C0]:l.LINEAR_MIPMAP_LINEAR},o1={[j6]:l.NEVER,[e7]:l.ALWAYS,[Z6]:l.LESS,[G5]:l.LEQUAL,[$6]:l.EQUAL,[t7]:l.GEQUAL,[J6]:l.GREATER,[Q6]:l.NOTEQUAL};function _1(y,g){if(g.type===t0&&t.has("OES_texture_float_linear")===!1&&(g.magFilter===O2||g.magFilter===P9||g.magFilter===N3||g.magFilter===C0||g.minFilter===O2||g.minFilter===P9||g.minFilter===N3||g.minFilter===C0)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),l.texParameteri(y,l.TEXTURE_WRAP_S,H[g.wrapS]),l.texParameteri(y,l.TEXTURE_WRAP_T,H[g.wrapT]),(y===l.TEXTURE_3D||y===l.TEXTURE_2D_ARRAY)&&l.texParameteri(y,l.TEXTURE_WRAP_R,H[g.wrapR]),l.texParameteri(y,l.TEXTURE_MAG_FILTER,a1[g.magFilter]),l.texParameteri(y,l.TEXTURE_MIN_FILTER,a1[g.minFilter]),g.compareFunction&&(l.texParameteri(y,l.TEXTURE_COMPARE_MODE,l.COMPARE_REF_TO_TEXTURE),l.texParameteri(y,l.TEXTURE_COMPARE_FUNC,o1[g.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(g.magFilter===D2||g.minFilter!==N3&&g.minFilter!==C0||g.type===t0&&t.has("OES_texture_float_linear")===!1)return;if(g.anisotropy>1||n.get(g).__currentAnisotropy){const U=t.get("EXT_texture_filter_anisotropic");l.texParameterf(y,U.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(g.anisotropy,i.getMaxAnisotropy())),n.get(g).__currentAnisotropy=g.anisotropy}}}function z1(y,g){let U=!1;y.__webglInit===void 0&&(y.__webglInit=!0,g.addEventListener("dispose",F));const X=g.source;let Z=p.get(X);Z===void 0&&(Z={},p.set(X,Z));const W=z(g);if(W!==y.__cacheKey){Z[W]===void 0&&(Z[W]={texture:l.createTexture(),usedTimes:0},s.memory.textures++,U=!0),Z[W].usedTimes++;const g1=Z[y.__cacheKey];g1!==void 0&&(Z[y.__cacheKey].usedTimes--,g1.usedTimes===0&&O(g)),y.__cacheKey=W,y.__webglTexture=Z[W].texture}return U}function X1(y,g,U){let X=l.TEXTURE_2D;(g.isDataArrayTexture||g.isCompressedArrayTexture)&&(X=l.TEXTURE_2D_ARRAY),g.isData3DTexture&&(X=l.TEXTURE_3D);const Z=z1(y,g),W=g.source;e.bindTexture(X,y.__webglTexture,l.TEXTURE0+U);const g1=n.get(W);if(W.version!==g1.__version||Z===!0){e.activeTexture(l.TEXTURE0+U);const n1=k1.getPrimaries(k1.workingColorSpace),c1=g.colorSpace===d0?null:k1.getPrimaries(g.colorSpace),B1=g.colorSpace===d0||n1===c1?l.NONE:l.BROWSER_DEFAULT_WEBGL;l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,g.flipY),l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha),l.pixelStorei(l.UNPACK_ALIGNMENT,g.unpackAlignment),l.pixelStorei(l.UNPACK_COLORSPACE_CONVERSION_WEBGL,B1);let J=M(g.image,!1,i.maxTextureSize);J=$1(g,J);const h1=r.convert(g.format,g.colorSpace),T1=r.convert(g.type);let A1=T(g.internalFormat,h1,T1,g.colorSpace,g.isVideoTexture);_1(X,g);let d1;const U1=g.mipmaps,C1=g.isVideoTexture!==!0,Z1=g1.__version===void 0||Z===!0,C=W.dataReady,r1=A(g,J);if(g.isDepthTexture)A1=E(g.format===o3,g.type),Z1&&(C1?e.texStorage2D(l.TEXTURE_2D,1,A1,J.width,J.height):e.texImage2D(l.TEXTURE_2D,0,A1,J.width,J.height,0,h1,T1,null));else if(g.isDataTexture)if(U1.length>0){C1&&Z1&&e.texStorage2D(l.TEXTURE_2D,r1,A1,U1[0].width,U1[0].height);for(let B=0,q=U1.length;B<q;B++)d1=U1[B],C1?C&&e.texSubImage2D(l.TEXTURE_2D,B,0,0,d1.width,d1.height,h1,T1,d1.data):e.texImage2D(l.TEXTURE_2D,B,A1,d1.width,d1.height,0,h1,T1,d1.data);g.generateMipmaps=!1}else C1?(Z1&&e.texStorage2D(l.TEXTURE_2D,r1,A1,J.width,J.height),C&&e.texSubImage2D(l.TEXTURE_2D,0,0,0,J.width,J.height,h1,T1,J.data)):e.texImage2D(l.TEXTURE_2D,0,A1,J.width,J.height,0,h1,T1,J.data);else if(g.isCompressedTexture)if(g.isCompressedArrayTexture){C1&&Z1&&e.texStorage3D(l.TEXTURE_2D_ARRAY,r1,A1,U1[0].width,U1[0].height,J.depth);for(let B=0,q=U1.length;B<q;B++)if(d1=U1[B],g.format!==z2)if(h1!==null)if(C1){if(C)if(g.layerUpdates.size>0){const l1=_5(d1.width,d1.height,g.format,g.type);for(const s1 of g.layerUpdates){const F1=d1.data.subarray(s1*l1/d1.data.BYTES_PER_ELEMENT,(s1+1)*l1/d1.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(l.TEXTURE_2D_ARRAY,B,0,0,s1,d1.width,d1.height,1,h1,F1,0,0)}g.clearLayerUpdates()}else e.compressedTexSubImage3D(l.TEXTURE_2D_ARRAY,B,0,0,0,d1.width,d1.height,J.depth,h1,d1.data,0,0)}else e.compressedTexImage3D(l.TEXTURE_2D_ARRAY,B,A1,d1.width,d1.height,J.depth,0,d1.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else C1?C&&e.texSubImage3D(l.TEXTURE_2D_ARRAY,B,0,0,0,d1.width,d1.height,J.depth,h1,T1,d1.data):e.texImage3D(l.TEXTURE_2D_ARRAY,B,A1,d1.width,d1.height,J.depth,0,h1,T1,d1.data)}else{C1&&Z1&&e.texStorage2D(l.TEXTURE_2D,r1,A1,U1[0].width,U1[0].height);for(let B=0,q=U1.length;B<q;B++)d1=U1[B],g.format!==z2?h1!==null?C1?C&&e.compressedTexSubImage2D(l.TEXTURE_2D,B,0,0,d1.width,d1.height,h1,d1.data):e.compressedTexImage2D(l.TEXTURE_2D,B,A1,d1.width,d1.height,0,d1.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C1?C&&e.texSubImage2D(l.TEXTURE_2D,B,0,0,d1.width,d1.height,h1,T1,d1.data):e.texImage2D(l.TEXTURE_2D,B,A1,d1.width,d1.height,0,h1,T1,d1.data)}else if(g.isDataArrayTexture)if(C1){if(Z1&&e.texStorage3D(l.TEXTURE_2D_ARRAY,r1,A1,J.width,J.height,J.depth),C)if(g.layerUpdates.size>0){const B=_5(J.width,J.height,g.format,g.type);for(const q of g.layerUpdates){const l1=J.data.subarray(q*B/J.data.BYTES_PER_ELEMENT,(q+1)*B/J.data.BYTES_PER_ELEMENT);e.texSubImage3D(l.TEXTURE_2D_ARRAY,0,0,0,q,J.width,J.height,1,h1,T1,l1)}g.clearLayerUpdates()}else e.texSubImage3D(l.TEXTURE_2D_ARRAY,0,0,0,0,J.width,J.height,J.depth,h1,T1,J.data)}else e.texImage3D(l.TEXTURE_2D_ARRAY,0,A1,J.width,J.height,J.depth,0,h1,T1,J.data);else if(g.isData3DTexture)C1?(Z1&&e.texStorage3D(l.TEXTURE_3D,r1,A1,J.width,J.height,J.depth),C&&e.texSubImage3D(l.TEXTURE_3D,0,0,0,0,J.width,J.height,J.depth,h1,T1,J.data)):e.texImage3D(l.TEXTURE_3D,0,A1,J.width,J.height,J.depth,0,h1,T1,J.data);else if(g.isFramebufferTexture){if(Z1)if(C1)e.texStorage2D(l.TEXTURE_2D,r1,A1,J.width,J.height);else{let B=J.width,q=J.height;for(let l1=0;l1<r1;l1++)e.texImage2D(l.TEXTURE_2D,l1,A1,B,q,0,h1,T1,null),B>>=1,q>>=1}}else if(U1.length>0){if(C1&&Z1){const B=b1(U1[0]);e.texStorage2D(l.TEXTURE_2D,r1,A1,B.width,B.height)}for(let B=0,q=U1.length;B<q;B++)d1=U1[B],C1?C&&e.texSubImage2D(l.TEXTURE_2D,B,0,0,h1,T1,d1):e.texImage2D(l.TEXTURE_2D,B,A1,h1,T1,d1);g.generateMipmaps=!1}else if(C1){if(Z1){const B=b1(J);e.texStorage2D(l.TEXTURE_2D,r1,A1,B.width,B.height)}C&&e.texSubImage2D(l.TEXTURE_2D,0,0,0,h1,T1,J)}else e.texImage2D(l.TEXTURE_2D,0,A1,h1,T1,J);d(g)&&h(X),g1.__version=W.version,g.onUpdate&&g.onUpdate(g)}y.__version=g.version}function k(y,g,U){if(g.image.length!==6)return;const X=z1(y,g),Z=g.source;e.bindTexture(l.TEXTURE_CUBE_MAP,y.__webglTexture,l.TEXTURE0+U);const W=n.get(Z);if(Z.version!==W.__version||X===!0){e.activeTexture(l.TEXTURE0+U);const g1=k1.getPrimaries(k1.workingColorSpace),n1=g.colorSpace===d0?null:k1.getPrimaries(g.colorSpace),c1=g.colorSpace===d0||g1===n1?l.NONE:l.BROWSER_DEFAULT_WEBGL;l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL,g.flipY),l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha),l.pixelStorei(l.UNPACK_ALIGNMENT,g.unpackAlignment),l.pixelStorei(l.UNPACK_COLORSPACE_CONVERSION_WEBGL,c1);const B1=g.isCompressedTexture||g.image[0].isCompressedTexture,J=g.image[0]&&g.image[0].isDataTexture,h1=[];for(let q=0;q<6;q++)!B1&&!J?h1[q]=M(g.image[q],!0,i.maxCubemapSize):h1[q]=J?g.image[q].image:g.image[q],h1[q]=$1(g,h1[q]);const T1=h1[0],A1=r.convert(g.format,g.colorSpace),d1=r.convert(g.type),U1=T(g.internalFormat,A1,d1,g.colorSpace),C1=g.isVideoTexture!==!0,Z1=W.__version===void 0||X===!0,C=Z.dataReady;let r1=A(g,T1);_1(l.TEXTURE_CUBE_MAP,g);let B;if(B1){C1&&Z1&&e.texStorage2D(l.TEXTURE_CUBE_MAP,r1,U1,T1.width,T1.height);for(let q=0;q<6;q++){B=h1[q].mipmaps;for(let l1=0;l1<B.length;l1++){const s1=B[l1];g.format!==z2?A1!==null?C1?C&&e.compressedTexSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1,0,0,s1.width,s1.height,A1,s1.data):e.compressedTexImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1,U1,s1.width,s1.height,0,s1.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):C1?C&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1,0,0,s1.width,s1.height,A1,d1,s1.data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1,U1,s1.width,s1.height,0,A1,d1,s1.data)}}}else{if(B=g.mipmaps,C1&&Z1){B.length>0&&r1++;const q=b1(h1[0]);e.texStorage2D(l.TEXTURE_CUBE_MAP,r1,U1,q.width,q.height)}for(let q=0;q<6;q++)if(J){C1?C&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,0,0,0,h1[q].width,h1[q].height,A1,d1,h1[q].data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,0,U1,h1[q].width,h1[q].height,0,A1,d1,h1[q].data);for(let l1=0;l1<B.length;l1++){const F1=B[l1].image[q].image;C1?C&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1+1,0,0,F1.width,F1.height,A1,d1,F1.data):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1+1,U1,F1.width,F1.height,0,A1,d1,F1.data)}}else{C1?C&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,0,0,0,A1,d1,h1[q]):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,0,U1,A1,d1,h1[q]);for(let l1=0;l1<B.length;l1++){const s1=B[l1];C1?C&&e.texSubImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1+1,0,0,A1,d1,s1.image[q]):e.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X+q,l1+1,U1,A1,d1,s1.image[q])}}}d(g)&&h(l.TEXTURE_CUBE_MAP),W.__version=Z.version,g.onUpdate&&g.onUpdate(g)}y.__version=g.version}function $(y,g,U,X,Z,W){const g1=r.convert(U.format,U.colorSpace),n1=r.convert(U.type),c1=T(U.internalFormat,g1,n1,U.colorSpace);if(!n.get(g).__hasExternalTextures){const J=Math.max(1,g.width>>W),h1=Math.max(1,g.height>>W);Z===l.TEXTURE_3D||Z===l.TEXTURE_2D_ARRAY?e.texImage3D(Z,W,c1,J,h1,g.depth,0,g1,n1,null):e.texImage2D(Z,W,c1,J,h1,0,g1,n1,null)}e.bindFramebuffer(l.FRAMEBUFFER,y),O1(g)?a.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,X,Z,n.get(U).__webglTexture,0,D1(g)):(Z===l.TEXTURE_2D||Z>=l.TEXTURE_CUBE_MAP_POSITIVE_X&&Z<=l.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&l.framebufferTexture2D(l.FRAMEBUFFER,X,Z,n.get(U).__webglTexture,W),e.bindFramebuffer(l.FRAMEBUFFER,null)}function p1(y,g,U){if(l.bindRenderbuffer(l.RENDERBUFFER,y),g.depthBuffer){const X=g.depthTexture,Z=X&&X.isDepthTexture?X.type:null,W=E(g.stencilBuffer,Z),g1=g.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT,n1=D1(g);O1(g)?a.renderbufferStorageMultisampleEXT(l.RENDERBUFFER,n1,W,g.width,g.height):U?l.renderbufferStorageMultisample(l.RENDERBUFFER,n1,W,g.width,g.height):l.renderbufferStorage(l.RENDERBUFFER,W,g.width,g.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,g1,l.RENDERBUFFER,y)}else{const X=g.textures;for(let Z=0;Z<X.length;Z++){const W=X[Z],g1=r.convert(W.format,W.colorSpace),n1=r.convert(W.type),c1=T(W.internalFormat,g1,n1,W.colorSpace),B1=D1(g);U&&O1(g)===!1?l.renderbufferStorageMultisample(l.RENDERBUFFER,B1,c1,g.width,g.height):O1(g)?a.renderbufferStorageMultisampleEXT(l.RENDERBUFFER,B1,c1,g.width,g.height):l.renderbufferStorage(l.RENDERBUFFER,c1,g.width,g.height)}}l.bindRenderbuffer(l.RENDERBUFFER,null)}function u1(y,g){if(g&&g.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(l.FRAMEBUFFER,y),!(g.depthTexture&&g.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(g.depthTexture).__webglTexture||g.depthTexture.image.width!==g.width||g.depthTexture.image.height!==g.height)&&(g.depthTexture.image.width=g.width,g.depthTexture.image.height=g.height,g.depthTexture.needsUpdate=!0),Y(g.depthTexture,0);const X=n.get(g.depthTexture).__webglTexture,Z=D1(g);if(g.depthTexture.format===n3)O1(g)?a.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,X,0,Z):l.framebufferTexture2D(l.FRAMEBUFFER,l.DEPTH_ATTACHMENT,l.TEXTURE_2D,X,0);else if(g.depthTexture.format===o3)O1(g)?a.framebufferTexture2DMultisampleEXT(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.TEXTURE_2D,X,0,Z):l.framebufferTexture2D(l.FRAMEBUFFER,l.DEPTH_STENCIL_ATTACHMENT,l.TEXTURE_2D,X,0);else throw new Error("Unknown depthTexture format")}function R1(y){const g=n.get(y),U=y.isWebGLCubeRenderTarget===!0;if(g.__boundDepthTexture!==y.depthTexture){const X=y.depthTexture;if(g.__depthDisposeCallback&&g.__depthDisposeCallback(),X){const Z=()=>{delete g.__boundDepthTexture,delete g.__depthDisposeCallback,X.removeEventListener("dispose",Z)};X.addEventListener("dispose",Z),g.__depthDisposeCallback=Z}g.__boundDepthTexture=X}if(y.depthTexture&&!g.__autoAllocateDepthBuffer){if(U)throw new Error("target.depthTexture not supported in Cube render targets");u1(g.__webglFramebuffer,y)}else if(U){g.__webglDepthbuffer=[];for(let X=0;X<6;X++)if(e.bindFramebuffer(l.FRAMEBUFFER,g.__webglFramebuffer[X]),g.__webglDepthbuffer[X]===void 0)g.__webglDepthbuffer[X]=l.createRenderbuffer(),p1(g.__webglDepthbuffer[X],y,!1);else{const Z=y.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT,W=g.__webglDepthbuffer[X];l.bindRenderbuffer(l.RENDERBUFFER,W),l.framebufferRenderbuffer(l.FRAMEBUFFER,Z,l.RENDERBUFFER,W)}}else if(e.bindFramebuffer(l.FRAMEBUFFER,g.__webglFramebuffer),g.__webglDepthbuffer===void 0)g.__webglDepthbuffer=l.createRenderbuffer(),p1(g.__webglDepthbuffer,y,!1);else{const X=y.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT,Z=g.__webglDepthbuffer;l.bindRenderbuffer(l.RENDERBUFFER,Z),l.framebufferRenderbuffer(l.FRAMEBUFFER,X,l.RENDERBUFFER,Z)}e.bindFramebuffer(l.FRAMEBUFFER,null)}function S1(y,g,U){const X=n.get(y);g!==void 0&&$(X.__webglFramebuffer,y,y.texture,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,0),U!==void 0&&R1(y)}function I1(y){const g=y.texture,U=n.get(y),X=n.get(g);y.addEventListener("dispose",R);const Z=y.textures,W=y.isWebGLCubeRenderTarget===!0,g1=Z.length>1;if(g1||(X.__webglTexture===void 0&&(X.__webglTexture=l.createTexture()),X.__version=g.version,s.memory.textures++),W){U.__webglFramebuffer=[];for(let n1=0;n1<6;n1++)if(g.mipmaps&&g.mipmaps.length>0){U.__webglFramebuffer[n1]=[];for(let c1=0;c1<g.mipmaps.length;c1++)U.__webglFramebuffer[n1][c1]=l.createFramebuffer()}else U.__webglFramebuffer[n1]=l.createFramebuffer()}else{if(g.mipmaps&&g.mipmaps.length>0){U.__webglFramebuffer=[];for(let n1=0;n1<g.mipmaps.length;n1++)U.__webglFramebuffer[n1]=l.createFramebuffer()}else U.__webglFramebuffer=l.createFramebuffer();if(g1)for(let n1=0,c1=Z.length;n1<c1;n1++){const B1=n.get(Z[n1]);B1.__webglTexture===void 0&&(B1.__webglTexture=l.createTexture(),s.memory.textures++)}if(y.samples>0&&O1(y)===!1){U.__webglMultisampledFramebuffer=l.createFramebuffer(),U.__webglColorRenderbuffer=[],e.bindFramebuffer(l.FRAMEBUFFER,U.__webglMultisampledFramebuffer);for(let n1=0;n1<Z.length;n1++){const c1=Z[n1];U.__webglColorRenderbuffer[n1]=l.createRenderbuffer(),l.bindRenderbuffer(l.RENDERBUFFER,U.__webglColorRenderbuffer[n1]);const B1=r.convert(c1.format,c1.colorSpace),J=r.convert(c1.type),h1=T(c1.internalFormat,B1,J,c1.colorSpace,y.isXRRenderTarget===!0),T1=D1(y);l.renderbufferStorageMultisample(l.RENDERBUFFER,T1,h1,y.width,y.height),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+n1,l.RENDERBUFFER,U.__webglColorRenderbuffer[n1])}l.bindRenderbuffer(l.RENDERBUFFER,null),y.depthBuffer&&(U.__webglDepthRenderbuffer=l.createRenderbuffer(),p1(U.__webglDepthRenderbuffer,y,!0)),e.bindFramebuffer(l.FRAMEBUFFER,null)}}if(W){e.bindTexture(l.TEXTURE_CUBE_MAP,X.__webglTexture),_1(l.TEXTURE_CUBE_MAP,g);for(let n1=0;n1<6;n1++)if(g.mipmaps&&g.mipmaps.length>0)for(let c1=0;c1<g.mipmaps.length;c1++)$(U.__webglFramebuffer[n1][c1],y,g,l.COLOR_ATTACHMENT0,l.TEXTURE_CUBE_MAP_POSITIVE_X+n1,c1);else $(U.__webglFramebuffer[n1],y,g,l.COLOR_ATTACHMENT0,l.TEXTURE_CUBE_MAP_POSITIVE_X+n1,0);d(g)&&h(l.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(g1){for(let n1=0,c1=Z.length;n1<c1;n1++){const B1=Z[n1],J=n.get(B1);e.bindTexture(l.TEXTURE_2D,J.__webglTexture),_1(l.TEXTURE_2D,B1),$(U.__webglFramebuffer,y,B1,l.COLOR_ATTACHMENT0+n1,l.TEXTURE_2D,0),d(B1)&&h(l.TEXTURE_2D)}e.unbindTexture()}else{let n1=l.TEXTURE_2D;if((y.isWebGL3DRenderTarget||y.isWebGLArrayRenderTarget)&&(n1=y.isWebGL3DRenderTarget?l.TEXTURE_3D:l.TEXTURE_2D_ARRAY),e.bindTexture(n1,X.__webglTexture),_1(n1,g),g.mipmaps&&g.mipmaps.length>0)for(let c1=0;c1<g.mipmaps.length;c1++)$(U.__webglFramebuffer[c1],y,g,l.COLOR_ATTACHMENT0,n1,c1);else $(U.__webglFramebuffer,y,g,l.COLOR_ATTACHMENT0,n1,0);d(g)&&h(n1),e.unbindTexture()}y.depthBuffer&&R1(y)}function q1(y){const g=y.textures;for(let U=0,X=g.length;U<X;U++){const Z=g[U];if(d(Z)){const W=y.isWebGLCubeRenderTarget?l.TEXTURE_CUBE_MAP:l.TEXTURE_2D,g1=n.get(Z).__webglTexture;e.bindTexture(W,g1),h(W),e.unbindTexture()}}}const N1=[],w=[];function T2(y){if(y.samples>0){if(O1(y)===!1){const g=y.textures,U=y.width,X=y.height;let Z=l.COLOR_BUFFER_BIT;const W=y.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT,g1=n.get(y),n1=g.length>1;if(n1)for(let c1=0;c1<g.length;c1++)e.bindFramebuffer(l.FRAMEBUFFER,g1.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+c1,l.RENDERBUFFER,null),e.bindFramebuffer(l.FRAMEBUFFER,g1.__webglFramebuffer),l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0+c1,l.TEXTURE_2D,null,0);e.bindFramebuffer(l.READ_FRAMEBUFFER,g1.__webglMultisampledFramebuffer),e.bindFramebuffer(l.DRAW_FRAMEBUFFER,g1.__webglFramebuffer);for(let c1=0;c1<g.length;c1++){if(y.resolveDepthBuffer&&(y.depthBuffer&&(Z|=l.DEPTH_BUFFER_BIT),y.stencilBuffer&&y.resolveStencilBuffer&&(Z|=l.STENCIL_BUFFER_BIT)),n1){l.framebufferRenderbuffer(l.READ_FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.RENDERBUFFER,g1.__webglColorRenderbuffer[c1]);const B1=n.get(g[c1]).__webglTexture;l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0,l.TEXTURE_2D,B1,0)}l.blitFramebuffer(0,0,U,X,0,0,U,X,Z,l.NEAREST),o===!0&&(N1.length=0,w.length=0,N1.push(l.COLOR_ATTACHMENT0+c1),y.depthBuffer&&y.resolveDepthBuffer===!1&&(N1.push(W),w.push(W),l.invalidateFramebuffer(l.DRAW_FRAMEBUFFER,w)),l.invalidateFramebuffer(l.READ_FRAMEBUFFER,N1))}if(e.bindFramebuffer(l.READ_FRAMEBUFFER,null),e.bindFramebuffer(l.DRAW_FRAMEBUFFER,null),n1)for(let c1=0;c1<g.length;c1++){e.bindFramebuffer(l.FRAMEBUFFER,g1.__webglMultisampledFramebuffer),l.framebufferRenderbuffer(l.FRAMEBUFFER,l.COLOR_ATTACHMENT0+c1,l.RENDERBUFFER,g1.__webglColorRenderbuffer[c1]);const B1=n.get(g[c1]).__webglTexture;e.bindFramebuffer(l.FRAMEBUFFER,g1.__webglFramebuffer),l.framebufferTexture2D(l.DRAW_FRAMEBUFFER,l.COLOR_ATTACHMENT0+c1,l.TEXTURE_2D,B1,0)}e.bindFramebuffer(l.DRAW_FRAMEBUFFER,g1.__webglMultisampledFramebuffer)}else if(y.depthBuffer&&y.resolveDepthBuffer===!1&&o){const g=y.stencilBuffer?l.DEPTH_STENCIL_ATTACHMENT:l.DEPTH_ATTACHMENT;l.invalidateFramebuffer(l.DRAW_FRAMEBUFFER,[g])}}}function D1(y){return Math.min(i.maxSamples,y.samples)}function O1(y){const g=n.get(y);return y.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&g.__useRenderToTexture!==!1}function y1(y){const g=s.render.frame;c.get(y)!==g&&(c.set(y,g),y.update())}function $1(y,g){const U=y.colorSpace,X=y.format,Z=y.type;return y.isCompressedTexture===!0||y.isVideoTexture===!0||U!==g0&&U!==d0&&(k1.getTransfer(U)===Q1?(X!==z2||Z!==n0)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",U)),g}function b1(y){return typeof HTMLImageElement<"u"&&y instanceof HTMLImageElement?(u.width=y.naturalWidth||y.width,u.height=y.naturalHeight||y.height):typeof VideoFrame<"u"&&y instanceof VideoFrame?(u.width=y.displayWidth,u.height=y.displayHeight):(u.width=y.width,u.height=y.height),u}this.allocateTextureUnit=V,this.resetTextureUnits=S,this.setTexture2D=Y,this.setTexture2DArray=j,this.setTexture3D=G,this.setTextureCube=K,this.rebindTextures=S1,this.setupRenderTarget=I1,this.updateRenderTargetMipmap=q1,this.updateMultisampleRenderTarget=T2,this.setupDepthRenderbuffer=R1,this.setupFrameBufferTexture=$,this.useMultisampledRTT=O1}function Ti(l,t){function e(n,i=d0){let r;const s=k1.getTransfer(i);if(n===n0)return l.UNSIGNED_BYTE;if(n===t8)return l.UNSIGNED_SHORT_4_4_4_4;if(n===e8)return l.UNSIGNED_SHORT_5_5_5_1;if(n===U5)return l.UNSIGNED_INT_5_9_9_9_REV;if(n===L5)return l.BYTE;if(n===D5)return l.SHORT;if(n===T3)return l.UNSIGNED_SHORT;if(n===Q4)return l.INT;if(n===D0)return l.UNSIGNED_INT;if(n===t0)return l.FLOAT;if(n===C3)return l.HALF_FLOAT;if(n===I5)return l.ALPHA;if(n===N5)return l.RGB;if(n===z2)return l.RGBA;if(n===F5)return l.LUMINANCE;if(n===O5)return l.LUMINANCE_ALPHA;if(n===n3)return l.DEPTH_COMPONENT;if(n===o3)return l.DEPTH_STENCIL;if(n===B5)return l.RED;if(n===n8)return l.RED_INTEGER;if(n===z5)return l.RG;if(n===l8)return l.RG_INTEGER;if(n===i8)return l.RGBA_INTEGER;if(n===r9||n===s9||n===a9||n===o9)if(s===Q1)if(r=t.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(n===r9)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===s9)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===a9)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===o9)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=t.get("WEBGL_compressed_texture_s3tc"),r!==null){if(n===r9)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===s9)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===a9)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===o9)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===E4||n===y4||n===T4||n===A4)if(r=t.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(n===E4)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===y4)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===T4)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===A4)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===b4||n===w4||n===R4)if(r=t.get("WEBGL_compressed_texture_etc"),r!==null){if(n===b4||n===w4)return s===Q1?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===R4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===C4||n===P4||n===L4||n===D4||n===U4||n===I4||n===N4||n===F4||n===O4||n===B4||n===z4||n===H4||n===G4||n===V4)if(r=t.get("WEBGL_compressed_texture_astc"),r!==null){if(n===C4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===P4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===L4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===D4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===U4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===I4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===N4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===F4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===O4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===B4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===z4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===H4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===G4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===V4)return s===Q1?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===u9||n===k4||n===W4)if(r=t.get("EXT_texture_compression_bptc"),r!==null){if(n===u9)return s===Q1?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===k4)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===W4)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===H5||n===X4||n===Y4||n===q4)if(r=t.get("EXT_texture_compression_rgtc"),r!==null){if(n===u9)return r.COMPRESSED_RED_RGTC1_EXT;if(n===X4)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Y4)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===q4)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===a3?l.UNSIGNED_INT_24_8:l[n]!==void 0?l[n]:null}return{convert:e}}class Ai extends C2{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class S3 extends _2{constructor(){super(),this.isGroup=!0,this.type="Group"}}const bi={type:"move"};class i4{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new S3,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new S3,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new L,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new L),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new S3,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new L,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new L),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,s=null;const a=this._targetRay,o=this._grip,u=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(u&&t.hand){s=!0;for(const M of t.hand.values()){const d=e.getJointPose(M,n),h=this._getHandJoint(u,M);d!==null&&(h.matrix.fromArray(d.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),h.matrixWorldNeedsUpdate=!0,h.jointRadius=d.radius),h.visible=d!==null}const c=u.joints["index-finger-tip"],f=u.joints["thumb-tip"],p=c.position.distanceTo(f.position),m=.02,v=.005;u.inputState.pinching&&p>m+v?(u.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!u.inputState.pinching&&p<=m-v&&(u.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else o!==null&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),r!==null&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));a!==null&&(i=e.getPose(t.targetRaySpace,n),i===null&&r!==null&&(i=r),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(bi)))}return a!==null&&(a.visible=i!==null),o!==null&&(o.visible=r!==null),u!==null&&(u.visible=s!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new S3;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}const wi=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Ri=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class Ci{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const i=new m2,r=t.properties.get(i);r.__webglTexture=e.texture,(e.depthNear!=n.depthNear||e.depthFar!=n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new _0({vertexShader:wi,fragmentShader:Ri,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new E2(new E9(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Pi extends N0{constructor(t,e){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=1,u=null,c=null,f=null,p=null,m=null,v=null;const M=new Ci,d=e.getContextAttributes();let h=null,T=null;const E=[],A=[],F=new w1;let R=null;const b=new C2;b.layers.enable(1),b.viewport=new j1;const O=new C2;O.layers.enable(2),O.viewport=new j1;const t1=[b,O],_=new Ai;_.layers.enable(1),_.layers.enable(2);let S=null,V=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(k){let $=E[k];return $===void 0&&($=new i4,E[k]=$),$.getTargetRaySpace()},this.getControllerGrip=function(k){let $=E[k];return $===void 0&&($=new i4,E[k]=$),$.getGripSpace()},this.getHand=function(k){let $=E[k];return $===void 0&&($=new i4,E[k]=$),$.getHandSpace()};function z(k){const $=A.indexOf(k.inputSource);if($===-1)return;const p1=E[$];p1!==void 0&&(p1.update(k.inputSource,k.frame,u||s),p1.dispatchEvent({type:k.type,data:k.inputSource}))}function Y(){i.removeEventListener("select",z),i.removeEventListener("selectstart",z),i.removeEventListener("selectend",z),i.removeEventListener("squeeze",z),i.removeEventListener("squeezestart",z),i.removeEventListener("squeezeend",z),i.removeEventListener("end",Y),i.removeEventListener("inputsourceschange",j);for(let k=0;k<E.length;k++){const $=A[k];$!==null&&(A[k]=null,E[k].disconnect($))}S=null,V=null,M.reset(),t.setRenderTarget(h),m=null,p=null,f=null,i=null,T=null,X1.stop(),n.isPresenting=!1,t.setPixelRatio(R),t.setSize(F.width,F.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(k){r=k,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(k){a=k,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return u||s},this.setReferenceSpace=function(k){u=k},this.getBaseLayer=function(){return p!==null?p:m},this.getBinding=function(){return f},this.getFrame=function(){return v},this.getSession=function(){return i},this.setSession=async function(k){if(i=k,i!==null){if(h=t.getRenderTarget(),i.addEventListener("select",z),i.addEventListener("selectstart",z),i.addEventListener("selectend",z),i.addEventListener("squeeze",z),i.addEventListener("squeezestart",z),i.addEventListener("squeezeend",z),i.addEventListener("end",Y),i.addEventListener("inputsourceschange",j),d.xrCompatible!==!0&&await e.makeXRCompatible(),R=t.getPixelRatio(),t.getSize(F),i.renderState.layers===void 0){const $={antialias:d.antialias,alpha:!0,depth:d.depth,stencil:d.stencil,framebufferScaleFactor:r};m=new XRWebGLLayer(i,e,$),i.updateRenderState({baseLayer:m}),t.setPixelRatio(1),t.setSize(m.framebufferWidth,m.framebufferHeight,!1),T=new U0(m.framebufferWidth,m.framebufferHeight,{format:z2,type:n0,colorSpace:t.outputColorSpace,stencilBuffer:d.stencil})}else{let $=null,p1=null,u1=null;d.depth&&(u1=d.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,$=d.stencil?o3:n3,p1=d.stencil?a3:D0);const R1={colorFormat:e.RGBA8,depthFormat:u1,scaleFactor:r};f=new XRWebGLBinding(i,e),p=f.createProjectionLayer(R1),i.updateRenderState({layers:[p]}),t.setPixelRatio(1),t.setSize(p.textureWidth,p.textureHeight,!1),T=new U0(p.textureWidth,p.textureHeight,{format:z2,type:n0,depthTexture:new J5(p.textureWidth,p.textureHeight,p1,void 0,void 0,void 0,void 0,void 0,void 0,$),stencilBuffer:d.stencil,colorSpace:t.outputColorSpace,samples:d.antialias?4:0,resolveDepthBuffer:p.ignoreDepthValues===!1})}T.isXRRenderTarget=!0,this.setFoveation(o),u=null,s=await i.requestReferenceSpace(a),X1.setContext(i),X1.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return M.getDepthTexture()};function j(k){for(let $=0;$<k.removed.length;$++){const p1=k.removed[$],u1=A.indexOf(p1);u1>=0&&(A[u1]=null,E[u1].disconnect(p1))}for(let $=0;$<k.added.length;$++){const p1=k.added[$];let u1=A.indexOf(p1);if(u1===-1){for(let S1=0;S1<E.length;S1++)if(S1>=A.length){A.push(p1),u1=S1;break}else if(A[S1]===null){A[S1]=p1,u1=S1;break}if(u1===-1)break}const R1=E[u1];R1&&R1.connect(p1)}}const G=new L,K=new L;function H(k,$,p1){G.setFromMatrixPosition($.matrixWorld),K.setFromMatrixPosition(p1.matrixWorld);const u1=G.distanceTo(K),R1=$.projectionMatrix.elements,S1=p1.projectionMatrix.elements,I1=R1[14]/(R1[10]-1),q1=R1[14]/(R1[10]+1),N1=(R1[9]+1)/R1[5],w=(R1[9]-1)/R1[5],T2=(R1[8]-1)/R1[0],D1=(S1[8]+1)/S1[0],O1=I1*T2,y1=I1*D1,$1=u1/(-T2+D1),b1=$1*-T2;if($.matrixWorld.decompose(k.position,k.quaternion,k.scale),k.translateX(b1),k.translateZ($1),k.matrixWorld.compose(k.position,k.quaternion,k.scale),k.matrixWorldInverse.copy(k.matrixWorld).invert(),R1[10]===-1)k.projectionMatrix.copy($.projectionMatrix),k.projectionMatrixInverse.copy($.projectionMatrixInverse);else{const y=I1+$1,g=q1+$1,U=O1-b1,X=y1+(u1-b1),Z=N1*q1/g*y,W=w*q1/g*y;k.projectionMatrix.makePerspective(U,X,Z,W,y,g),k.projectionMatrixInverse.copy(k.projectionMatrix).invert()}}function a1(k,$){$===null?k.matrixWorld.copy(k.matrix):k.matrixWorld.multiplyMatrices($.matrixWorld,k.matrix),k.matrixWorldInverse.copy(k.matrixWorld).invert()}this.updateCamera=function(k){if(i===null)return;let $=k.near,p1=k.far;M.texture!==null&&(M.depthNear>0&&($=M.depthNear),M.depthFar>0&&(p1=M.depthFar)),_.near=O.near=b.near=$,_.far=O.far=b.far=p1,(S!==_.near||V!==_.far)&&(i.updateRenderState({depthNear:_.near,depthFar:_.far}),S=_.near,V=_.far);const u1=k.parent,R1=_.cameras;a1(_,u1);for(let S1=0;S1<R1.length;S1++)a1(R1[S1],u1);R1.length===2?H(_,b,O):_.projectionMatrix.copy(b.projectionMatrix),o1(k,_,u1)};function o1(k,$,p1){p1===null?k.matrix.copy($.matrixWorld):(k.matrix.copy(p1.matrixWorld),k.matrix.invert(),k.matrix.multiply($.matrixWorld)),k.matrix.decompose(k.position,k.quaternion,k.scale),k.updateMatrixWorld(!0),k.projectionMatrix.copy($.projectionMatrix),k.projectionMatrixInverse.copy($.projectionMatrixInverse),k.isPerspectiveCamera&&(k.fov=A3*2*Math.atan(1/k.projectionMatrix.elements[5]),k.zoom=1)}this.getCamera=function(){return _},this.getFoveation=function(){if(!(p===null&&m===null))return o},this.setFoveation=function(k){o=k,p!==null&&(p.fixedFoveation=k),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=k)},this.hasDepthSensing=function(){return M.texture!==null},this.getDepthSensingMesh=function(){return M.getMesh(_)};let _1=null;function z1(k,$){if(c=$.getViewerPose(u||s),v=$,c!==null){const p1=c.views;m!==null&&(t.setRenderTargetFramebuffer(T,m.framebuffer),t.setRenderTarget(T));let u1=!1;p1.length!==_.cameras.length&&(_.cameras.length=0,u1=!0);for(let S1=0;S1<p1.length;S1++){const I1=p1[S1];let q1=null;if(m!==null)q1=m.getViewport(I1);else{const w=f.getViewSubImage(p,I1);q1=w.viewport,S1===0&&(t.setRenderTargetTextures(T,w.colorTexture,p.ignoreDepthValues?void 0:w.depthStencilTexture),t.setRenderTarget(T))}let N1=t1[S1];N1===void 0&&(N1=new C2,N1.layers.enable(S1),N1.viewport=new j1,t1[S1]=N1),N1.matrix.fromArray(I1.transform.matrix),N1.matrix.decompose(N1.position,N1.quaternion,N1.scale),N1.projectionMatrix.fromArray(I1.projectionMatrix),N1.projectionMatrixInverse.copy(N1.projectionMatrix).invert(),N1.viewport.set(q1.x,q1.y,q1.width,q1.height),S1===0&&(_.matrix.copy(N1.matrix),_.matrix.decompose(_.position,_.quaternion,_.scale)),u1===!0&&_.cameras.push(N1)}const R1=i.enabledFeatures;if(R1&&R1.includes("depth-sensing")){const S1=f.getDepthInformation(p1[0]);S1&&S1.isValid&&S1.texture&&M.init(t,S1,i.renderState)}}for(let p1=0;p1<E.length;p1++){const u1=A[p1],R1=E[p1];u1!==null&&R1!==void 0&&R1.update(u1,$,u||s)}_1&&_1(k,$),$.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:$}),v=null}const X1=new $5;X1.setAnimationLoop(z1),this.setAnimationLoop=function(k){_1=k},this.dispose=function(){}}}const T0=new l0,Li=new t2;function Di(l,t){function e(d,h){d.matrixAutoUpdate===!0&&d.updateMatrix(),h.value.copy(d.matrix)}function n(d,h){h.color.getRGB(d.fogColor.value,K5(l)),h.isFog?(d.fogNear.value=h.near,d.fogFar.value=h.far):h.isFogExp2&&(d.fogDensity.value=h.density)}function i(d,h,T,E,A){h.isMeshBasicMaterial||h.isMeshLambertMaterial?r(d,h):h.isMeshToonMaterial?(r(d,h),f(d,h)):h.isMeshPhongMaterial?(r(d,h),c(d,h)):h.isMeshStandardMaterial?(r(d,h),p(d,h),h.isMeshPhysicalMaterial&&m(d,h,A)):h.isMeshMatcapMaterial?(r(d,h),v(d,h)):h.isMeshDepthMaterial?r(d,h):h.isMeshDistanceMaterial?(r(d,h),M(d,h)):h.isMeshNormalMaterial?r(d,h):h.isLineBasicMaterial?(s(d,h),h.isLineDashedMaterial&&a(d,h)):h.isPointsMaterial?o(d,h,T,E):h.isSpriteMaterial?u(d,h):h.isShadowMaterial?(d.color.value.copy(h.color),d.opacity.value=h.opacity):h.isShaderMaterial&&(h.uniformsNeedUpdate=!1)}function r(d,h){d.opacity.value=h.opacity,h.color&&d.diffuse.value.copy(h.color),h.emissive&&d.emissive.value.copy(h.emissive).multiplyScalar(h.emissiveIntensity),h.map&&(d.map.value=h.map,e(h.map,d.mapTransform)),h.alphaMap&&(d.alphaMap.value=h.alphaMap,e(h.alphaMap,d.alphaMapTransform)),h.bumpMap&&(d.bumpMap.value=h.bumpMap,e(h.bumpMap,d.bumpMapTransform),d.bumpScale.value=h.bumpScale,h.side===y2&&(d.bumpScale.value*=-1)),h.normalMap&&(d.normalMap.value=h.normalMap,e(h.normalMap,d.normalMapTransform),d.normalScale.value.copy(h.normalScale),h.side===y2&&d.normalScale.value.negate()),h.displacementMap&&(d.displacementMap.value=h.displacementMap,e(h.displacementMap,d.displacementMapTransform),d.displacementScale.value=h.displacementScale,d.displacementBias.value=h.displacementBias),h.emissiveMap&&(d.emissiveMap.value=h.emissiveMap,e(h.emissiveMap,d.emissiveMapTransform)),h.specularMap&&(d.specularMap.value=h.specularMap,e(h.specularMap,d.specularMapTransform)),h.alphaTest>0&&(d.alphaTest.value=h.alphaTest);const T=t.get(h),E=T.envMap,A=T.envMapRotation;E&&(d.envMap.value=E,T0.copy(A),T0.x*=-1,T0.y*=-1,T0.z*=-1,E.isCubeTexture&&E.isRenderTargetTexture===!1&&(T0.y*=-1,T0.z*=-1),d.envMapRotation.value.setFromMatrix4(Li.makeRotationFromEuler(T0)),d.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,d.reflectivity.value=h.reflectivity,d.ior.value=h.ior,d.refractionRatio.value=h.refractionRatio),h.lightMap&&(d.lightMap.value=h.lightMap,d.lightMapIntensity.value=h.lightMapIntensity,e(h.lightMap,d.lightMapTransform)),h.aoMap&&(d.aoMap.value=h.aoMap,d.aoMapIntensity.value=h.aoMapIntensity,e(h.aoMap,d.aoMapTransform))}function s(d,h){d.diffuse.value.copy(h.color),d.opacity.value=h.opacity,h.map&&(d.map.value=h.map,e(h.map,d.mapTransform))}function a(d,h){d.dashSize.value=h.dashSize,d.totalSize.value=h.dashSize+h.gapSize,d.scale.value=h.scale}function o(d,h,T,E){d.diffuse.value.copy(h.color),d.opacity.value=h.opacity,d.size.value=h.size*T,d.scale.value=E*.5,h.map&&(d.map.value=h.map,e(h.map,d.uvTransform)),h.alphaMap&&(d.alphaMap.value=h.alphaMap,e(h.alphaMap,d.alphaMapTransform)),h.alphaTest>0&&(d.alphaTest.value=h.alphaTest)}function u(d,h){d.diffuse.value.copy(h.color),d.opacity.value=h.opacity,d.rotation.value=h.rotation,h.map&&(d.map.value=h.map,e(h.map,d.mapTransform)),h.alphaMap&&(d.alphaMap.value=h.alphaMap,e(h.alphaMap,d.alphaMapTransform)),h.alphaTest>0&&(d.alphaTest.value=h.alphaTest)}function c(d,h){d.specular.value.copy(h.specular),d.shininess.value=Math.max(h.shininess,1e-4)}function f(d,h){h.gradientMap&&(d.gradientMap.value=h.gradientMap)}function p(d,h){d.metalness.value=h.metalness,h.metalnessMap&&(d.metalnessMap.value=h.metalnessMap,e(h.metalnessMap,d.metalnessMapTransform)),d.roughness.value=h.roughness,h.roughnessMap&&(d.roughnessMap.value=h.roughnessMap,e(h.roughnessMap,d.roughnessMapTransform)),h.envMap&&(d.envMapIntensity.value=h.envMapIntensity)}function m(d,h,T){d.ior.value=h.ior,h.sheen>0&&(d.sheenColor.value.copy(h.sheenColor).multiplyScalar(h.sheen),d.sheenRoughness.value=h.sheenRoughness,h.sheenColorMap&&(d.sheenColorMap.value=h.sheenColorMap,e(h.sheenColorMap,d.sheenColorMapTransform)),h.sheenRoughnessMap&&(d.sheenRoughnessMap.value=h.sheenRoughnessMap,e(h.sheenRoughnessMap,d.sheenRoughnessMapTransform))),h.clearcoat>0&&(d.clearcoat.value=h.clearcoat,d.clearcoatRoughness.value=h.clearcoatRoughness,h.clearcoatMap&&(d.clearcoatMap.value=h.clearcoatMap,e(h.clearcoatMap,d.clearcoatMapTransform)),h.clearcoatRoughnessMap&&(d.clearcoatRoughnessMap.value=h.clearcoatRoughnessMap,e(h.clearcoatRoughnessMap,d.clearcoatRoughnessMapTransform)),h.clearcoatNormalMap&&(d.clearcoatNormalMap.value=h.clearcoatNormalMap,e(h.clearcoatNormalMap,d.clearcoatNormalMapTransform),d.clearcoatNormalScale.value.copy(h.clearcoatNormalScale),h.side===y2&&d.clearcoatNormalScale.value.negate())),h.dispersion>0&&(d.dispersion.value=h.dispersion),h.iridescence>0&&(d.iridescence.value=h.iridescence,d.iridescenceIOR.value=h.iridescenceIOR,d.iridescenceThicknessMinimum.value=h.iridescenceThicknessRange[0],d.iridescenceThicknessMaximum.value=h.iridescenceThicknessRange[1],h.iridescenceMap&&(d.iridescenceMap.value=h.iridescenceMap,e(h.iridescenceMap,d.iridescenceMapTransform)),h.iridescenceThicknessMap&&(d.iridescenceThicknessMap.value=h.iridescenceThicknessMap,e(h.iridescenceThicknessMap,d.iridescenceThicknessMapTransform))),h.transmission>0&&(d.transmission.value=h.transmission,d.transmissionSamplerMap.value=T.texture,d.transmissionSamplerSize.value.set(T.width,T.height),h.transmissionMap&&(d.transmissionMap.value=h.transmissionMap,e(h.transmissionMap,d.transmissionMapTransform)),d.thickness.value=h.thickness,h.thicknessMap&&(d.thicknessMap.value=h.thicknessMap,e(h.thicknessMap,d.thicknessMapTransform)),d.attenuationDistance.value=h.attenuationDistance,d.attenuationColor.value.copy(h.attenuationColor)),h.anisotropy>0&&(d.anisotropyVector.value.set(h.anisotropy*Math.cos(h.anisotropyRotation),h.anisotropy*Math.sin(h.anisotropyRotation)),h.anisotropyMap&&(d.anisotropyMap.value=h.anisotropyMap,e(h.anisotropyMap,d.anisotropyMapTransform))),d.specularIntensity.value=h.specularIntensity,d.specularColor.value.copy(h.specularColor),h.specularColorMap&&(d.specularColorMap.value=h.specularColorMap,e(h.specularColorMap,d.specularColorMapTransform)),h.specularIntensityMap&&(d.specularIntensityMap.value=h.specularIntensityMap,e(h.specularIntensityMap,d.specularIntensityMapTransform))}function v(d,h){h.matcap&&(d.matcap.value=h.matcap)}function M(d,h){const T=t.get(h).light;d.referencePosition.value.setFromMatrixPosition(T.matrixWorld),d.nearDistance.value=T.shadow.camera.near,d.farDistance.value=T.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function Ui(l,t,e,n){let i={},r={},s=[];const a=l.getParameter(l.MAX_UNIFORM_BUFFER_BINDINGS);function o(T,E){const A=E.program;n.uniformBlockBinding(T,A)}function u(T,E){let A=i[T.id];A===void 0&&(v(T),A=c(T),i[T.id]=A,T.addEventListener("dispose",d));const F=E.program;n.updateUBOMapping(T,F);const R=t.render.frame;r[T.id]!==R&&(p(T),r[T.id]=R)}function c(T){const E=f();T.__bindingPointIndex=E;const A=l.createBuffer(),F=T.__size,R=T.usage;return l.bindBuffer(l.UNIFORM_BUFFER,A),l.bufferData(l.UNIFORM_BUFFER,F,R),l.bindBuffer(l.UNIFORM_BUFFER,null),l.bindBufferBase(l.UNIFORM_BUFFER,E,A),A}function f(){for(let T=0;T<a;T++)if(s.indexOf(T)===-1)return s.push(T),T;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function p(T){const E=i[T.id],A=T.uniforms,F=T.__cache;l.bindBuffer(l.UNIFORM_BUFFER,E);for(let R=0,b=A.length;R<b;R++){const O=Array.isArray(A[R])?A[R]:[A[R]];for(let t1=0,_=O.length;t1<_;t1++){const S=O[t1];if(m(S,R,t1,F)===!0){const V=S.__offset,z=Array.isArray(S.value)?S.value:[S.value];let Y=0;for(let j=0;j<z.length;j++){const G=z[j],K=M(G);typeof G=="number"||typeof G=="boolean"?(S.__data[0]=G,l.bufferSubData(l.UNIFORM_BUFFER,V+Y,S.__data)):G.isMatrix3?(S.__data[0]=G.elements[0],S.__data[1]=G.elements[1],S.__data[2]=G.elements[2],S.__data[3]=0,S.__data[4]=G.elements[3],S.__data[5]=G.elements[4],S.__data[6]=G.elements[5],S.__data[7]=0,S.__data[8]=G.elements[6],S.__data[9]=G.elements[7],S.__data[10]=G.elements[8],S.__data[11]=0):(G.toArray(S.__data,Y),Y+=K.storage/Float32Array.BYTES_PER_ELEMENT)}l.bufferSubData(l.UNIFORM_BUFFER,V,S.__data)}}}l.bindBuffer(l.UNIFORM_BUFFER,null)}function m(T,E,A,F){const R=T.value,b=E+"_"+A;if(F[b]===void 0)return typeof R=="number"||typeof R=="boolean"?F[b]=R:F[b]=R.clone(),!0;{const O=F[b];if(typeof R=="number"||typeof R=="boolean"){if(O!==R)return F[b]=R,!0}else if(O.equals(R)===!1)return O.copy(R),!0}return!1}function v(T){const E=T.uniforms;let A=0;const F=16;for(let b=0,O=E.length;b<O;b++){const t1=Array.isArray(E[b])?E[b]:[E[b]];for(let _=0,S=t1.length;_<S;_++){const V=t1[_],z=Array.isArray(V.value)?V.value:[V.value];for(let Y=0,j=z.length;Y<j;Y++){const G=z[Y],K=M(G),H=A%F,a1=H%K.boundary,o1=H+a1;A+=a1,o1!==0&&F-o1<K.storage&&(A+=F-o1),V.__data=new Float32Array(K.storage/Float32Array.BYTES_PER_ELEMENT),V.__offset=A,A+=K.storage}}}const R=A%F;return R>0&&(A+=F-R),T.__size=A,T.__cache={},this}function M(T){const E={boundary:0,storage:0};return typeof T=="number"||typeof T=="boolean"?(E.boundary=4,E.storage=4):T.isVector2?(E.boundary=8,E.storage=8):T.isVector3||T.isColor?(E.boundary=16,E.storage=12):T.isVector4?(E.boundary=16,E.storage=16):T.isMatrix3?(E.boundary=48,E.storage=48):T.isMatrix4?(E.boundary=64,E.storage=64):T.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",T),E}function d(T){const E=T.target;E.removeEventListener("dispose",d);const A=s.indexOf(E.__bindingPointIndex);s.splice(A,1),l.deleteBuffer(i[E.id]),delete i[E.id],delete r[E.id]}function h(){for(const T in i)l.deleteBuffer(i[T]);s=[],i={},r={}}return{bind:o,update:u,dispose:h}}class Ii{constructor(t={}){const{canvas:e=x7(),context:n=null,depth:i=!0,stencil:r=!1,alpha:s=!1,antialias:a=!1,premultipliedAlpha:o=!0,preserveDrawingBuffer:u=!1,powerPreference:c="default",failIfMajorPerformanceCaveat:f=!1}=t;this.isWebGLRenderer=!0;let p;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");p=n.getContextAttributes().alpha}else p=s;const m=new Uint32Array(4),v=new Int32Array(4);let M=null,d=null;const h=[],T=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=V2,this.toneMapping=p0,this.toneMappingExposure=1;const E=this;let A=!1,F=0,R=0,b=null,O=-1,t1=null;const _=new j1,S=new j1;let V=null;const z=new W1(0);let Y=0,j=e.width,G=e.height,K=1,H=null,a1=null;const o1=new j1(0,0,j,G),_1=new j1(0,0,j,G);let z1=!1;const X1=new o8;let k=!1,$=!1;const p1=new t2,u1=new t2,R1=new L,S1=new j1,I1={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let q1=!1;function N1(){return b===null?K:1}let w=n;function T2(x,P){return e.getContext(x,P)}try{const x={alpha:!0,depth:i,stencil:r,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:u,powerPreference:c,failIfMajorPerformanceCaveat:f};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${J4}`),e.addEventListener("webglcontextlost",q,!1),e.addEventListener("webglcontextrestored",l1,!1),e.addEventListener("webglcontextcreationerror",s1,!1),w===null){const P="webgl2";if(w=T2(P,x),w===null)throw T2(P)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(x){throw console.error("THREE.WebGLRenderer: "+x.message),x}let D1,O1,y1,$1,b1,y,g,U,X,Z,W,g1,n1,c1,B1,J,h1,T1,A1,d1,U1,C1,Z1,C;function r1(){D1=new zn(w),D1.init(),C1=new Ti(w,D1),O1=new Dn(w,D1,t,C1),y1=new Si(w),O1.reverseDepthBuffer&&y1.buffers.depth.setReversed(!0),$1=new Vn(w),b1=new si,y=new yi(w,D1,y1,b1,O1,C1,$1),g=new In(E),U=new Bn(E),X=new q7(w),Z1=new Pn(w,X),Z=new Hn(w,X,$1,Z1),W=new Wn(w,Z,X,$1),A1=new kn(w,O1,y),J=new Un(b1),g1=new ri(E,g,U,D1,O1,Z1,J),n1=new Di(E,b1),c1=new oi,B1=new pi(D1),T1=new Cn(E,g,U,y1,W,p,o),h1=new xi(E,W,O1),C=new Ui(w,$1,O1,y1),d1=new Ln(w,D1,$1),U1=new Gn(w,D1,$1),$1.programs=g1.programs,E.capabilities=O1,E.extensions=D1,E.properties=b1,E.renderLists=c1,E.shadowMap=h1,E.state=y1,E.info=$1}r1();const B=new Pi(E,w);this.xr=B,this.getContext=function(){return w},this.getContextAttributes=function(){return w.getContextAttributes()},this.forceContextLoss=function(){const x=D1.get("WEBGL_lose_context");x&&x.loseContext()},this.forceContextRestore=function(){const x=D1.get("WEBGL_lose_context");x&&x.restoreContext()},this.getPixelRatio=function(){return K},this.setPixelRatio=function(x){x!==void 0&&(K=x,this.setSize(j,G,!1))},this.getSize=function(x){return x.set(j,G)},this.setSize=function(x,P,I=!0){if(B.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}j=x,G=P,e.width=Math.floor(x*K),e.height=Math.floor(P*K),I===!0&&(e.style.width=x+"px",e.style.height=P+"px"),this.setViewport(0,0,x,P)},this.getDrawingBufferSize=function(x){return x.set(j*K,G*K).floor()},this.setDrawingBufferSize=function(x,P,I){j=x,G=P,K=I,e.width=Math.floor(x*I),e.height=Math.floor(P*I),this.setViewport(0,0,x,P)},this.getCurrentViewport=function(x){return x.copy(_)},this.getViewport=function(x){return x.copy(o1)},this.setViewport=function(x,P,I,N){x.isVector4?o1.set(x.x,x.y,x.z,x.w):o1.set(x,P,I,N),y1.viewport(_.copy(o1).multiplyScalar(K).round())},this.getScissor=function(x){return x.copy(_1)},this.setScissor=function(x,P,I,N){x.isVector4?_1.set(x.x,x.y,x.z,x.w):_1.set(x,P,I,N),y1.scissor(S.copy(_1).multiplyScalar(K).round())},this.getScissorTest=function(){return z1},this.setScissorTest=function(x){y1.setScissorTest(z1=x)},this.setOpaqueSort=function(x){H=x},this.setTransparentSort=function(x){a1=x},this.getClearColor=function(x){return x.copy(T1.getClearColor())},this.setClearColor=function(){T1.setClearColor.apply(T1,arguments)},this.getClearAlpha=function(){return T1.getClearAlpha()},this.setClearAlpha=function(){T1.setClearAlpha.apply(T1,arguments)},this.clear=function(x=!0,P=!0,I=!0){let N=0;if(x){let D=!1;if(b!==null){const Q=b.texture.format;D=Q===i8||Q===l8||Q===n8}if(D){const Q=b.texture.type,i1=Q===n0||Q===D0||Q===T3||Q===a3||Q===t8||Q===e8,f1=T1.getClearColor(),m1=T1.getClearAlpha(),M1=f1.r,E1=f1.g,v1=f1.b;i1?(m[0]=M1,m[1]=E1,m[2]=v1,m[3]=m1,w.clearBufferuiv(w.COLOR,0,m)):(v[0]=M1,v[1]=E1,v[2]=v1,v[3]=m1,w.clearBufferiv(w.COLOR,0,v))}else N|=w.COLOR_BUFFER_BIT}P&&(N|=w.DEPTH_BUFFER_BIT,w.clearDepth(this.capabilities.reverseDepthBuffer?0:1)),I&&(N|=w.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),w.clear(N)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",q,!1),e.removeEventListener("webglcontextrestored",l1,!1),e.removeEventListener("webglcontextcreationerror",s1,!1),c1.dispose(),B1.dispose(),b1.dispose(),g.dispose(),U.dispose(),W.dispose(),Z1.dispose(),C.dispose(),g1.dispose(),B.dispose(),B.removeEventListener("sessionstart",p8),B.removeEventListener("sessionend",m8),v0.stop()};function q(x){x.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),A=!0}function l1(){console.log("THREE.WebGLRenderer: Context Restored."),A=!1;const x=$1.autoReset,P=h1.enabled,I=h1.autoUpdate,N=h1.needsUpdate,D=h1.type;r1(),$1.autoReset=x,h1.enabled=P,h1.autoUpdate=I,h1.needsUpdate=N,h1.type=D}function s1(x){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",x.statusMessage)}function F1(x){const P=x.target;P.removeEventListener("dispose",F1),l2(P)}function l2(x){v2(x),b1.remove(x)}function v2(x){const P=b1.get(x).programs;P!==void 0&&(P.forEach(function(I){g1.releaseProgram(I)}),x.isShaderMaterial&&g1.releaseShaderCache(x))}this.renderBufferDirect=function(x,P,I,N,D,Q){P===null&&(P=I1);const i1=D.isMesh&&D.matrixWorld.determinant()<0,f1=c6(x,P,I,N,D);y1.setMaterial(N,i1);let m1=I.index,M1=1;if(N.wireframe===!0){if(m1=Z.getWireframeAttribute(I),m1===void 0)return;M1=2}const E1=I.drawRange,v1=I.attributes.position;let Y1=E1.start*M1,J1=(E1.start+E1.count)*M1;Q!==null&&(Y1=Math.max(Y1,Q.start*M1),J1=Math.min(J1,(Q.start+Q.count)*M1)),m1!==null?(Y1=Math.max(Y1,0),J1=Math.min(J1,m1.count)):v1!=null&&(Y1=Math.max(Y1,0),J1=Math.min(J1,v1.count));const e2=J1-Y1;if(e2<0||e2===1/0)return;Z1.setup(D,N,f1,I,m1);let A2,G1=d1;if(m1!==null&&(A2=X.get(m1),G1=U1,G1.setIndex(A2)),D.isMesh)N.wireframe===!0?(y1.setLineWidth(N.wireframeLinewidth*N1()),G1.setMode(w.LINES)):G1.setMode(w.TRIANGLES);else if(D.isLine){let x1=N.linewidth;x1===void 0&&(x1=1),y1.setLineWidth(x1*N1()),D.isLineSegments?G1.setMode(w.LINES):D.isLineLoop?G1.setMode(w.LINE_LOOP):G1.setMode(w.LINE_STRIP)}else D.isPoints?G1.setMode(w.POINTS):D.isSprite&&G1.setMode(w.TRIANGLES);if(D.isBatchedMesh)if(D._multiDrawInstances!==null)G1.renderMultiDrawInstances(D._multiDrawStarts,D._multiDrawCounts,D._multiDrawCount,D._multiDrawInstances);else if(D1.get("WEBGL_multi_draw"))G1.renderMultiDraw(D._multiDrawStarts,D._multiDrawCounts,D._multiDrawCount);else{const x1=D._multiDrawStarts,u2=D._multiDrawCounts,V1=D._multiDrawCount,U2=m1?X.get(m1).bytesPerElement:1,F0=b1.get(N).currentProgram.getUniforms();for(let b2=0;b2<V1;b2++)F0.setValue(w,"_gl_DrawID",b2),G1.render(x1[b2]/U2,u2[b2])}else if(D.isInstancedMesh)G1.renderInstances(Y1,e2,D.count);else if(I.isInstancedBufferGeometry){const x1=I._maxInstanceCount!==void 0?I._maxInstanceCount:1/0,u2=Math.min(I.instanceCount,x1);G1.renderInstances(Y1,e2,u2)}else G1.render(Y1,e2)};function H1(x,P,I){x.transparent===!0&&x.side===W2&&x.forceSinglePass===!1?(x.side=y2,x.needsUpdate=!0,I3(x,P,I),x.side=m0,x.needsUpdate=!0,I3(x,P,I),x.side=W2):I3(x,P,I)}this.compile=function(x,P,I=null){I===null&&(I=x),d=B1.get(I),d.init(P),T.push(d),I.traverseVisible(function(D){D.isLight&&D.layers.test(P.layers)&&(d.pushLight(D),D.castShadow&&d.pushShadow(D))}),x!==I&&x.traverseVisible(function(D){D.isLight&&D.layers.test(P.layers)&&(d.pushLight(D),D.castShadow&&d.pushShadow(D))}),d.setupLights();const N=new Set;return x.traverse(function(D){if(!(D.isMesh||D.isPoints||D.isLine||D.isSprite))return;const Q=D.material;if(Q)if(Array.isArray(Q))for(let i1=0;i1<Q.length;i1++){const f1=Q[i1];H1(f1,I,D),N.add(f1)}else H1(Q,I,D),N.add(Q)}),T.pop(),d=null,N},this.compileAsync=function(x,P,I=null){const N=this.compile(x,P,I);return new Promise(D=>{function Q(){if(N.forEach(function(i1){b1.get(i1).currentProgram.isReady()&&N.delete(i1)}),N.size===0){D(x);return}setTimeout(Q,10)}D1.get("KHR_parallel_shader_compile")!==null?Q():setTimeout(Q,10)})};let x2=null;function q2(x){x2&&x2(x)}function p8(){v0.stop()}function m8(){v0.start()}const v0=new $5;v0.setAnimationLoop(q2),typeof self<"u"&&v0.setContext(self),this.setAnimationLoop=function(x){x2=x,B.setAnimationLoop(x),x===null?v0.stop():v0.start()},B.addEventListener("sessionstart",p8),B.addEventListener("sessionend",m8),this.render=function(x,P){if(P!==void 0&&P.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(A===!0)return;if(x.matrixWorldAutoUpdate===!0&&x.updateMatrixWorld(),P.parent===null&&P.matrixWorldAutoUpdate===!0&&P.updateMatrixWorld(),B.enabled===!0&&B.isPresenting===!0&&(B.cameraAutoUpdate===!0&&B.updateCamera(P),P=B.getCamera()),x.isScene===!0&&x.onBeforeRender(E,x,P,b),d=B1.get(x,T.length),d.init(P),T.push(d),u1.multiplyMatrices(P.projectionMatrix,P.matrixWorldInverse),X1.setFromProjectionMatrix(u1),$=this.localClippingEnabled,k=J.init(this.clippingPlanes,$),M=c1.get(x,h.length),M.init(),h.push(M),B.enabled===!0&&B.isPresenting===!0){const Q=E.xr.getDepthSensingMesh();Q!==null&&b9(Q,P,-1/0,E.sortObjects)}b9(x,P,0,E.sortObjects),M.finish(),E.sortObjects===!0&&M.sort(H,a1),q1=B.enabled===!1||B.isPresenting===!1||B.hasDepthSensing()===!1,q1&&T1.addToRenderList(M,x),this.info.render.frame++,k===!0&&J.beginShadows();const I=d.state.shadowsArray;h1.render(I,x,P),k===!0&&J.endShadows(),this.info.autoReset===!0&&this.info.reset();const N=M.opaque,D=M.transmissive;if(d.setupLights(),P.isArrayCamera){const Q=P.cameras;if(D.length>0)for(let i1=0,f1=Q.length;i1<f1;i1++){const m1=Q[i1];g8(N,D,x,m1)}q1&&T1.render(x);for(let i1=0,f1=Q.length;i1<f1;i1++){const m1=Q[i1];_8(M,x,m1,m1.viewport)}}else D.length>0&&g8(N,D,x,P),q1&&T1.render(x),_8(M,x,P);b!==null&&(y.updateMultisampleRenderTarget(b),y.updateRenderTargetMipmap(b)),x.isScene===!0&&x.onAfterRender(E,x,P),Z1.resetDefaultState(),O=-1,t1=null,T.pop(),T.length>0?(d=T[T.length-1],k===!0&&J.setGlobalState(E.clippingPlanes,d.state.camera)):d=null,h.pop(),h.length>0?M=h[h.length-1]:M=null};function b9(x,P,I,N){if(x.visible===!1)return;if(x.layers.test(P.layers)){if(x.isGroup)I=x.renderOrder;else if(x.isLOD)x.autoUpdate===!0&&x.update(P);else if(x.isLight)d.pushLight(x),x.castShadow&&d.pushShadow(x);else if(x.isSprite){if(!x.frustumCulled||X1.intersectsSprite(x)){N&&S1.setFromMatrixPosition(x.matrixWorld).applyMatrix4(u1);const i1=W.update(x),f1=x.material;f1.visible&&M.push(x,i1,f1,I,S1.z,null)}}else if((x.isMesh||x.isLine||x.isPoints)&&(!x.frustumCulled||X1.intersectsObject(x))){const i1=W.update(x),f1=x.material;if(N&&(x.boundingSphere!==void 0?(x.boundingSphere===null&&x.computeBoundingSphere(),S1.copy(x.boundingSphere.center)):(i1.boundingSphere===null&&i1.computeBoundingSphere(),S1.copy(i1.boundingSphere.center)),S1.applyMatrix4(x.matrixWorld).applyMatrix4(u1)),Array.isArray(f1)){const m1=i1.groups;for(let M1=0,E1=m1.length;M1<E1;M1++){const v1=m1[M1],Y1=f1[v1.materialIndex];Y1&&Y1.visible&&M.push(x,i1,Y1,I,S1.z,v1)}}else f1.visible&&M.push(x,i1,f1,I,S1.z,null)}}const Q=x.children;for(let i1=0,f1=Q.length;i1<f1;i1++)b9(Q[i1],P,I,N)}function _8(x,P,I,N){const D=x.opaque,Q=x.transmissive,i1=x.transparent;d.setupLightsView(I),k===!0&&J.setGlobalState(E.clippingPlanes,I),N&&y1.viewport(_.copy(N)),D.length>0&&U3(D,P,I),Q.length>0&&U3(Q,P,I),i1.length>0&&U3(i1,P,I),y1.buffers.depth.setTest(!0),y1.buffers.depth.setMask(!0),y1.buffers.color.setMask(!0),y1.setPolygonOffset(!1)}function g8(x,P,I,N){if((I.isScene===!0?I.overrideMaterial:null)!==null)return;d.state.transmissionRenderTarget[N.id]===void 0&&(d.state.transmissionRenderTarget[N.id]=new U0(1,1,{generateMipmaps:!0,type:D1.has("EXT_color_buffer_half_float")||D1.has("EXT_color_buffer_float")?C3:n0,minFilter:C0,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:k1.workingColorSpace}));const Q=d.state.transmissionRenderTarget[N.id],i1=N.viewport||_;Q.setSize(i1.z,i1.w);const f1=E.getRenderTarget();E.setRenderTarget(Q),E.getClearColor(z),Y=E.getClearAlpha(),Y<1&&E.setClearColor(16777215,.5),E.clear(),q1&&T1.render(I);const m1=E.toneMapping;E.toneMapping=p0;const M1=N.viewport;if(N.viewport!==void 0&&(N.viewport=void 0),d.setupLightsView(N),k===!0&&J.setGlobalState(E.clippingPlanes,N),U3(x,I,N),y.updateMultisampleRenderTarget(Q),y.updateRenderTargetMipmap(Q),D1.has("WEBGL_multisampled_render_to_texture")===!1){let E1=!1;for(let v1=0,Y1=P.length;v1<Y1;v1++){const J1=P[v1],e2=J1.object,A2=J1.geometry,G1=J1.material,x1=J1.group;if(G1.side===W2&&e2.layers.test(N.layers)){const u2=G1.side;G1.side=y2,G1.needsUpdate=!0,v8(e2,I,N,A2,G1,x1),G1.side=u2,G1.needsUpdate=!0,E1=!0}}E1===!0&&(y.updateMultisampleRenderTarget(Q),y.updateRenderTargetMipmap(Q))}E.setRenderTarget(f1),E.setClearColor(z,Y),M1!==void 0&&(N.viewport=M1),E.toneMapping=m1}function U3(x,P,I){const N=P.isScene===!0?P.overrideMaterial:null;for(let D=0,Q=x.length;D<Q;D++){const i1=x[D],f1=i1.object,m1=i1.geometry,M1=N===null?i1.material:N,E1=i1.group;f1.layers.test(I.layers)&&v8(f1,P,I,m1,M1,E1)}}function v8(x,P,I,N,D,Q){x.onBeforeRender(E,P,I,N,D,Q),x.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse,x.matrixWorld),x.normalMatrix.getNormalMatrix(x.modelViewMatrix),D.onBeforeRender(E,P,I,N,x,Q),D.transparent===!0&&D.side===W2&&D.forceSinglePass===!1?(D.side=y2,D.needsUpdate=!0,E.renderBufferDirect(I,P,N,D,x,Q),D.side=m0,D.needsUpdate=!0,E.renderBufferDirect(I,P,N,D,x,Q),D.side=W2):E.renderBufferDirect(I,P,N,D,x,Q),x.onAfterRender(E,P,I,N,D,Q)}function I3(x,P,I){P.isScene!==!0&&(P=I1);const N=b1.get(x),D=d.state.lights,Q=d.state.shadowsArray,i1=D.state.version,f1=g1.getParameters(x,D.state,Q,P,I),m1=g1.getProgramCacheKey(f1);let M1=N.programs;N.environment=x.isMeshStandardMaterial?P.environment:null,N.fog=P.fog,N.envMap=(x.isMeshStandardMaterial?U:g).get(x.envMap||N.environment),N.envMapRotation=N.environment!==null&&x.envMap===null?P.environmentRotation:x.envMapRotation,M1===void 0&&(x.addEventListener("dispose",F1),M1=new Map,N.programs=M1);let E1=M1.get(m1);if(E1!==void 0){if(N.currentProgram===E1&&N.lightsStateVersion===i1)return M8(x,f1),E1}else f1.uniforms=g1.getUniforms(x),x.onBeforeCompile(f1,E),E1=g1.acquireProgram(f1,m1),M1.set(m1,E1),N.uniforms=f1.uniforms;const v1=N.uniforms;return(!x.isShaderMaterial&&!x.isRawShaderMaterial||x.clipping===!0)&&(v1.clippingPlanes=J.uniform),M8(x,f1),N.needsLights=d6(x),N.lightsStateVersion=i1,N.needsLights&&(v1.ambientLightColor.value=D.state.ambient,v1.lightProbe.value=D.state.probe,v1.directionalLights.value=D.state.directional,v1.directionalLightShadows.value=D.state.directionalShadow,v1.spotLights.value=D.state.spot,v1.spotLightShadows.value=D.state.spotShadow,v1.rectAreaLights.value=D.state.rectArea,v1.ltc_1.value=D.state.rectAreaLTC1,v1.ltc_2.value=D.state.rectAreaLTC2,v1.pointLights.value=D.state.point,v1.pointLightShadows.value=D.state.pointShadow,v1.hemisphereLights.value=D.state.hemi,v1.directionalShadowMap.value=D.state.directionalShadowMap,v1.directionalShadowMatrix.value=D.state.directionalShadowMatrix,v1.spotShadowMap.value=D.state.spotShadowMap,v1.spotLightMatrix.value=D.state.spotLightMatrix,v1.spotLightMap.value=D.state.spotLightMap,v1.pointShadowMap.value=D.state.pointShadowMap,v1.pointShadowMatrix.value=D.state.pointShadowMatrix),N.currentProgram=E1,N.uniformsList=null,E1}function x8(x){if(x.uniformsList===null){const P=x.currentProgram.getUniforms();x.uniformsList=h9.seqWithValue(P.seq,x.uniforms)}return x.uniformsList}function M8(x,P){const I=b1.get(x);I.outputColorSpace=P.outputColorSpace,I.batching=P.batching,I.batchingColor=P.batchingColor,I.instancing=P.instancing,I.instancingColor=P.instancingColor,I.instancingMorph=P.instancingMorph,I.skinning=P.skinning,I.morphTargets=P.morphTargets,I.morphNormals=P.morphNormals,I.morphColors=P.morphColors,I.morphTargetsCount=P.morphTargetsCount,I.numClippingPlanes=P.numClippingPlanes,I.numIntersection=P.numClipIntersection,I.vertexAlphas=P.vertexAlphas,I.vertexTangents=P.vertexTangents,I.toneMapping=P.toneMapping}function c6(x,P,I,N,D){P.isScene!==!0&&(P=I1),y.resetTextureUnits();const Q=P.fog,i1=N.isMeshStandardMaterial?P.environment:null,f1=b===null?E.outputColorSpace:b.isXRRenderTarget===!0?b.texture.colorSpace:g0,m1=(N.isMeshStandardMaterial?U:g).get(N.envMap||i1),M1=N.vertexColors===!0&&!!I.attributes.color&&I.attributes.color.itemSize===4,E1=!!I.attributes.tangent&&(!!N.normalMap||N.anisotropy>0),v1=!!I.morphAttributes.position,Y1=!!I.morphAttributes.normal,J1=!!I.morphAttributes.color;let e2=p0;N.toneMapped&&(b===null||b.isXRRenderTarget===!0)&&(e2=E.toneMapping);const A2=I.morphAttributes.position||I.morphAttributes.normal||I.morphAttributes.color,G1=A2!==void 0?A2.length:0,x1=b1.get(N),u2=d.state.lights;if(k===!0&&($===!0||x!==t1)){const P2=x===t1&&N.id===O;J.setState(N,x,P2)}let V1=!1;N.version===x1.__version?(x1.needsLights&&x1.lightsStateVersion!==u2.state.version||x1.outputColorSpace!==f1||D.isBatchedMesh&&x1.batching===!1||!D.isBatchedMesh&&x1.batching===!0||D.isBatchedMesh&&x1.batchingColor===!0&&D.colorTexture===null||D.isBatchedMesh&&x1.batchingColor===!1&&D.colorTexture!==null||D.isInstancedMesh&&x1.instancing===!1||!D.isInstancedMesh&&x1.instancing===!0||D.isSkinnedMesh&&x1.skinning===!1||!D.isSkinnedMesh&&x1.skinning===!0||D.isInstancedMesh&&x1.instancingColor===!0&&D.instanceColor===null||D.isInstancedMesh&&x1.instancingColor===!1&&D.instanceColor!==null||D.isInstancedMesh&&x1.instancingMorph===!0&&D.morphTexture===null||D.isInstancedMesh&&x1.instancingMorph===!1&&D.morphTexture!==null||x1.envMap!==m1||N.fog===!0&&x1.fog!==Q||x1.numClippingPlanes!==void 0&&(x1.numClippingPlanes!==J.numPlanes||x1.numIntersection!==J.numIntersection)||x1.vertexAlphas!==M1||x1.vertexTangents!==E1||x1.morphTargets!==v1||x1.morphNormals!==Y1||x1.morphColors!==J1||x1.toneMapping!==e2||x1.morphTargetsCount!==G1)&&(V1=!0):(V1=!0,x1.__version=N.version);let U2=x1.currentProgram;V1===!0&&(U2=I3(N,P,D));let F0=!1,b2=!1,w9=!1;const n2=U2.getUniforms(),i0=x1.uniforms;if(y1.useProgram(U2.program)&&(F0=!0,b2=!0,w9=!0),N.id!==O&&(O=N.id,b2=!0),F0||t1!==x){O1.reverseDepthBuffer?(p1.copy(x.projectionMatrix),S7(p1),E7(p1),n2.setValue(w,"projectionMatrix",p1)):n2.setValue(w,"projectionMatrix",x.projectionMatrix),n2.setValue(w,"viewMatrix",x.matrixWorldInverse);const P2=n2.map.cameraPosition;P2!==void 0&&P2.setValue(w,R1.setFromMatrixPosition(x.matrixWorld)),O1.logarithmicDepthBuffer&&n2.setValue(w,"logDepthBufFC",2/(Math.log(x.far+1)/Math.LN2)),(N.isMeshPhongMaterial||N.isMeshToonMaterial||N.isMeshLambertMaterial||N.isMeshBasicMaterial||N.isMeshStandardMaterial||N.isShaderMaterial)&&n2.setValue(w,"isOrthographic",x.isOrthographicCamera===!0),t1!==x&&(t1=x,b2=!0,w9=!0)}if(D.isSkinnedMesh){n2.setOptional(w,D,"bindMatrix"),n2.setOptional(w,D,"bindMatrixInverse");const P2=D.skeleton;P2&&(P2.boneTexture===null&&P2.computeBoneTexture(),n2.setValue(w,"boneTexture",P2.boneTexture,y))}D.isBatchedMesh&&(n2.setOptional(w,D,"batchingTexture"),n2.setValue(w,"batchingTexture",D._matricesTexture,y),n2.setOptional(w,D,"batchingIdTexture"),n2.setValue(w,"batchingIdTexture",D._indirectTexture,y),n2.setOptional(w,D,"batchingColorTexture"),D._colorsTexture!==null&&n2.setValue(w,"batchingColorTexture",D._colorsTexture,y));const R9=I.morphAttributes;if((R9.position!==void 0||R9.normal!==void 0||R9.color!==void 0)&&A1.update(D,I,U2),(b2||x1.receiveShadow!==D.receiveShadow)&&(x1.receiveShadow=D.receiveShadow,n2.setValue(w,"receiveShadow",D.receiveShadow)),N.isMeshGouraudMaterial&&N.envMap!==null&&(i0.envMap.value=m1,i0.flipEnvMap.value=m1.isCubeTexture&&m1.isRenderTargetTexture===!1?-1:1),N.isMeshStandardMaterial&&N.envMap===null&&P.environment!==null&&(i0.envMapIntensity.value=P.environmentIntensity),b2&&(n2.setValue(w,"toneMappingExposure",E.toneMappingExposure),x1.needsLights&&h6(i0,w9),Q&&N.fog===!0&&n1.refreshFogUniforms(i0,Q),n1.refreshMaterialUniforms(i0,N,K,G,d.state.transmissionRenderTarget[x.id]),h9.upload(w,x8(x1),i0,y)),N.isShaderMaterial&&N.uniformsNeedUpdate===!0&&(h9.upload(w,x8(x1),i0,y),N.uniformsNeedUpdate=!1),N.isSpriteMaterial&&n2.setValue(w,"center",D.center),n2.setValue(w,"modelViewMatrix",D.modelViewMatrix),n2.setValue(w,"normalMatrix",D.normalMatrix),n2.setValue(w,"modelMatrix",D.matrixWorld),N.isShaderMaterial||N.isRawShaderMaterial){const P2=N.uniformsGroups;for(let C9=0,f6=P2.length;C9<f6;C9++){const S8=P2[C9];C.update(S8,U2),C.bind(S8,U2)}}return U2}function h6(x,P){x.ambientLightColor.needsUpdate=P,x.lightProbe.needsUpdate=P,x.directionalLights.needsUpdate=P,x.directionalLightShadows.needsUpdate=P,x.pointLights.needsUpdate=P,x.pointLightShadows.needsUpdate=P,x.spotLights.needsUpdate=P,x.spotLightShadows.needsUpdate=P,x.rectAreaLights.needsUpdate=P,x.hemisphereLights.needsUpdate=P}function d6(x){return x.isMeshLambertMaterial||x.isMeshToonMaterial||x.isMeshPhongMaterial||x.isMeshStandardMaterial||x.isShadowMaterial||x.isShaderMaterial&&x.lights===!0}this.getActiveCubeFace=function(){return F},this.getActiveMipmapLevel=function(){return R},this.getRenderTarget=function(){return b},this.setRenderTargetTextures=function(x,P,I){b1.get(x.texture).__webglTexture=P,b1.get(x.depthTexture).__webglTexture=I;const N=b1.get(x);N.__hasExternalTextures=!0,N.__autoAllocateDepthBuffer=I===void 0,N.__autoAllocateDepthBuffer||D1.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),N.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(x,P){const I=b1.get(x);I.__webglFramebuffer=P,I.__useDefaultFramebuffer=P===void 0},this.setRenderTarget=function(x,P=0,I=0){b=x,F=P,R=I;let N=!0,D=null,Q=!1,i1=!1;if(x){const m1=b1.get(x);if(m1.__useDefaultFramebuffer!==void 0)y1.bindFramebuffer(w.FRAMEBUFFER,null),N=!1;else if(m1.__webglFramebuffer===void 0)y.setupRenderTarget(x);else if(m1.__hasExternalTextures)y.rebindTextures(x,b1.get(x.texture).__webglTexture,b1.get(x.depthTexture).__webglTexture);else if(x.depthBuffer){const v1=x.depthTexture;if(m1.__boundDepthTexture!==v1){if(v1!==null&&b1.has(v1)&&(x.width!==v1.image.width||x.height!==v1.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");y.setupDepthRenderbuffer(x)}}const M1=x.texture;(M1.isData3DTexture||M1.isDataArrayTexture||M1.isCompressedArrayTexture)&&(i1=!0);const E1=b1.get(x).__webglFramebuffer;x.isWebGLCubeRenderTarget?(Array.isArray(E1[P])?D=E1[P][I]:D=E1[P],Q=!0):x.samples>0&&y.useMultisampledRTT(x)===!1?D=b1.get(x).__webglMultisampledFramebuffer:Array.isArray(E1)?D=E1[I]:D=E1,_.copy(x.viewport),S.copy(x.scissor),V=x.scissorTest}else _.copy(o1).multiplyScalar(K).floor(),S.copy(_1).multiplyScalar(K).floor(),V=z1;if(y1.bindFramebuffer(w.FRAMEBUFFER,D)&&N&&y1.drawBuffers(x,D),y1.viewport(_),y1.scissor(S),y1.setScissorTest(V),Q){const m1=b1.get(x.texture);w.framebufferTexture2D(w.FRAMEBUFFER,w.COLOR_ATTACHMENT0,w.TEXTURE_CUBE_MAP_POSITIVE_X+P,m1.__webglTexture,I)}else if(i1){const m1=b1.get(x.texture),M1=P||0;w.framebufferTextureLayer(w.FRAMEBUFFER,w.COLOR_ATTACHMENT0,m1.__webglTexture,I||0,M1)}O=-1},this.readRenderTargetPixels=function(x,P,I,N,D,Q,i1){if(!(x&&x.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let f1=b1.get(x).__webglFramebuffer;if(x.isWebGLCubeRenderTarget&&i1!==void 0&&(f1=f1[i1]),f1){y1.bindFramebuffer(w.FRAMEBUFFER,f1);try{const m1=x.texture,M1=m1.format,E1=m1.type;if(!O1.textureFormatReadable(M1)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!O1.textureTypeReadable(E1)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}P>=0&&P<=x.width-N&&I>=0&&I<=x.height-D&&w.readPixels(P,I,N,D,C1.convert(M1),C1.convert(E1),Q)}finally{const m1=b!==null?b1.get(b).__webglFramebuffer:null;y1.bindFramebuffer(w.FRAMEBUFFER,m1)}}},this.readRenderTargetPixelsAsync=async function(x,P,I,N,D,Q,i1){if(!(x&&x.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let f1=b1.get(x).__webglFramebuffer;if(x.isWebGLCubeRenderTarget&&i1!==void 0&&(f1=f1[i1]),f1){const m1=x.texture,M1=m1.format,E1=m1.type;if(!O1.textureFormatReadable(M1))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!O1.textureTypeReadable(E1))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(P>=0&&P<=x.width-N&&I>=0&&I<=x.height-D){y1.bindFramebuffer(w.FRAMEBUFFER,f1);const v1=w.createBuffer();w.bindBuffer(w.PIXEL_PACK_BUFFER,v1),w.bufferData(w.PIXEL_PACK_BUFFER,Q.byteLength,w.STREAM_READ),w.readPixels(P,I,N,D,C1.convert(M1),C1.convert(E1),0);const Y1=b!==null?b1.get(b).__webglFramebuffer:null;y1.bindFramebuffer(w.FRAMEBUFFER,Y1);const J1=w.fenceSync(w.SYNC_GPU_COMMANDS_COMPLETE,0);return w.flush(),await M7(w,J1,4),w.bindBuffer(w.PIXEL_PACK_BUFFER,v1),w.getBufferSubData(w.PIXEL_PACK_BUFFER,0,Q),w.deleteBuffer(v1),w.deleteSync(J1),Q}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(x,P=null,I=0){x.isTexture!==!0&&(c9("WebGLRenderer: copyFramebufferToTexture function signature has changed."),P=arguments[0]||null,x=arguments[1]);const N=Math.pow(2,-I),D=Math.floor(x.image.width*N),Q=Math.floor(x.image.height*N),i1=P!==null?P.x:0,f1=P!==null?P.y:0;y.setTexture2D(x,0),w.copyTexSubImage2D(w.TEXTURE_2D,I,0,0,i1,f1,D,Q),y1.unbindTexture()},this.copyTextureToTexture=function(x,P,I=null,N=null,D=0){x.isTexture!==!0&&(c9("WebGLRenderer: copyTextureToTexture function signature has changed."),N=arguments[0]||null,x=arguments[1],P=arguments[2],D=arguments[3]||0,I=null);let Q,i1,f1,m1,M1,E1;I!==null?(Q=I.max.x-I.min.x,i1=I.max.y-I.min.y,f1=I.min.x,m1=I.min.y):(Q=x.image.width,i1=x.image.height,f1=0,m1=0),N!==null?(M1=N.x,E1=N.y):(M1=0,E1=0);const v1=C1.convert(P.format),Y1=C1.convert(P.type);y.setTexture2D(P,0),w.pixelStorei(w.UNPACK_FLIP_Y_WEBGL,P.flipY),w.pixelStorei(w.UNPACK_PREMULTIPLY_ALPHA_WEBGL,P.premultiplyAlpha),w.pixelStorei(w.UNPACK_ALIGNMENT,P.unpackAlignment);const J1=w.getParameter(w.UNPACK_ROW_LENGTH),e2=w.getParameter(w.UNPACK_IMAGE_HEIGHT),A2=w.getParameter(w.UNPACK_SKIP_PIXELS),G1=w.getParameter(w.UNPACK_SKIP_ROWS),x1=w.getParameter(w.UNPACK_SKIP_IMAGES),u2=x.isCompressedTexture?x.mipmaps[D]:x.image;w.pixelStorei(w.UNPACK_ROW_LENGTH,u2.width),w.pixelStorei(w.UNPACK_IMAGE_HEIGHT,u2.height),w.pixelStorei(w.UNPACK_SKIP_PIXELS,f1),w.pixelStorei(w.UNPACK_SKIP_ROWS,m1),x.isDataTexture?w.texSubImage2D(w.TEXTURE_2D,D,M1,E1,Q,i1,v1,Y1,u2.data):x.isCompressedTexture?w.compressedTexSubImage2D(w.TEXTURE_2D,D,M1,E1,u2.width,u2.height,v1,u2.data):w.texSubImage2D(w.TEXTURE_2D,D,M1,E1,Q,i1,v1,Y1,u2),w.pixelStorei(w.UNPACK_ROW_LENGTH,J1),w.pixelStorei(w.UNPACK_IMAGE_HEIGHT,e2),w.pixelStorei(w.UNPACK_SKIP_PIXELS,A2),w.pixelStorei(w.UNPACK_SKIP_ROWS,G1),w.pixelStorei(w.UNPACK_SKIP_IMAGES,x1),D===0&&P.generateMipmaps&&w.generateMipmap(w.TEXTURE_2D),y1.unbindTexture()},this.copyTextureToTexture3D=function(x,P,I=null,N=null,D=0){x.isTexture!==!0&&(c9("WebGLRenderer: copyTextureToTexture3D function signature has changed."),I=arguments[0]||null,N=arguments[1]||null,x=arguments[2],P=arguments[3],D=arguments[4]||0);let Q,i1,f1,m1,M1,E1,v1,Y1,J1;const e2=x.isCompressedTexture?x.mipmaps[D]:x.image;I!==null?(Q=I.max.x-I.min.x,i1=I.max.y-I.min.y,f1=I.max.z-I.min.z,m1=I.min.x,M1=I.min.y,E1=I.min.z):(Q=e2.width,i1=e2.height,f1=e2.depth,m1=0,M1=0,E1=0),N!==null?(v1=N.x,Y1=N.y,J1=N.z):(v1=0,Y1=0,J1=0);const A2=C1.convert(P.format),G1=C1.convert(P.type);let x1;if(P.isData3DTexture)y.setTexture3D(P,0),x1=w.TEXTURE_3D;else if(P.isDataArrayTexture||P.isCompressedArrayTexture)y.setTexture2DArray(P,0),x1=w.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}w.pixelStorei(w.UNPACK_FLIP_Y_WEBGL,P.flipY),w.pixelStorei(w.UNPACK_PREMULTIPLY_ALPHA_WEBGL,P.premultiplyAlpha),w.pixelStorei(w.UNPACK_ALIGNMENT,P.unpackAlignment);const u2=w.getParameter(w.UNPACK_ROW_LENGTH),V1=w.getParameter(w.UNPACK_IMAGE_HEIGHT),U2=w.getParameter(w.UNPACK_SKIP_PIXELS),F0=w.getParameter(w.UNPACK_SKIP_ROWS),b2=w.getParameter(w.UNPACK_SKIP_IMAGES);w.pixelStorei(w.UNPACK_ROW_LENGTH,e2.width),w.pixelStorei(w.UNPACK_IMAGE_HEIGHT,e2.height),w.pixelStorei(w.UNPACK_SKIP_PIXELS,m1),w.pixelStorei(w.UNPACK_SKIP_ROWS,M1),w.pixelStorei(w.UNPACK_SKIP_IMAGES,E1),x.isDataTexture||x.isData3DTexture?w.texSubImage3D(x1,D,v1,Y1,J1,Q,i1,f1,A2,G1,e2.data):P.isCompressedArrayTexture?w.compressedTexSubImage3D(x1,D,v1,Y1,J1,Q,i1,f1,A2,e2.data):w.texSubImage3D(x1,D,v1,Y1,J1,Q,i1,f1,A2,G1,e2),w.pixelStorei(w.UNPACK_ROW_LENGTH,u2),w.pixelStorei(w.UNPACK_IMAGE_HEIGHT,V1),w.pixelStorei(w.UNPACK_SKIP_PIXELS,U2),w.pixelStorei(w.UNPACK_SKIP_ROWS,F0),w.pixelStorei(w.UNPACK_SKIP_IMAGES,b2),D===0&&P.generateMipmaps&&w.generateMipmap(x1),y1.unbindTexture()},this.initRenderTarget=function(x){b1.get(x).__webglFramebuffer===void 0&&y.setupRenderTarget(x)},this.initTexture=function(x){x.isCubeTexture?y.setTextureCube(x,0):x.isData3DTexture?y.setTexture3D(x,0):x.isDataArrayTexture||x.isCompressedArrayTexture?y.setTexture2DArray(x,0):y.setTexture2D(x,0),y1.unbindTexture()},this.resetState=function(){F=0,R=0,b=null,y1.reset(),Z1.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return e0}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===r8?"display-p3":"srgb",e.unpackColorSpace=k1.workingColorSpace===x9?"display-p3":"srgb"}}class Ni extends _2{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new l0,this.environmentIntensity=1,this.environmentRotation=new l0,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class l6 extends L3{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new W1(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const _9=new L,g9=new L,g5=new t2,v3=new S9,n9=new M9,r4=new L,v5=new L;class Fi extends _2{constructor(t=new G2,e=new l6){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,n=[0];for(let i=1,r=e.count;i<r;i++)_9.fromBufferAttribute(e,i-1),g9.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=_9.distanceTo(g9);t.setAttribute("lineDistance",new g2(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),n9.copy(n.boundingSphere),n9.applyMatrix4(i),n9.radius+=r,t.ray.intersectsSphere(n9)===!1)return;g5.copy(i).invert(),v3.copy(t.ray).applyMatrix4(g5);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,u=this.isLineSegments?2:1,c=n.index,p=n.attributes.position;if(c!==null){const m=Math.max(0,s.start),v=Math.min(c.count,s.start+s.count);for(let M=m,d=v-1;M<d;M+=u){const h=c.getX(M),T=c.getX(M+1),E=l9(this,t,v3,o,h,T);E&&e.push(E)}if(this.isLineLoop){const M=c.getX(v-1),d=c.getX(m),h=l9(this,t,v3,o,M,d);h&&e.push(h)}}else{const m=Math.max(0,s.start),v=Math.min(p.count,s.start+s.count);for(let M=m,d=v-1;M<d;M+=u){const h=l9(this,t,v3,o,M,M+1);h&&e.push(h)}if(this.isLineLoop){const M=l9(this,t,v3,o,v-1,m);M&&e.push(M)}}}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const a=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}function l9(l,t,e,n,i,r){const s=l.geometry.attributes.position;if(_9.fromBufferAttribute(s,i),g9.fromBufferAttribute(s,r),e.distanceSqToSegment(_9,g9,r4,v5)>n)return;r4.applyMatrix4(l.matrixWorld);const o=t.ray.origin.distanceTo(r4);if(!(o<t.near||o>t.far))return{distance:o,point:v5.clone().applyMatrix4(l.matrixWorld),index:i,face:null,faceIndex:null,barycoord:null,object:l}}class c8 extends G2{constructor(t=.5,e=1,n=32,i=1,r=0,s=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s},n=Math.max(3,n),i=Math.max(1,i);const a=[],o=[],u=[],c=[];let f=t;const p=(e-t)/i,m=new L,v=new w1;for(let M=0;M<=i;M++){for(let d=0;d<=n;d++){const h=r+d/n*s;m.x=f*Math.cos(h),m.y=f*Math.sin(h),o.push(m.x,m.y,m.z),u.push(0,0,1),v.x=(m.x/e+1)/2,v.y=(m.y/e+1)/2,c.push(v.x,v.y)}f+=p}for(let M=0;M<i;M++){const d=M*(n+1);for(let h=0;h<n;h++){const T=h+d,E=T,A=T+n+1,F=T+n+2,R=T+1;a.push(E,A,R),a.push(A,F,R)}}this.setIndex(a),this.setAttribute("position",new g2(o,3)),this.setAttribute("normal",new g2(u,3)),this.setAttribute("uv",new g2(c,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new c8(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class c3 extends G2{constructor(t=1,e=32,n=16,i=0,r=Math.PI*2,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(s+a,Math.PI);let u=0;const c=[],f=new L,p=new L,m=[],v=[],M=[],d=[];for(let h=0;h<=n;h++){const T=[],E=h/n;let A=0;h===0&&s===0?A=.5/e:h===n&&o===Math.PI&&(A=-.5/e);for(let F=0;F<=e;F++){const R=F/e;f.x=-t*Math.cos(i+R*r)*Math.sin(s+E*a),f.y=t*Math.cos(s+E*a),f.z=t*Math.sin(i+R*r)*Math.sin(s+E*a),v.push(f.x,f.y,f.z),p.copy(f).normalize(),M.push(p.x,p.y,p.z),d.push(R+A,1-E),T.push(u++)}c.push(T)}for(let h=0;h<n;h++)for(let T=0;T<e;T++){const E=c[h][T+1],A=c[h][T],F=c[h+1][T],R=c[h+1][T+1];(h!==0||s>0)&&m.push(E,A,R),(h!==n-1||o<Math.PI)&&m.push(A,F,R)}this.setIndex(m),this.setAttribute("position",new g2(v,3)),this.setAttribute("normal",new g2(M,3)),this.setAttribute("uv",new g2(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new c3(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}const x5={enabled:!1,files:{},add:function(l,t){this.enabled!==!1&&(this.files[l]=t)},get:function(l){if(this.enabled!==!1)return this.files[l]},remove:function(l){delete this.files[l]},clear:function(){this.files={}}};class Oi{constructor(t,e,n){const i=this;let r=!1,s=0,a=0,o;const u=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(c){a++,r===!1&&i.onStart!==void 0&&i.onStart(c,s,a),r=!0},this.itemEnd=function(c){s++,i.onProgress!==void 0&&i.onProgress(c,s,a),s===a&&(r=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(c){i.onError!==void 0&&i.onError(c)},this.resolveURL=function(c){return o?o(c):c},this.setURLModifier=function(c){return o=c,this},this.addHandler=function(c,f){return u.push(c,f),this},this.removeHandler=function(c){const f=u.indexOf(c);return f!==-1&&u.splice(f,2),this},this.getHandler=function(c){for(let f=0,p=u.length;f<p;f+=2){const m=u[f],v=u[f+1];if(m.global&&(m.lastIndex=0),m.test(c))return v}return null}}}const Bi=new Oi;class h8{constructor(t){this.manager=t!==void 0?t:Bi,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise(function(i,r){n.load(t,i,e,r)})}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}h8.DEFAULT_MATERIAL_NAME="__DEFAULT";class zi extends h8{constructor(t){super(t)}load(t,e,n,i){this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=x5.get(t);if(s!==void 0)return r.manager.itemStart(t),setTimeout(function(){e&&e(s),r.manager.itemEnd(t)},0),s;const a=b3("img");function o(){c(),x5.add(t,this),e&&e(this),r.manager.itemEnd(t)}function u(f){c(),i&&i(f),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",u,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",u,!1),t.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class Hi extends h8{constructor(t){super(t)}load(t,e,n,i){const r=new m2,s=new zi(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,function(a){r.image=a,r.needsUpdate=!0,e!==void 0&&e(r)},n,i),r}}class i6 extends _2{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new W1(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}const s4=new t2,M5=new L,S5=new L;class Gi{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new w1(512,512),this.map=null,this.mapPass=null,this.matrix=new t2,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new o8,this._frameExtents=new w1(1,1),this._viewportCount=1,this._viewports=[new j1(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;M5.setFromMatrixPosition(t.matrixWorld),e.position.copy(M5),S5.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(S5),e.updateMatrixWorld(),s4.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(s4),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(s4)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}const E5=new t2,x3=new L,a4=new L;class Vi extends Gi{constructor(){super(new C2(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new w1(4,2),this._viewportCount=6,this._viewports=[new j1(2,1,1,1),new j1(0,1,1,1),new j1(3,1,1,1),new j1(1,1,1,1),new j1(3,0,1,1),new j1(1,0,1,1)],this._cubeDirections=[new L(1,0,0),new L(-1,0,0),new L(0,0,1),new L(0,0,-1),new L(0,1,0),new L(0,-1,0)],this._cubeUps=[new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,0,1),new L(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),x3.setFromMatrixPosition(t.matrixWorld),n.position.copy(x3),a4.copy(n.position),a4.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(a4),n.updateMatrixWorld(),i.makeTranslation(-x3.x,-x3.y,-x3.z),E5.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(E5)}}class ki extends i6{constructor(t,e,n=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Vi}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class Wi extends i6{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}const y5=new t2;class Xi{constructor(t,e,n=0,i=1/0){this.ray=new S9(t,e),this.near=n,this.far=i,this.camera=null,this.layers=new a8,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}setFromXRController(t){return y5.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(y5),this}intersectObject(t,e=!0,n=[]){return j4(t,this,n,e),n.sort(T5),n}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)j4(t[i],this,n,e);return n.sort(T5),n}}function T5(l,t){return l.distance-t.distance}function j4(l,t,e,n){let i=!0;if(l.layers.test(t.layers)&&l.raycast(t,e)===!1&&(i=!1),i===!0&&n===!0){const r=l.children;for(let s=0,a=r.length;s<a;s++)j4(r[s],t,e,!0)}}class A5{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(d2(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class Yi extends N0{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:J4}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=J4);const b5={type:"change"},d8={type:"start"},r6={type:"end"},i9=new S9,w5=new h0,qi=Math.cos(70*v7.DEG2RAD),r2=new L,M2=2*Math.PI,K1={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},o4=1e-6;class Ki extends Yi{constructor(t,e=null){super(t,e),this.state=K1.NONE,this.enabled=!0,this.target=new L,this.cursor=new L,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:t3.ROTATE,MIDDLE:t3.DOLLY,RIGHT:t3.PAN},this.touches={ONE:J0.ROTATE,TWO:J0.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new L,this._lastQuaternion=new I0,this._lastTargetPosition=new L,this._quat=new I0().setFromUnitVectors(t.up,new L(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new A5,this._sphericalDelta=new A5,this._scale=1,this._panOffset=new L,this._rotateStart=new w1,this._rotateEnd=new w1,this._rotateDelta=new w1,this._panStart=new w1,this._panEnd=new w1,this._panDelta=new w1,this._dollyStart=new w1,this._dollyEnd=new w1,this._dollyDelta=new w1,this._dollyDirection=new L,this._mouse=new w1,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=Zi.bind(this),this._onPointerDown=ji.bind(this),this._onPointerUp=$i.bind(this),this._onContextMenu=ir.bind(this),this._onMouseWheel=tr.bind(this),this._onKeyDown=er.bind(this),this._onTouchStart=nr.bind(this),this._onTouchMove=lr.bind(this),this._onMouseDown=Ji.bind(this),this._onMouseMove=Qi.bind(this),this._interceptControlDown=rr.bind(this),this._interceptControlUp=sr.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(b5),this.update(),this.state=K1.NONE}update(t=null){const e=this.object.position;r2.copy(e).sub(this.target),r2.applyQuaternion(this._quat),this._spherical.setFromVector3(r2),this.autoRotate&&this.state===K1.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=M2:n>Math.PI&&(n-=M2),i<-Math.PI?i+=M2:i>Math.PI&&(i-=M2),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const s=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=s!=this._spherical.radius}if(r2.setFromSpherical(this._spherical),r2.applyQuaternion(this._quatInverse),e.copy(this.target).add(r2),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let s=null;if(this.object.isPerspectiveCamera){const a=r2.length();s=this._clampDistance(a*this._scale);const o=a-s;this.object.position.addScaledVector(this._dollyDirection,o),this.object.updateMatrixWorld(),r=!!o}else if(this.object.isOrthographicCamera){const a=new L(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=o!==this.object.zoom;const u=new L(this._mouse.x,this._mouse.y,0);u.unproject(this.object),this.object.position.sub(u).add(a),this.object.updateMatrixWorld(),s=r2.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;s!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(s).add(this.object.position):(i9.origin.copy(this.object.position),i9.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(i9.direction))<qi?this.object.lookAt(this.target):(w5.setFromNormalAndCoplanarPoint(this.object.up,this.target),i9.intersectPlane(w5,this.target))))}else if(this.object.isOrthographicCamera){const s=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),s!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,r||this._lastPosition.distanceToSquared(this.object.position)>o4||8*(1-this._lastQuaternion.dot(this.object.quaternion))>o4||this._lastTargetPosition.distanceToSquared(this.target)>o4?(this.dispatchEvent(b5),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?M2/60*this.autoRotateSpeed*t:M2/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){r2.setFromMatrixColumn(e,0),r2.multiplyScalar(-t),this._panOffset.add(r2)}_panUp(t,e){this.screenSpacePanning===!0?r2.setFromMatrixColumn(e,1):(r2.setFromMatrixColumn(e,0),r2.crossVectors(this.object.up,r2)),r2.multiplyScalar(t),this._panOffset.add(r2)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;r2.copy(i).sub(this.target);let r=r2.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*r/n.clientHeight,this.object.matrix),this._panUp(2*e*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=t-n.left,r=e-n.top,s=n.width,a=n.height;this._mouse.x=i/s*2-1,this._mouse.y=-(r/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(M2*this._rotateDelta.x/e.clientHeight),this._rotateUp(M2*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(M2*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(-M2*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(M2*this.rotateSpeed/this.domElement.clientHeight):this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(-M2*this.rotateSpeed/this.domElement.clientHeight):this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panStart.set(n,i)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,r=Math.sqrt(n*n+i*i);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),i=.5*(t.pageX+n.x),r=.5*(t.pageY+n.y);this._rotateEnd.set(i,r)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(M2*this._rotateDelta.x/e.clientHeight),this._rotateUp(M2*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,r=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const s=(t.pageX+e.x)*.5,a=(t.pageY+e.y)*.5;this._updateZoomParameters(s,a)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new w1,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function ji(l){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(l.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(l)&&(this._addPointer(l),l.pointerType==="touch"?this._onTouchStart(l):this._onMouseDown(l)))}function Zi(l){this.enabled!==!1&&(l.pointerType==="touch"?this._onTouchMove(l):this._onMouseMove(l))}function $i(l){switch(this._removePointer(l),this._pointers.length){case 0:this.domElement.releasePointerCapture(l.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(r6),this.state=K1.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function Ji(l){let t;switch(l.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case t3.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(l),this.state=K1.DOLLY;break;case t3.ROTATE:if(l.ctrlKey||l.metaKey||l.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(l),this.state=K1.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(l),this.state=K1.ROTATE}break;case t3.PAN:if(l.ctrlKey||l.metaKey||l.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(l),this.state=K1.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(l),this.state=K1.PAN}break;default:this.state=K1.NONE}this.state!==K1.NONE&&this.dispatchEvent(d8)}function Qi(l){switch(this.state){case K1.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(l);break;case K1.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(l);break;case K1.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(l);break}}function tr(l){this.enabled===!1||this.enableZoom===!1||this.state!==K1.NONE||(l.preventDefault(),this.dispatchEvent(d8),this._handleMouseWheel(this._customWheelEvent(l)),this.dispatchEvent(r6))}function er(l){this.enabled===!1||this.enablePan===!1||this._handleKeyDown(l)}function nr(l){switch(this._trackPointer(l),this._pointers.length){case 1:switch(this.touches.ONE){case J0.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(l),this.state=K1.TOUCH_ROTATE;break;case J0.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(l),this.state=K1.TOUCH_PAN;break;default:this.state=K1.NONE}break;case 2:switch(this.touches.TWO){case J0.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(l),this.state=K1.TOUCH_DOLLY_PAN;break;case J0.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(l),this.state=K1.TOUCH_DOLLY_ROTATE;break;default:this.state=K1.NONE}break;default:this.state=K1.NONE}this.state!==K1.NONE&&this.dispatchEvent(d8)}function lr(l){switch(this._trackPointer(l),this.state){case K1.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(l),this.update();break;case K1.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(l),this.update();break;case K1.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(l),this.update();break;case K1.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(l),this.update();break;default:this.state=K1.NONE}}function ir(l){this.enabled!==!1&&l.preventDefault()}function rr(l){l.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function sr(l){l.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const ar={data:[["Icarus",".8269521475242672","1.07804000683721","22.80351024536095","87.95309627755429","31.43364433510509","160.8608829324126",".8805454082166947","1.0"],["Cerberus",".4668257518165209","1.079959701561532","16.10134164314868","212.8877890620571","325.2922264020259","328.3875246860753",".8781986165331452","1.2"],["Aten",".1829158478537729",".966976895083976","18.93487390938056","108.5298126430354","148.0647559360261","338.0301895530932","1.036525350334651","1.1"],["Bacchus",".349428270186775","1.077982427638589","9.435129841249811","33.04025622766178","55.33823808489866","242.5509886506656",".8806159591477909","1.024"],["Khufu",".4685275424500192",".9895291222763277","9.915847778355038","152.4040698667692","55.08988544745781","359.8545460345918","1.00129305428314","0.7"],["Amun",".2805943276745582",".9740047079976669","23.35639399587074","358.6025010175954","359.4160740020573","226.5653133301835","1.025327226413819","3.341"],["Cruithne",".5148388147846379",".9977748062980861","19.801736194117","126.1905995517553","43.88125245556373","308.7978645706501",".9889065947978969","2.071"],["Vishnu",".4440523058791362","1.059564963747586","11.16883305266782","157.8904309077271","296.7019120830915","260.4034791009847",".9036758787583044","0.42"],["Xanthus",".2501267318221249","1.041957699662233","14.14405281328359","23.94678122718655","333.8284662125162","354.4990642513926",".9266781894792125","1.3"],["Asclepius",".3569674282971136","1.022602009379887","4.917735561894951","180.2012457802919","255.3754532170636","212.1158581762165",".9531123813217353",null],["Castalia",".4832122542749795","1.063076936870774","8.884712837378066","325.5093202671403","121.4403934118936","324.1133402455709",".8992015137772007","1.4"],["Sekhmet",".2964054009429591",".9474640604699007","48.96723982073335","58.53054092414101","37.42193753298229","199.1287803594328","1.068710204348425","0.935"],[null,".2801908238372478",".9863944332370315","14.17950488426332","216.2576192018225","34.47295841498075","25.89478654862724","1.006069898024065",null],[null,".4060825765513908",".9286129670226593","4.714923594056005","311.8880519250802","82.68297125958205","269.9162018349539","1.101417463625263","0.55"],["Talos",".8267819691350574","1.081486305948581","23.22108901230214","161.2842711888959","8.385945171496592","277.5632313380207",".8763398015452269",null],["Izhdubar",".2662235446110434","1.00681680298701","63.46669795050696","56.55756124823969","132.1991738160036","106.8190723605975",".9756148259060015",null],["Tomaiyowit",".3557776445113008","1.07985663336355","10.31080256604286","234.38758045","289.5194337090397","323.6061950954892",".8783243505970819","0.738"],["YORP",".230003515336909","1.005894439156579","1.599428423871442","278.1902804069551","278.9987853498196","99.35918670832136",".976957031480949",null],[null,".224527481206283","1.099800286523882","30.39166686142046","193.8271535354515","353.554916902187","206.4510519741566",".8545418394042837","0.461"],[null,".2646812568609613",".914778477660854","1.303178120607643","178.0806911998296","15.01293736012795","195.9178393217813","1.126497329543883","0.918"],[null,".5397301073762164","1.09107787886934","3.56041776556119","108.593307890574","284.5126801431248","196.9290924408588",".8648094921719442",null],[null,".7199704017058612",".9909617097206905","22.68731784795952","351.8425643985772","151.1616502605183","66.66001991070627",".9991225547176663",null],[null,".379851721926421",".961596580318381","17.13228403370558","245.8550869668583","243.8162364169295","352.3847330117438","1.045236840725781",null],[null,".3442570470707598","1.057032894961699","25.15253851294569","236.2068893229984","255.5664508514895","54.5732449809841",".9069248872537261","1.650"],[null,".3452087521176684",".9977027167399806","33.17976025291689","18.32709016991466","234.2321086299536","117.0817141824244",".9890137777181994",null],[null,".3111467812473703","1.008393004918105","5.359258562059685","124.304142720114","235.5748765732273","312.1855240915592",".9733282696310477","0.451"],[null,".4147724385851098",".9680451456814002","18.10853027387326","124.838983635693","215.6002300228313","76.04489341270146","1.034810094643273",null],[null,".5952337250151654",".9539548533223805","17.81184865121742","114.252878029796","194.9870747540972","314.2886216298915","1.057821381612051","0.912"],[null,".2700716688267786","1.061483701896216","21.90261071689633","202.8315908987198","329.3648738164443","243.2981071845769",".9012267593051696","0.760"],[null,".3511584196138048",".9078902118301743","13.60394397584902","75.68498701766499","202.7004976573456","157.891875964784","1.139341910313276","0.882"],["Torifune",".2192370696974636","1.032312893835112","4.807776765316152","75.44790350662883","179.398868561099","124.7628329533956",".9396952815808478",null],["Apophis",".1911496057614814",".9223819788122343","3.340993241446215","203.9041887697427","126.6724287481343","227.7638937211989","1.112596937012332","0.34"],[null,".8169043451999253",".9143163476275047","32.53700992719232","237.2860183495892","281.6725966737627","35.83672999211306","1.12735149893316","1.946"],["Selqet",".3463184166027035",".9375100066185601","12.7778866495702","259.9223970113547","203.8251992276935","195.0160549630198","1.085775920610629",null],[null,".2931990640455081","1.00395269567764","5.236691359187089","25.50189389679917","280.8672982619117","52.66404911993897",".979792698296751",null],[null,".298066358035024","1.001619289377575","21.51546807514706","60.85648153677454","225.3713853073667","57.87927729528221",".983218529093953",null],[null,".3333687280897306","1.033668185131643","7.918287141397678","353.6660591162193","271.9278341967373","115.8872634285658",".9378477690418868",null],[null,".4816194374866956",".9618983140162302","19.02931139069199","12.81237071569613","199.1055731167372","256.1460322617384","1.04474506559987",null],[null,".1767945283755973",".9799101580094867","6.875366119835022","8.66400019167032","331.7914695387821","278.8925147492582","1.016072469578448",null],[null,".4275372017526423",".9762429136256533","2.467229881418507","81.33697794118521","272.6462928940813","241.6992994254531","1.021803138391552","0.239"],[null,".5665726659911747",".9215999006474601","30.13924449924588","262.8941143375487","25.3546954725227","329.6258063831558","1.114013477442162",null],[null,".7245132400003155","1.086984597261667","34.03826208997811","38.83841541880279","308.1135650714638","251.1137202101929",".8696990360808422",null],[null,".322329951555262","1.01368829464609","30.10112263246004","174.6677523840766","173.3918019147289","261.0099680230118",".9657115519113184",null],[null,".529019635139551",".9920839697008823","22.55083451959049","40.80741253820519","8.321317814425273","1.941796396243996",".9974277010579086","0.303"],[null,".1869887536999424","1.085347181953341","62.09973121032228",".9872164317532766","104.9617924153702","174.1024576801968",".8716678929234614",null],[null,".6557400048893007",".9682994002064162","36.25375004375493","208.852441995549","43.92953181300646","29.67830526751543","1.034402543202804",null],[null,".2716323182081749",".9078779112848779","7.249322615817658","315.1948168254478","336.5533320636146","146.5310865822897","1.139365065256365","0.272"],[null,".4556750800474128",".9297460104192523","28.57980300101187","52.87692217399398","278.0182646716495","337.3090528781058","1.099404698603525","1.646"],[null,".7807807434980298",".9111263961946289","7.768601036357906","69.1955202620087","213.7466019110558","219.5080816187666","1.133277146095393","0.510"],[null,".4907188644102231","1.083648531868199","11.57551908433243","247.7686781910783","258.1975467408519","119.7252830966767",".8737182424452911",null],[null,".4504933838643735","1.05840321956567","16.17580747566486","159.5717281152681","191.3511276043459","181.3742402889907",".9051641511983264",null],[null,".4547364646434692","1.09656966621901","19.28513526817208","29.58120941771267","318.6534312536859","201.2909080761303",".8583209871966261",null],[null,".2838461106573574",".9931155585309026","23.75358115632797","175.2252443563113","349.7803664606172","345.8860434483977",".9958740026675231",null],[null,".3448981417771925",".9325638011955375","26.79730746909772","183.9181852549772","35.86145651556053","86.99392582358308","1.09442560045929",null],[null,".5709114485489502","1.087802194738921","2.132608289225146","217.8185575771183","278.8476568376504","279.5275154769959",".8687187152355402",null],[null,".4365131335684403","1.081607122776918","17.33854661594855","202.3129811205765","346.7905836195873","281.1751073558121",".8761929733165003",null],[null,".1238228745263183",".946651220930934","22.32298818072701","331.1177883624877","46.07030436581292","31.49226112969195","1.070086967519174",null],[null,".575236970207472","1.092327638123387","6.496266958117961","341.1487111704861","46.02264208817724","348.4580907781846",".8633257416576113",null],[null,".2033001235648616","1.086683264816533","11.50040799128526","212.835239980148","43.94852689776083","279.033461738893",".8700608066799611",null],[null,".2790638262249698",".9879631348548485","4.668518391554202","342.901382711863","56.20821373855837","79.77032093756428","1.003674671764368",null],[null,".1359367024567792","1.001265650458709","13.65288014087917","38.4135956712752","279.4796925302481","63.62773529757725",".9837394723180531","0.163"],[null,".2833364508364142",".9812973361505366","34.83283548984917","23.5150646366004","205.5268805637967","324.4813503183714","1.013918725901948",null],[null,".5835923789677807","1.08585629313151","17.27858094938522","208.0781631818302","61.73806956624022","111.2393518469466",".871054933570775",null],[null,".3501032787101208","1.05501883698792","1.972137778278292","299.4980220484517","24.06176733307634","32.71903262657393",".9095231405489691","1.196"],[null,".7990985632538894","1.053321708134899","45.11512720159406","88.5895130497268","299.2288357796552","316.5010071851409",".9117221831751593","2.039"],[null,".1353843333727981",".9596316832315568","29.99994437769055","329.7821771712332","347.0223264595063","88.85592189652982","1.048448750787134",null],[null,".226629793895062","1.07481218620307","10.06084624851387","228.1177779475405","75.97433639614486","182.1068080607339",".8845149977786252",null],[null,".1520526909633284",".9590259120222356","21.61570337920148","288.0161602659898","297.650427408966","207.0922005337292","1.049442290705555",null],[null,".1186178063449724","1.039133823567198","8.709735639609724","53.85389556027035","301.9527771554435","92.09819313478863",".9304581666301627","0.423"],[null,".2353699616601391",".9338490252984351","6.499633955586251","326.965662134489","300.5728022894472","33.11133548115574","1.092167047866006",null],[null,".1212534968605902",".9891198135436603","2.56078668587493","40.76107610130592","226.4622060071551","228.1633416120671","1.001914637808335",null],[null,".2742539575525832",".9137024857048706","36.2856674946994","109.0584425512487","346.8897892234839","352.2076305169824","1.128487789560319","1.075"],[null,".4121606021827295",".9136375786729576","5.211330355371485","205.0489689805906","211.329667832393","90.00694189988819","1.128608047464939",null],[null,".6774223351840475","1.054562069387704","16.96567347740051","112.3579922060819","2.501336971206554","269.255829451575",".9101141238061811",null],[null,".2820867727923272","1.052761746159182","20.01944539018577","212.1923144648089","357.4038012472613","177.2937939253083",".9124496948438158","0.657"],[null,".6158736446506566","1.095176098063462","2.560888022832699","4.302672037249833","218.5778790878548","241.1453672921532",".8599597773734772",null],[null,".1966499825245738","1.083449813814596","7.625699427864816","171.1090482408553","35.78808403705902","321.0575405047141",".873958629513416","0.302"],[null,".3212720144905665",".9375761996545739","5.42791627914814","178.0347253916152","125.7698466435096","294.5188875448168","1.085660938698591","0.344"],[null,".6042143510818982",".9441942410382707","20.66777743189091","22.08538318084407","339.9844003669456","96.19604474513739","1.074266550045697","0.344"],[null,".4771787224056071","1.083919005544806","37.03175884764946","295.2744701250122","104.9841860818191","234.7269594943036",".87339123040668","2.914"],[null,".49293094982703","1.018515587503276","35.55323280971825","337.7406585582914","254.4466151191787","12.43671234729355",".9588541539961685","0.630"],[null,".5178419596564401","1.049913339673572","46.87883365521456","315.7644698648734","285.5868120086541","83.26195944643381",".9161654152552098",null],[null,".3973008670591817","1.08946002262186","7.163904278807721","73.76666842487118","180.7062981099834","202.7000651527646",".866736579969502","0.533"],[null,".6325094865485474","1.001146901960814","2.637853302333432","19.2919317688482","200.2513731485232","53.5623082191962",".9839145031477425",null],[null,".3329139201946371",".9832724607510102","27.55366395845274","99.82731383345924","159.9657486702719","243.7949064260425","1.010865233785167","0.761"],[null,".2614799570355915","1.046147201855106","13.47370679305087","104.4913350145646","294.3694354975991","26.87205486708467",".9211171687790838","0.785"],[null,".6598336125113782","1.040103019232824","1.643789179995904","210.536376947818","111.9506096081795","235.3141310281843",".9291579311340815","0.562"],[null,".2373641820622551","1.010555883703831","9.843216049514929","138.1137128417905","74.13395298048624","83.29979140766829",".9702051406632786",null],[null,".3774067534469937","1.001416896083067","7.104849128036988","179.4650763056679","170.7818813483389","43.25233497971843",".983516617071734",null],[null,".263811018155971",".9855281817820652","9.540884459502433","232.5279277752324","212.6638955805933","56.80226667822023","1.007396650027349",null],[null,".2587694655260995","1.02292797638041","5.827923106192767","172.7543163588728","217.6731341630511","170.8092983096168",".9526568383519586",null],[null,".2485072292005192",".9855702650996789","7.225954980476777","141.9585761145982","310.6062212947392","30.99342354330216","1.007332127777448",null],[null,".5261115335403402",".91129826547557","31.32582872652547","27.34178235439606","208.8261748637427","256.1003085108105","1.132956560039684",null],[null,".4825121859877517","1.047454152895094","2.802401342745746","159.1416726220567","354.1846831676733","86.91207907661747",".9193937337692495",null],[null,".5615218638963038",".9529124245844245","14.73229056708976","235.1508156632785","207.53755934676","84.70371235730605","1.059557645455127",null],[null,".6568684691263291",".9040833957160467","15.90382891570789","118.9462916979952","65.30101915636848","325.141420718775","1.146545605823577",null],[null,".3105643645931012","1.09452029880612","13.23081232978918","342.9190567478782","189.8060035213005","38.29173027257645",".8607327810154523",null],[null,".1741085356574903",".9807888203595595","10.05340018441238","247.046458799674","211.5066295266182","95.89857280431887","1.014707367397228",null],[null,".2117812787467742",".9812810795883171","16.15532686975585","343.5497083707794","332.5084852925698","234.416386765725","1.013943921895423",null],[null,".4991268967159729","1.049427432930181","26.60334708045049","165.5514352292076","72.15310234764212","267.479854208167",".9168017943885947","0.654"],[null,".5095747081332576",".9538777268494377","22.62602975192904","181.1756441951354","58.05527541621536","176.5142390174283","1.057949680573788","0.595"],[null,".0914180536515167",".9327225365309798","18.68398999412958","278.652811580121","118.2405383269537","187.7540209657593","1.094146230202076",null],[null,".4215551104559926","1.088827029678636","29.24390458308924","309.5081532599723","144.3994867687511","55.93341066491288",".8674925097740411",null],[null,".2431917911725134",".935561280696463","6.885450441091887","174.0415911153213","318.6443655837031","335.6499539647588","1.089170109469179",null],[null,".7929505573350247",".9854417529728549","41.36446260449438","88.59697209917763","42.85611918551189","8.490656900205936","1.00752918449983","1.012"],[null,".2312593233795846",".906349395578258","23.85381354675249","270.9225139191694","261.1749932559607","126.0188336453288","1.142248508642547",null],[null,".08269673983072566",".960200377236135","7.445795991377982","93.22676108084036","235.8379245422705","63.75390303551919","1.047517447946653","0.40"],[null,".2566976740432419","1.071549217082258",".5743618744003728","161.762768795121","119.3282781190695","42.35286579282288",".8885582201214919",null],[null,".5383785176480341","1.083741906372129","3.169994770392243","72.86299762470011","342.1379377279212","197.541377284989",".8736053263768897",null],[null,".2494559886440583",".9343253445767106","13.22529575809318","177.9043914380058","167.93147916557","156.186672798289","1.091331973795796",null],[null,".09008318717035363","1.07636665457582","15.3214916696683","353.0304257795029","64.94817402871051","125.2800026576768",".8825995899882632",null],[null,".6019346005723979","1.047515985409579","6.653851147797631","220.1127542467561","252.031515016466","293.3227730629557",".919312330351685",null],[null,".07392748694730039","1.029711504216691","45.8656186165304","150.7326486714999","322.1282695923811","79.788114698482",".9432584982706176","0.674"],[null,".1709153250064956",".9893358158856015","21.49439646050575","46.45641494022878","61.92928524016023","331.9051128981808","1.00158653269216","0.212"],[null,".540561231559528",".9684414532829703","11.22223229446736","128.2319967874875","358.5757278454981","75.22523988866432","1.034174958962183","0.215"],[null,".4614428663157923","1.08654016261915","18.28221289850767","246.6934707106866","256.102520910805","52.19910005674621",".870232698686864",null],[null,".1397112077786515","1.024509510907498","19.88178801835995","95.07556675968779","259.9672275613356","185.3523347325869",".9504517664723067","0.386"],["Duende",".08933461766927323",".9101289262344839","11.60910091898647","146.9167467229759","195.559121135853","317.8187300226109","1.135140705548106",null],[null,".3181105223960718",".9512426590541183","16.10166099717608","312.6883060971733","211.7720510977595","188.8920412191103","1.062348714044705","0.381"],[null,".7426729805377463","1.045214439085247","34.21150988825282","271.2808387903947","182.8508461028799","114.7050808542086",".9223504689915645",null],[null,".2876850252814399","1.043511536683849","17.63421329693623","316.1953969651101","204.3469475711809","8.995017255546077",".9246091600450995",null],[null,".445774157867944","1.099368255255833","16.6986203829984","233.6800485336131","73.80303811740178","251.1435538715713",".855045617453295",null],[null,".4959489682622331","1.040912404514699","16.3283569615275","330.3073552784863","210.9928717070437","33.65047743194825",".9280744097844607",null],[null,".3929571126478019",".9064630203258514","17.6067774909013","11.19733635606933","214.0882729081017","15.67588130449873","1.142033744838155",null],[null,".3002605647217476",".9164926924346101","11.64258265927255","327.9559653363643","290.9453307739316","314.5883881769719","1.123338294344822",null],[null,".2665918220000103",".9313738478530855","10.7449763992613","120.8232342982127","115.7501925570291","265.5760191496363","1.096523680546894",null],[null,".5123275034619174",".922938373890985","14.14019233464631","127.69093567872","191.8226235633914","150.3743052009673","1.111590992026213",null],[null,".1836690758955955","1.052957037888679","50.06221791170947","155.464506347951","101.9165505381391","231.6302236256068",".9121958588230829",null],[null,".3152449073169331","1.06627661134057","8.507669851894308","205.803728638507","172.0487709768952","50.72570424830597",".8951570764590548","0.551"],[null,".6084875743449873","1.067732493922319","19.76376108122914","228.3231177001654","179.9459134369065","5.949515951314284",".8933268438167372",null],[null,".3422600669861126",".9147123404411357","7.529103989478737","153.778611362444","4.667460802878314","356.7208256241082","1.126619506885556",null],[null,".6800947280727186",".9383387775894632","5.464487130874469","117.4818294667253","314.2814599974577","27.41016884758002","1.084337749994783",null],[null,".6003748072623019",".904568325101814","20.8492705865925","350.8800105009964","169.4313466889601","128.0754807369112","1.145623753180598",null],[null,".5697288608049902",".9362014579084472","14.32028647710089","58.8632278161796","127.8019656983271","237.6116060808957","1.088053134056731",null],[null,".1992038812511339",".9230836433762073","21.84524335090423","177.5731860525235","295.8636387793485","11.72857408041764","1.111328598852564","0.369"],[null,".1599293288487615","1.076907006354378","26.91725913954686","24.21243905329677","104.7937820387963","171.4916975974467",".8819353899794339",null],[null,".2562403709377483","1.053191403246994","8.544283872841044","127.6029098775243","19.81952998935984","354.8750850708304",".9118913910671336",null],[null,".4034464620279845",".9188347175992614","10.53569056723019","205.24866526","95.42560628958432","198.8400954757131","1.119046103401356",null],[null,".325797557059375",".9059304096017829","26.20372852581847","234.4049120811177","3.275889988868341","353.1191015070564","1.143041022228109","0.789"],[null,".1063746015627037","1.005933313239415","33.52317127518432","91.43087034042154","256.7701310809616","5.973650411840929",".9769004005773639",null],[null,".0753761833389916","1.00386582064217","14.51442284379207","40.34694726540526","109.239292354903","202.5115839016186",".9799198886520931","0.357"],[null,".1134002487399177",".9896936693905676","16.46291050135605","190.7596120013219","20.63290840579148","224.2294727684547","1.001043351209514",null],[null,".870254392165998",".911643012569393","9.465960602064049","147.9795560945118","159.928028664967","146.3738546446083","1.132313962200385",null],[null,".6486005388325708","1.02536195403573","19.29391117972543","144.7072179570691","152.422221060536","357.4485568047367",".9492667639603063",null],[null,".400335517574347",".9442925621681844","23.01939890019719","157.2924295723982","216.1418348438562","291.9218010743866","1.074098773094245",null],[null,".4155659713193793","1.04405890359788","12.60494655964643","64.73114084828207","321.1688038987008","101.8363074426105",".9238821405417276",null],[null,".1697142280266547","1.032343799916497","6.321780895206357","112.6152266081242","312.6576610546931","147.6856225809894",".93965308331102",null],[null,".4369269781996016","1.040088345572234","15.06310298690676","348.7977744243294","327.0562973019819","219.0190607776687",".9291775941698163",null],[null,".2007955049654014","1.076177152494684","7.192588994321309","250.6594951950337","84.64991665826399","91.54002296126072",".8828327232898663","0.259"],[null,".1346334507154322","1.062285274962254","19.7790192963342","214.2401430141703","225.3966125250481","345.5051110961305",".900206888060692",null],[null,".4324297763007912",".9620101134365446","24.72894706710681","165.5325180816259","280.3843221787824","118.9652803418974","1.04456294927256",null],[null,".3126300703288577",".9632799323612691","7.814226484231292","183.7592188213488","260.9069328931834","94.39236773629739","1.042498177856647",null],[null,".5499413159255299","1.022604552554116","6.547952516924678","33.70121317727793","50.56696288078692","232.9966737865742",".9531088257987331",null],[null,".3701209411903892","1.003459267869528","11.54481307884129","267.9237325913868","252.0748623570095","175.6467955170216",".9805154726130417","0.228"],[null,".1921718027310459","1.034881017308439","21.46897116411629","322.7547118196285","99.03146743502117","159.0819405376873",".9361995815590362",null],[null,".2032006657199296","1.045552441599298","6.993646709529494","268.3338300992619","265.7767346210364","343.2669418483002",".9219032438199434",null],[null,".1744219128878191","1.070485092095611","17.21404884889515","322.5274848237069","262.1160384167352","174.802569950147",".8898834678320909",null],[null,".1943552812837624","1.069493124952547","24.83340196184376","39.10074814083593","78.28744374212491","22.73004916954148",".8911218205560516","0.437"],[null,".381318277996575","1.052090294037276","6.611524607022719","333.1915297169849","141.7088825824093","68.9906578250079",".9133233328227482",null],[null,".2176455962908589",".9112149768173926","2.121133811044233","158.7025801307817","119.9163954772324","200.7673989423945","1.133111898664984","0.096"],[null,".3378417088975612",".941662974732884","6.248503585466326","75.24643700804222","109.3543358928602","125.1153548713749","1.078601032823208",null],[null,".1573603672625306",".9315959492363699","26.21998895070796","30.7769941786323","210.8956486284522","131.8795859829061","1.096131571322378",null],[null,".1447819012453721","1.015013289740964","11.84967399267981","131.0533620988537","98.76124749190956","96.19923829747107",".9638212140108264","0.167"],[null,".3562643557234634",".9493743896767092","10.67330982085496","113.3212424607194","174.1984712924867","326.3816925953763","1.065486142838253",null],[null,".2753507456385087","1.063777034126611","22.41749439136266","223.3673834477839","31.74787925980494","233.9333809681463",".898313980623561",null],[null,".7389352165038562",".9428613160072608","26.7816661338068","327.4492410218941","355.5194706520518","323.5376972824889","1.076545394304622",null],[null,".565686143122944","1.030352825060798","20.53586063545773","162.3065621692332","122.2429654744008","285.4830906689866",".9423779690282535",null],[null,".07009364330822268","1.008914943342211","4.803293632907643","340.5401283750011","63.94084944523073","297.5980148498718",".9725730745799324",null],[null,".3007920628612595","1.010042589208145","13.0534103879767","252.2863612495767","123.7908472581417","265.3897821640272",".9709448088142751",null],[null,".7236630320892509","1.064877017154685","21.5045391420818","158.7334447591288","229.5183760012695","148.1134912738903",".8969224468179643",null],[null,".2656777968300714",".901564816419944","10.53476859107058","101.7402826852119","349.1182953704483","65.9076312014388","1.151353382959119","1.109"],[null,".5034255517100207",".975549070469201","26.95739069818506","15.76525747403312","328.1924848573929","207.4389731894365","1.022893443096365",null],[null,".3308158300687798",".9490339392224428","23.89292775535115","249.9547332971586","154.6298996730576","272.7572456218172","1.066059532929968","0.470"],[null,".437044980574428",".9041755940049488","16.90872228234262","120.4738418945942","242.313229067487","194.3316452251988","1.146370241355313","0.308"],[null,".3464710724637088",".9799991440957214","39.46412211010005","225.1133187582207","190.4524778099355","57.78702105169286","1.015934080284316",null],[null,".4233040299224834","1.007439698312592","4.770753957442212","127.6286365583604","325.1516645529948","232.4082032734754",".9747101385527259",null],["Kamo`oalewa",".1026271920894259","1.001252120850594","7.797771505944345","65.75126806718994","304.943420741623","12.08778264778597",".9837594118331342",null],[null,".3951628283466376",".9383364774495669","25.19405735596603","262.7708510224071","237.3617049122725","128.0148507526806","1.084341737045443",null],[null,".2255851954434247","1.02619944819138","3.356764353035477","49.7010932637407","117.465565979599","90.33296741139333",".9481049384357639",null],[null,".4863481616377062","1.036112916522413","21.08721171975193","38.75971913527447","96.50381527485885","106.7750891566685",".9345304189122488",null],[null,".1327195357740428","1.078261161137605","12.02880213831887","166.0800892465709","296.9941353697045","5.211219821997804",".8802745187163279",null],[null,".06526784434435599","1.085940059636028","13.36587764933518","196.0649724789184","359.7045842723896","214.772442480093",".8709541492513133",null],[null,".2406116275415814",".958434493041323","13.88715169944135","170.6538351429296","330.3707968948653","86.82342194701971","1.050413805971466",null],[null,".5802576991787869",".9466865496976935","5.502084913905439","225.135678690988","300.0476346244371","111.8569071792496","1.070027067280503",null],[null,".1395787335238907","1.008583447771172","2.101934288257376","207.8221710342918","290.2916917461","216.1555537837134",".9730526038010222",null],[null,".3594124028600652",".9550548748021589","21.5314691257364","265.8716276449326","317.6304271298063","32.75517163988622","1.055994327777277",null],[null,".5124403822229032","1.051258405717845","14.90568447202592","250.725647774154","20.88622813717845","261.3527789409844",".91440765228817",null],[null,".4160087194738079","1.068386412868993","19.00016276800354","42.35783901512562","131.4096641883121","322.5553419540785",".8925068119258719",null],[null,".2805230442256663",".9501458803723496","5.839954124240321","227.9596286211834","305.5795512904863","21.89990248706912","1.064188690872151",null],[null,".3835539171683891","1.064098045995972","31.9160781592606","12.66714182779732","221.471162703695","293.0743910453945",".8979075128618987",null],[null,".4251186708511531",".9592046872659957","18.14969093623538","327.4310862743095","243.8742711383684","31.68221362220052","1.049148913971066",null],[null,".2758158838284142","1.095606882690257","20.05913316201199","29.82102429112064","41.88480910926281","301.7421601599535",".8594526323747621",null],[null,".2357566787085811",".963770795198033","10.91775490439362","81.82804856122861","252.3423216121971","230.9442971143519","1.041701839474942",null],[null,".309544918594275","1.024540106469173","4.425698295286169","291.1812460793955","98.2027583697042","217.0079575982761",".9504091921674698",null],[null,".2769884961052282","1.034803345159115","2.407453426555932","219.9013739086364","127.5141086011813","292.4825476856178",".9363049899903243",null],[null,".1291201467410765","1.061155135328794","15.08987716073211","215.3905064260429","61.07349958013788","306.1699399981308",".9016453633714001",null],[null,".5460613978915209",".9191482286194665","36.21555153461178","95.161084055985","311.3813145248818","294.1149234463898","1.11847361135394",null],[null,".2375097269020183",".9824040708687604","34.60364964180378","234.3843980291968","198.9645567999272","336.6841112476586","1.012205851855373",null],[null,".7906510489537473","1.064560045795323","43.58557299329831","276.429612156188","160.1369675518947","191.8375505855406",".8973230628607277",null],[null,".3315485568373112","1.053116577283888","11.27923315728999","164.5255115250764","303.1634925900898","111.5093932555563",".9119885802554913",null],[null,".2986948011529728","1.057763308265863","24.60464096345579","205.2987942921965","347.7470309309883","340.2629492566576",".9059856663114813",null],[null,".3545578555969151","1.044688128102285","7.801931821910274","156.5624101358109","24.7624354623047","354.2490665403479",".9230475731870802",null],[null,".3309037314075124",".9781960145430821","4.591243402591953","286.2374280486684","277.2304393913813","265.6148136675164","1.018744413777201",null],[null,".2905803296142927","1.051360990221226","17.82413152392896","332.9065518897071","174.0818084850923","124.7442351150181",".9142738232310542",null],[null,".4899158965275909","1.048326121362444","54.985743446574","120.357927791892","87.2748551066144","92.10359490094217",".9182468831835183",null],[null,".2178965068830435","1.012726590663729","24.01803681141669","351.5588413911751","252.7076915344441","78.83540365528683",".967087464872613","0.380"],[null,".1261037625811072","1.037757128655492","22.99607077460083","128.4925835886291","226.0768234587","331.6950549582771",".9323103077414555",null],[null,".3595570618162228",".9361612002982043","9.341443543024377","62.32501371861472","194.7249982404304","17.098574884124","1.088123318908257",null],[null,".5684652601429742","1.006796538299949","4.153849872430153","120.0838931571241","143.1973663263739","166.2002245210047",".9756442816518315","0.315"],[null,".5999617099161737",".9521557288787161","14.02443302706234","64.46005383742525","219.3033603124737","291.0091305077648","1.060820971351439",null],[null,".5408849421092483","1.037288251664658","31.02756541330642","256.7067019914567","80.59326836480315","228.0164641478539",".932942516165117",null],[null,".2000252192446602",".9818281505055723","9.184789734554203","302.8912712864155","21.61112079721984","105.4699945385527","1.013096591400483",null],[null,".1702031187671098",".9610808407660019","35.07051989875502","78.08608797480588","350.0569715775544","59.48772319040251","1.046078303177077",null],[null,".5629885301835321",".9508980647172918","29.31830271676044","263.8381655544562","231.4569583571062","47.22310346283727","1.062926240481915",null],[null,".3391905338064815","1.039217512611734","8.480722252677772","69.53352137354379","349.4634901142913","159.1485294498508",".9303457730461494",null],[null,".2038497297667862",".9713712962615597","35.37475250649592","154.0604348623241","197.8365641737818","178.9510935385212","1.029499582470531",null],[null,".3491235885439742","1.033849256553999","16.42136428006246","126.6033388835083","246.2567760692988","233.7855945084425",".9376013936743688",null],[null,".4770680463104516","1.022578327795594","13.32753356508122","54.36329135077749","254.0071990920897","32.94182195350174",".9531454907783867",null],[null,".3492047377753175",".9132954997856636","33.4400639399307","195.4258505970456","210.2780874514569","308.165793649275","1.129242194574347",null],[null,".3803936999488136","1.007823903057693","7.420549235366354","20.27314724240763","1.531923554733092","354.7000349499511",".9741528201073224",null],[null,".3835627762644627",".9938717122665413","11.32683207828335","202.553641466613","255.629071422967","264.6862742964083",".9947377031988063",null],[null,".362892383617218","1.023457702116615","6.291632348545346","80.12469364560452","26.88669808257556","296.0993667780965",".9519173135933349",null],[null,".332622635987654",".9069495899971323","11.92703199852322","239.9419666782901","223.6327213165929","255.7423711455456","1.141114833047166",null],[null,".3512755303861627",".9198634019229799","5.95830142781967","173.596887938917","334.1166330818811","136.1924752091763","1.11716948244342",null],[null,".3417729536498351","1.003654766307049","25.69421597993485","127.0550014702322","335.8933434479346","289.0393635363641",".980228999742532",null],[null,".6614053688960908","1.095640321616254","30.94119890139436","91.86189855199407","342.8435808594625","285.1217737517267",".8594132869530159",null],[null,".5067975080881392",".9051128959631777","23.64145084462924","166.6838879815814","47.72919180122152","182.4110650374357","1.144589993523503",null],[null,".100516473017904","1.048940043159319","31.28158641703052","136.5839108152036","201.4481233901506","280.060368977832",".917440856251179",null],[null,".3062840655884945","1.056245899242674","15.89660199623166","43.60671923727674","265.3457034101983","278.6832362597294",".9079386837644283",null],[null,".2458526783674359",".958853112606691","5.575248334620613","229.7150402505237","112.881751252621","163.751394465821","1.049725990860491",null],[null,".3760608657323314",".9070016704151853","16.7909951526372","260.7739090700464","351.4893159185838","83.5817376361461","1.141016549516339",null],[null,".7415861167170279","1.066855420841269","11.97461381563939","32.70962558318384","13.11132952044524","71.33391662473596",".8944286903136682",null],[null,".2656918159885675",".9367229431471416","5.545722907203644","17.45871934907144","292.4352543129936","302.7326957213443","1.087144661586309",null],[null,".2624405400423503","1.075687490766168","5.051743169010806","316.7005891250747","321.3375257520944","258.7670085763543",".8834356008811809",null],[null,".2640094005931076","1.097795047451927","26.28694937939379","23.74095140367094","262.2632970068106","130.1999644875184",".8568842752045635",null],[null,".287419585647175","1.099725278670645","20.89784445530141","83.44991739554945","270.615717736608","146.2042969765665",".8546292682054514",null],[null,".7433726635979208","1.00945109937053","46.78811361891719","326.7350637352193","307.6675618661765","305.3213695627161",".9717983243160333","1.434"],[null,".5152549003610007",".9175814932618918","53.63281133508894","346.2674268044919","311.9583400982408","21.86542048278433","1.12133946028206",null],[null,".2974227240410565",".9112753560575034","31.00629370673753","309.2587017930234","311.9706897709531","65.20838755812082","1.132999284017307",null],[null,".7934223926264768","1.09190928210645","16.21049652545361","53.62872225135895","281.7388897206004","105.8535339040519",".8638219533638244",null],[null,".1757490927067833","1.035363959824896","22.73364517276879","214.231231316048","353.2581820744895","38.68658973864065",".935544626579651",null],[null,".5576050847064025","1.010150265995987","16.49670212582221","3.129136099949102","32.24383673457045","279.7707611849009",".9707895664178022",null],[null,".2833731803093666","1.077592238966942","14.1317502880574","212.9094410304419","88.85236673712168","275.8292585488466",".8810942998337188",null],[null,".2308979882337496","1.022756442475927","27.65624561984553","114.4509898315489","355.8271933172754","210.5683724936142",".9528965138874947",null],[null,".2703549822798149","1.085176520025253","25.03202105394298","4.66040836395678","316.4582036176016","309.2103792666406",".8718735272637583",null],[null,".4626847443885976",".9882863280804035","9.489040007429864","188.4185578020358","226.8301288297477","62.89965068178766","1.003182373646137",null],[null,".4165445167490037","1.065974468248394","8.773170825531963","199.8257303017776","255.8950663840932","201.6630303490469",".8955376925520452",null],[null,".3097120179471417",".9666686581529299","13.53991113936573","349.8018905236132","156.1447726367379","308.1035851360199","1.037021157545129",null],[null,".1586220470895878","1.05191262487551","32.94820896728015","281.010910122211","273.7386934129648","54.12421001674371",".9135547345173402",null],[null,".3198461550901944",".9757608976103356","12.52139429859354","309.7033226260048","204.8751376729733","110.8906836608783","1.022560372513749",null],[null,".3433146969915447",".9225145692225577","14.61288568978511","15.13046498603451","3.217349390888332","138.2439099036779","1.112357080014051",null],[null,".1982983379291389",".9552624081635016","1.583262610350813","278.1005152306856","156.919627137449","47.70228478438199","1.055650220000485",null],[null,".1794866533388157",".9585237863461249","10.06513692351272","183.6806899504783","242.9152195404582","8.630533909946697","1.050267029119867",null],[null,".3004447489655151",".9505723711577576","1.414452302854863","93.4369786940043","110.3454420533198","314.5986424833816","1.063472571134561",null],[null,".4991132621627827","1.049482477555593","19.70448223084478","9.22604831483514","177.5940804406598","134.9883842230609",".9167296669104673",null],[null,".2044360136665991","1.055615679122843","10.24768941806513","195.677674164402","355.342677711633","91.33551980370501",".9087518868538422",null],[null,".176011509675245",".9492364317156262","1.022710958775447","337.4527164429865","274.1219797482283","235.5936240075286","1.065718431072662",null],[null,".5013758601766278",".9551151708771244","10.17299030405817","125.5993451636477","166.4706938939369","221.6039667262888","1.055894332546054",null],[null,".2959079295118198","1.051487728714808","7.918894549249799","128.735515284123","242.3498214745964","324.3767137995046",".9141085285839473",null],[null,".3340273164747916","1.00498131556097","1.429702447576273","78.3334136970667","328.1986305219802","332.9348459646463",".9782888250807732","0.193"],[null,".6204598180791595","1.037689178000725","16.54233340148184","105.1955255132032","224.4701133765288","55.54863843348081",".9324018844885514","0.382"],[null,".3872432259397356","1.000728625530421","13.84635142791553","153.5780460528487","88.02153178026813","220.9782244032379",".9845314405020744",null],[null,".6750782695027827",".9552010118765804","20.54193855758276","7.522325124784907","67.01122608839006","172.2021712586783","1.055752000742635","1.248"],[null,".658006403034231","1.083705494811116","42.50555274582587","216.2503009697195","211.0429713211251","217.375730449317",".8736493553141578",null],[null,".473517754323763","1.095734719379325","18.63788138389491","163.6966553952881","243.9725030475429","244.4440585411202",".8593022314076652",null],[null,".3070227107784501","1.050722395829557","16.53494316813071","177.5340191265301","211.0340407646087","303.2793901803464",".9151074480407698",null],[null,".2483394021153655",".9514969922214288","11.05624997154856","309.8959106954196","37.32650342204537","70.3783629172043","1.061922797106509",null],[null,".4478773606543847",".9042419839606157","6.047174786988312","278.0075100935381","72.66404318923432","133.5752349641746","1.146243992949679","0.118"],[null,".4675020470854964","1.063831616519306","30.4270419131124","181.3286578040403","179.2993735212522","296.9685027093121",".8982448463309348",null],[null,".3463405491695616","1.057326176465749","3.620501241264938","214.9805020171829","176.1671440103818","296.5686001532678",".9065475687090461",null],[null,".7101202330306298",".9181741267006704","17.23875996617971","266.9843509623596","102.7698122469972","298.7718298350681","1.120253986409184",null],[null,".3263828492970591","1.00573763105709","4.447372081093153","49.46352369010594","250.4696246575954","38.09632376037164",".9771855216086727",null],[null,".7374411935285483",".944829925456634","36.89478656945965","101.4650077153151","302.0725057221852","354.2194662341039","1.073182577768174",null],[null,".1903347498962511",".9987003001132855","20.90317405796613","96.42220935697991","46.04501716761303","271.8163108411616",".9875322863046996","0.379"],[null,".05243766634595784","1.032376222385287","1.429753052033929","71.2706280686651","26.92957050911204","170.2372857557411",".9396088180040928",null],[null,".03121482443438376","1.036020240467751","13.5651634257135","222.4082792506728","290.2056297232864","358.9477688995871",".9346558178074305",null],[null,".09307750821279319",".9358597216161167","12.39459008402711","329.0044039259403","353.9597178779944","179.2739430701777","1.088649154769754",null],[null,".8683476744042531",".9069185877451749","4.070950023704385","342.4260342890585","322.7280292035344","72.26019529343115","1.141173345628743",null],[null,".4926516251154479",".9764019924056632","5.559980365608745","251.7390971261522","55.85316275448736","73.79890811819882","1.021553435028476",null],[null,".3680023879080587",".9132299421846355","31.69537555026762","116.9188735210734","141.5705347791364","183.409208658961","1.129363793310465",null],[null,".1039794558089172","1.096006587740565","7.84268994856683","94.69086117491541","51.77674486429233","99.06001498729219",".8589825217397382",null],[null,".1901970966569643","1.05074798699239","21.94559193707072","57.29716075586675","219.5203863723775","141.3560903966089",".9150740168259442",null],[null,".2104673688263827",".9828998260595856","7.238323040743424","85.8569536146061","226.673021453467","306.3213650059961","1.011440143573619",null],[null,".1108014829168465",".9121243395724524","2.622657931069064","313.1297192077352","7.925289432892101","355.9286765110209","1.131417799218123",null],[null,".06352919930475423","1.061902626622364","5.157563603495341","138.5005343767577","315.5880468782531","218.1994432893396",".9006935057013549",null],[null,".09023468641585573","1.025708542273031","10.52307495810681","167.6785557471362","9.187923620176287","212.8720628575083",".9487856669139018",null],[null,".1308795768079395","1.098755246990491","9.587999563771264","178.4856380895799","119.093785766975","331.1577925631434",".8557612770135904",null],[null,".01564519274728314","1.094118591616694","24.81612015719067","211.2995888474933","7.474445244433199","107.9642194956605",".8612068534110103",null],[null,".1114508942417592",".929480557227142","10.75906506076917","232.1246879271755","354.6574755327542","124.3300527762067","1.09987570574882",null],[null,".1892190216417628","1.016791401935944","2.438400612569613","282.842040598503","276.8061875670327","347.0904383161279",".9612940986321938",null],[null,".4466415339123107",".9281968025321448","40.20357625372698","358.5286029401879","313.9548055839728","274.4282711238251","1.102158290698942",null],[null,".1105124700377725",".9170283428443317","2.829387933590402","72.5182803979273","8.141129680810453","82.13934186884318","1.122354199230801",null],[null,".2207822482404907",".9845879718874943","9.983433144900166","304.548373192465","166.2749650711439","128.0254365099752","1.008839980243806",null],[null,".7623571328255533","1.0215089962717","22.86678200407609","128.7946327574957","37.71227946121014","53.94030213912381",".9546425337046411",null],[null,".2714277948925314","1.009879355540656","4.57501878651356","150.0982877402174","74.23847106416876","357.4589159183019",".9711802289446894",null],[null,".1676594255773562",".9288030117275242",".8884653820415652","12.51915279361251","132.94313206419","174.7484497054818","1.101079435249222",null],[null,".06682519100621943",".9773498731272955",".1128867257024929","191.7588483348999","275.5467388987003","227.673499102387","1.02006766823359",null],[null,".1827863657436394","1.072706354057612","15.59537648575772","202.9843824284741","280.9518786019068","138.7705581229011",".8871208655649171",null],[null,".4387959507355079",".9046959821336997","11.75122619167985","33.7422654118303","228.8582390990238","42.09845051054437","1.145381282054856",null],[null,".156560963602376","1.029678357611707","20.13742717861199","74.47467240044894","214.4945727716706","79.38968069228429",".9433040456032815",null],[null,".1374254069359876",".9400125675213651","5.774844255733647","115.2627092925528","243.1610348078266","120.6131855077367","1.081442875761455",null],[null,".1772741928895642",".9373564513264797","1.255173294354483","30.53994243222991","344.896094817759","120.74405184379","1.086042735011461",null],[null,".05727561310226317",".9893096410852624","11.63139170013987","357.7642769004437","306.7179209898779","226.4008710773816","1.001626282381991",null],[null,".343371721638058","1.020713382119576","6.773457195713581","174.6021189083926","261.2402527575364","26.81213244608158",".9557589221679581",null],[null,".02790034949639296",".9828716240491938","5.246228160153334","183.0247324340242","233.5990238261463","189.0480782382663","1.011483676496981",null],[null,".1683133701733302","1.006682907250294","4.624264822163665","193.5065086715257","265.547304377173","188.0967713735379",".9758094775811057",null],[null,".07232660840491487","1.034854750980606","1.287849284598087","195.7498691943096","108.841630962295","1.029671519563824",".9362352252295209",null],[null,".3227922230067004",".9340664884809676","12.05862511832343","295.7765021669878","143.0012348993027","162.1986819541436","1.091785663402222",null],[null,".1587203432097591","1.078139677431727","3.035505543634787","148.3734223533586","96.42284963328734","313.2466345961441",".8804233055924863",null],[null,".08706944964284437","1.062971174493426","3.090519668774097","183.7188477619142","62.99528328307105","128.5596954894986",".8993357188115925",null],[null,".4914426066524856",".9471648122964227","3.940293570860471","327.0770703122609","262.6025389519475","77.58128179929192","1.069216718364862",null],[null,".1805799886294146","1.028053000796272","20.39985320523382","194.9641388954397","54.34703656969631","149.6530000076637",".9455419820231674",null],[null,".1662668127648469",".9537489384151607","9.01206338197411","13.02453618368532","241.5707799147995",".5825201392894056","1.058163976407255",null],[null,".1321428724357291","1.041135595688013","12.50951773086619","67.04393269963967","103.8662832543607","99.94939495419517",".9277759948867565",null],[null,".1636027773541663","1.019497359279712","12.67734383778844","259.3137667880618","69.79942495038644","163.6084893133088",".9574694285735917",null],[null,".5567704867637165","1.006452402585281",".8492974254824546","127.0741918874859","186.822372029718","286.1169466196083",".9761447266912766",null],[null,".1620883597042038",".917143105438916","13.05927304791418","294.9823099083218","305.9449702282243","225.6718552961699","1.122143544672485","0.175"],[null,".1056717346999742","1.016454230246723","18.01805037346696","117.3567613342912","222.3466614962143","201.6461188637242",".9617724497809086",null],[null,".0130073383811644",".9925811404866721","10.74806171840186","106.3505414841263","101.976455722569","259.7032054466709",".9966783973606094",null],[null,".2215513330731292","1.074629381930948","6.312564912256213","305.7684340402367","77.88592147288459","229.3705877861629",".8847407034952797","0.152"],[null,".3633097459103645",".9209333285219975","1.556079903557237","345.9184037616548","59.02098873486366","291.765423946346","1.115223181761352",null],[null,".3004042466107771",".9670022002922173","28.06097339794069","7.931162260789845","31.48983663551634","26.53666924309663","1.03648466379087",null],[null,".4403278015590669","1.055680036561456","6.612646801382507","208.1577751552322","139.0878842644424","180.365271467872",".9086687877370888",null],[null,".2988667214879713",".9236971729177205","3.708964024703387","202.2567307524555","254.2423028022846","194.3705117188926","1.110221548220071","0.028"],[null,".1016951972535578","1.016271276286522","11.17475087064006","250.1035637518087","126.1377338411182","189.0394100141214",".9620321757049699",null],[null,".3786764328899199",".9555619958426804","2.894805379206567","247.7656313941995","134.3380656710387","256.526921448281","1.055153807924007",null],[null,".3434332996971751","1.072280279905316","32.94808167270632","142.7631453364862","49.39231160607759","86.81779790340985",".8876496687470828",null],[null,".06867794177689117","1.014382626976902","9.143869081713914","309.457376917446","107.5954627376484","165.678818719789",".9647201952274517",null],[null,".3291104791587806","1.030723729177717","8.447602232426362","338.8389341409307","247.1149476781262","124.6333870518499",".9418693452156548",null],[null,".2328923881264699","1.017892356799614","6.606880815836962","9.672842544156303","259.4168457914781","229.9623588986285",".9597349133532239",null],[null,".1207160355814389",".9296759611626321","8.476452222021626","12.91324668382982","223.2803751117141","331.176683441084","1.099528957919264",null],[null,".3022030756549157","1.008859582546999","23.54320782839538","42.40071385654536","226.9778776350627","343.2588244910105",".9726531300579913",null],[null,".2012560946140125",".9840656784811681","2.342282289816617","216.3953888377241","78.75313556214769","255.5190479621348","1.009643250375414",null],[null,".2376283183891459",".9060982755676628","25.53588550121083","245.8655156659023","351.2852107884499","329.2098019325271","1.142723393109053",null],[null,".3510837517652742","1.075073216768306","2.189617025883373","270.0743177345175","73.2964587407174","278.4487744033506",".8841928735305765",null],[null,".2238028858444225","1.029730485583049","43.38572021818185","287.6627573115819","43.07946356979483","64.92920984444191",".9432324172918558",null],[null,".1190254261522305",".9207012823639009","7.491764890920213","139.6885952886736","172.9082979841871","30.00775434248083","1.115644816168354",null],[null,".05249086633696643",".9566642132654178","15.26435545430394","345.9222549780752","23.42747972644403","181.7122173952407","1.053330795458775",null],[null,".1490331055754361",".9616318540119376","10.8020465052255","247.1337416611175","238.7019400047758","359.6799458533228","1.045179330631212",null],[null,".3028176497931601","1.040274115514068","21.05296997036223","268.5791158662153","255.5989803803081","103.0128883072279",".9289287094404095",null],[null,".1262695896282501","1.042200260509257","20.02572306620305","100.8249107581387","254.5054504117139","307.1188278178028",".9263546968031434",null],[null,".1813248194224394","1.08062864711997","22.31586371662077","282.5767637072368","109.7122743774901","258.4688232353131",".8773832909252308",null],[null,".3159286291659176",".9077626987578341","25.45582730161494","200.6514902623966","355.1909370958152","274.1954336389368","1.139581983114351",null],[null,".2695245702494671","1.096205830470978","19.00175972953489","20.45478118575836","252.8326763277043","81.31959047047916",".8587483436688116",null],[null,".229403738329521","1.010683849182203","62.86674280773529","23.34395956015797","228.5513458421377","110.5881400210635",".9700208859626048",null],[null,".2291480872176866","1.016584796414902","15.47484774755375","211.85153772","28.60048500950415","305.5825611546315",".9615871663027924",null],[null,".1475752947223973",".9793396880564993","16.88714068349898","212.8115456270494","287.3322043510362","269.5620075400336","1.016960399310686",null],[null,".5448830981213413",".9091804325175831","28.60131390081393","57.51786424867954","140.7009591687453","320.5420904690379","1.136917505642592",null],[null,".1988209777536873",".9304745374611194","19.47109266218458","89.7218684492414","165.6716175242689","284.4685188455641","1.09811376173891",null],[null,".3128500738227534",".9299132148727339","6.528201457690133","98.90735201665559","134.6569290644715","320.4731622507076","1.099108191743506",null],[null,".01397414994441677",".9887980835622261","4.321133409093159","264.3711678858667","87.63033309425731","145.0100971998687","1.002403674249505",null],[null,".3550429486049952",".9695493982986267","2.732024876665127","86.20711959090931","128.1954070605986","216.2018595663317","1.032402772434609",null],[null,".3849312540311262",".9608503500002542","17.67140644042185","300.808520101264","45.84527189947118","104.3641632186284","1.046454728883943",null],[null,".391307941633104","1.027072743750198","17.70978153549435","153.2112243497377","126.1115226237783","218.7391074245449",".9468959688519576",null],[null,".1617911964435893","1.097856537650989","3.74365629387015","183.8691837177845","298.873234407042","359.0640461743894",".8568122859531558",null],[null,".307808451780002","1.065517371709083","6.209513258354008","26.51953892988341","281.4164861714609","171.2780019231261",".8961140197278922",null],[null,".2232718651295595",".9800218555613894","11.12925736004001","214.6364209004581","112.195998857238","311.4967105454691","1.015898764921436",null],[null,".175560923994085","1.085294968511587","1.502171748223892","143.8138761047493","1.991160689036158","90.31290657326171",".8717307974740345",null],[null,".4750131532593196","1.022362798880496","21.5806038148311","69.83163465438756","286.2267997674435","290.4949901527215",".9534469120184006",null],[null,".05287774619601927","1.051236313117638","37.32809650531506","254.0086795982748","144.6871115461063","180.1508023577825",".9144364779887872",null],[null,".3512412197670565",".9158213628928967","25.44496469367289","82.59069134997452","309.4480521294518","348.9020696773789","1.12457369089221",null],[null,".416256699636335",".950008636668806","14.31358951241926","327.205245845285","232.1698009393833","88.34780039754071","1.064419307418207",null],[null,".1734409297839522",".9529630297923036","56.3056624844683","151.8553041165841","9.209475001732656","164.103948516319","1.059473248023562",null],[null,".122823519286112",".9510255297439183",".5774620811804336","174.7054854939947","28.29202781529711","16.81855482836763","1.062712553187339",null],[null,".3321676612567461",".9609955394616173","5.401413218775629","199.1810270294697","281.100847337042","18.18966279736576","1.046217586587126",null],[null,".1872573450590037",".9550125464652869","22.300742471314","356.7484033626891","227.1336596479296","299.2663275755166","1.056064534675219",null],[null,".2501876730159618",".9086194304570531","13.50176008976369","14.43114466096247","200.4510488276347","198.6788044722079","1.137970605788545",null],[null,".1618798624480617",".9765241901728946","36.53097290692674","12.60625279639923","138.6178854563385","238.0841721155683","1.021361692246018",null],[null,".2593349901506905",".9465804586416945","14.09543003680762","203.0152822919782","56.56616288841826","355.5568909415074","1.070206962419698",null],[null,".3963532236477615",".9534214223184502","3.695414793322021","29.53041923380545","120.8978869426726","87.25237760435795","1.058709268585803",null],[null,".2215600276608523",".9686517380424893","4.411276959306889","211.3086298753436","293.9011260441304","297.9493514317869","1.033838213430953",null],[null,".2441274093427268",".9408397816848705","16.22556580563362","225.7163943668769","297.17481511644","216.4146675689162","1.080016934465067",null],[null,".1641221811477997",".9436569746783818","1.294477925228685","233.287561104277","332.3029437344492","116.4915627194492","1.075184123017252",null],[null,".7302570798960879","1.084364513515287","34.46382032852357","51.78570581671786","223.1475903163637","278.9322716696374",".8728530403679828",null],[null,".09679377787219053","1.035269974863925","26.00741051997656","249.9534438155331","70.94450801697812","48.74892746616764",".9356720268562366",null],[null,".158833334861279","1.009977224617082","19.81758466409588","271.710674482167","293.8959094968183","100.9417690223063",".9710390680247813",null],[null,".1655027584881314","1.011545500164952","15.49652028427439","297.5437409557591","78.70630759313261","82.10427016505803",".9687817304825536",null],[null,".2271571911472628","1.025701226257959","6.132543979609519","313.4247960529831","80.99753326360226","60.81939061585749",".9487958180316534",null],[null,".1849307261469208","1.015595020186035","2.300072548105514","308.1048277243451","321.6910079536112","329.6505168427443",".9629932208117473",null],[null,".3395893737942833","1.017577819583981","22.09717487842114","322.219957777683","61.56680037852951","82.74851721308055",".9601799343670602",null],[null,".3500269415191027","1.054821711018151","24.94838347272801","137.7294266146129","237.9801291171954","146.9299917057101",".9097781111361358",null],[null,".06802800664550079",".9890232560647336","9.54799722798195","146.6776786684028","248.6180038797272","98.0344800768993","1.002061365469357",null],[null,".2708733342034133",".9180825606316041","12.82464159645415",".1166548997577977","310.8427682996282","343.5200626992298","1.120421585407217",null],[null,".06486309849582313","1.089892451290324","10.0396395613973","173.9175828464261","316.4346742100985","38.88895772292717",".8662207980262284",null],[null,".3300900662693549",".9332018247430459","3.751715895414538","177.2466795371748","120.8811638915592","175.9315197137197","1.093303415651806",null],[null,".135761157232357",".9510083130851841","18.64969305095115","203.0027230185877","230.6157056971319","129.7833648813998","1.062741411676665",null],[null,".3618984595413239","1.063104419809774","15.87892479867556","224.4892122891817","249.3825963167819","70.95186587745557",".899166645322243",null],[null,".3089450719155649","1.058323203452626","5.579279506214328","80.50038617409467","72.10448204316475","357.0270973208292",".9052668075784297",null],[null,".5753650624508809","1.029935566403909","32.97124338907865","252.729796216705","239.1342418886592","246.1051241827241",".9429507065882938",null],[null,".1758800818284339",".9754716051220369","3.959492968232014","334.802404883313","119.9025038765998","208.591579215112","1.023015292417857",null],[null,".301656287301734","1.001473927369054","33.96788084598956","154.9950530177265","54.85313348204267","134.9410350940717",".9834326052706894",null],[null,".3114625327432468","1.097580650771786","22.40666567008701","193.9607129009215","35.87838351403334","317.0233509036602",".8571353575941109",null],[null,".3652224310138252",".9491403249285257","4.749741549209045","194.9969433848559","304.6796091696524","129.8147704713801","1.065880301816709",null],[null,".02542417650975021","1.042178013402469","24.54910274785216","25.70184907628431","302.162572360966","24.17131059070818",".9263843589456662",null],[null,".1350885093171444",".9226521330323497","2.394239643799118","344.0216168412106","201.6145357912645","350.3591079694615","1.112108317178391",null],[null,".3057028609173016","1.008064957962988","5.644421527767205","198.9356234375216","288.2919398623131","212.3289883902158",".9738034225681922",null],[null,".1830499359418467","1.055301744883044","2.732235113088095","35.75987438365408","111.1768592138286","86.55436754960193",".9091574242513665",null],[null,".1159854166896649",".9588525128939706","5.423381386088575","215.7552464402223","313.5005103376718","315.624858346164","1.049726975684726",null],[null,".2326047172985709",".9453467614038832","2.062285594317598","48.25919345603839","116.1514753786882","129.0617589514928","1.072302609369848",null],[null,".2870958177868239","1.082846512536256","25.25083538313183","254.8558913345885","101.0789702420033","343.037251007362",".8746891122532772",null],[null,".4439164670814223","1.07830889860836","1.779535950410626","32.44519315445863","132.9707703461998","305.4412324604774",".8802160638350528",null],[null,".711885643833757","1.040880777265328","18.38808064007614","73.07434586796694","145.5267257986447","211.7487415638247",".9281167095334846",null],[null,".5983133721578309","1.056392205129528","1.910181428843139","163.0592552711574","143.4426239608642","190.6290121424857",".9077500717495184",null],[null,".3207318433487061",".9685557395149895","32.70127494913623","75.70200869691308","238.6332925027305","86.04130219259588","1.033991920754576",null],[null,".307592327819433","1.062087564685461","5.629833720344767","269.4740430326148","80.52832024461398","139.3508725937943",".9004582634296356",null],[null,".2205015179888841","1.094327591685014","7.405940000753686","277.5308088783696","273.4467547814149","85.75464161339356",".8609601489072483",null],[null,".6492940932290178",".9821579960628948","4.15475074285756","123.3231036689085","139.6509387983381","16.90076716120382","1.01258628040176",null],[null,".3661196239983996",".9124246843637739","8.319912128004843","305.8268295094643","25.64198288159436","306.3755097750102","1.130859198356078",null],[null,".1282844619762838","1.028376936246938","5.906604320224831","307.4124173776458","288.8690107569147","252.523179010259",".9450952531503833",null],[null,".09868965710956684","1.023426140704961","1.410580274374513","139.8297400846262","94.86623629374412","291.9950519060678",".951961348162068",null],[null,".2143649712545476","1.081909569906365","5.193800708722695","311.0631336622878","264.7401407147563","300.3431495713202",".8758255902177594",null],[null,".2306472056932216","1.096635209236609","2.741581952279946","285.4407243070988","82.79657452015608","210.6097314062945",".8582440389464187",null],[null,".05293899185018552","1.027774304692333","6.295017134568384","155.2935618600706","292.5365317952579","24.09448330753807",".9459266044963256",null],[null,".5180626746982842","1.025709608418974","2.228658713564116","5.203362965917552","41.1726041152524","71.67136083459162",".9487841876324775",null],[null,".2559528742792163","1.07956228851152","3.380578620996424","196.9915582865993","266.2766304156846","247.6543234911608",".8786835904600722",null],[null,".1567507533890937","1.064527217648143","1.181947751625482","200.2809863134779","90.83770837311988","235.8473131841852",".8973645709784015",null],[null,".3172781245918472","1.08407386169987","10.25158584744287","75.16494097550331","28.92762622796605","206.9636553633096",".8732040957715692",null],[null,".08311593695938474","1.01022815482201","1.438570589570768","43.46101473839556","273.6515963356451","340.6712415475988",".9706772964293752",null],[null,".1790380021682733","1.030873271988687","17.05735699630237","62.13270514210762","318.6090166076313","234.08884688865",".9416644053600802",null],[null,".3159078515765184","1.084690096129071","7.81616900837038","95.33626930376506","264.6305453410063","290.2513285577048",".872460074053535",null],[null,".1143317465961846","1.033726589590801","19.52917966930434","276.5401176915394","269.476304226503","227.0499321127762",".9377682890537652",null],[null,".4286859647339524","1.019312416541144","17.23632858140694","278.5735214166918","141.6379212194062","282.5882921110563",".9577300234347065",null],[null,".04559035563374957",".985090772363316","2.798574425435169","161.1654366794017","331.5693360537219","40.29955019680013","1.008067695336131",null],[null,".08109883968123364","1.085643304077857","11.78939712305983","172.1701072470571","223.2515245766859","312.5586197918078",".8713112805648445",null],[null,".02448682110602799","1.033254382055766",".5943903405611557","51.21034473613451","10.02701190651652","30.72268067911919",".9384112166563138",null],[null,".1524155542370793","1.043349593178601","7.56472253053372","335.8258112784483","175.5704050205677","200.2655815812632",".9248244382118551",null],[null,".2132340699827813","1.046407747836796","24.51615129160767","180.4321330004651","283.8362954665439","238.5610483454566",".9207731655387212",null],[null,".561658729187804","1.042903093537188","4.759080864489463","2.054320379911898","133.5811101467135","273.3897348762738",".925418421454773",null],[null,".3287479331172015",".9214642758268606","32.41220503039693","1.223817843964764","224.3285985227025","257.470517650281","1.114259433972352",null],[null,".1739542221815561",".9851438737679543","2.641705141823274","193.6640416025866","38.56385960779643","281.1544867081782","1.007986190861503",null],[null,".3973793675149278",".9403823898455658","11.6093170158674","195.3384026009882","315.2914728958326","185.5191207372705","1.080804993132315",null],[null,".2907357928718913",".934517069928182","9.812746317786273","47.18073699178622","126.6685372007787","215.4477260477141","1.090996144819138",null],[null,".2594488736098835",".9797069809244872","4.613976042730754","248.8654599923285","61.86313300098399","83.97740308802406","1.016388564111493",null],[null,".3105822648987819",".9859003439138071","17.65430994155995","260.5595994642334","67.67658733310846","159.2735074770339","1.006826288879193",null],[null,".2692132993673225","1.040227624734686","10.95170221591345","263.0211037736329","275.414767869065","224.8795895479094",".928990984899927",null],[null,".08782568005241079","1.045678160555163","13.34050402702478","79.80539952691629","259.9490648760312","1.008376692474546",".9217369920506331",null],[null,".165978777653504","1.008628365379332","28.72552674938918","88.61961876937264","245.25017198","97.7951397067539",".9729876045770686",null],[null,".1207621932880863","1.032586865293406","10.54629614376964","287.8123338415092","96.30986738039692","46.89887700369994",".9393213189377578",null],[null,".141206209481028",".9338962419530437","3.531788444587541","297.5115325427214","300.842613291915","139.3682256001522","1.092084220962745",null],[null,".336691971580969",".9449914282936879","21.14196679204348","120.318490795005","241.5767060996233","86.12744405344448","1.07290747269545",null],[null,".1725382740899296",".9803157201885664",".7520684439198396","125.3678667844649","261.3822583424937","169.6054877607024","1.015442002372695",null],[null,".1795059722468501",".9426206930623116","7.087438291139942","142.4837003144778","152.5426655524823","331.9756607469503","1.07695763549943",null],[null,".5736845049178099","1.010126962672945","2.763259649903984","117.1996390034442","262.1822377626501","210.2571933862688",".9708231603433899",null],[null,".1157489172584809",".9874601515547965","2.623642472921815","328.9790674215452","77.59065915339707","81.88130611959262","1.004441633163683",null],[null,".5245196305787816","1.079224010229479","38.69095618152078","328.0892059636093","313.2756741431351","188.73540898216",".8790967524128249",null],[null,".3684568070216533",".9883752168454373","7.561742353660645","332.6473284206752","61.35687194305481","77.34659481768445","1.003047046038451",null],[null,".195732935158961",".9283677811676807","5.850331165713506","307.5407318303427","46.29238000496146","65.32917612567496","1.101853825944705",null],[null,".3076558802175063","1.090561822507325","8.167581315903281","357.2835132880864","268.6860647674443","101.1124932290831",".8654234095447246",null],[null,".2652013591679716",".9945831210119307","48.58896263460026","177.6029969295874","137.8314929356691","246.6236654837717",".9936706151025743",null],[null,".2907772595228251","1.077031188100247","29.48375940050867","185.8673169714856","172.2406110578019","93.71356082695078",".8817828635892544",null],[null,".1087721005049873",".9859058920157908","13.44270283943703","227.8300261522143","250.7317151811382","30.88336113591013","1.006817790146529",null],[null,".05010282146929586",".9840437758577947","17.46938563256814","85.61367987718093","346.7152571429824","107.8702917628471","1.009676959178997",null],[null,".1737410780833169",".972172639331071","19.18780712015011","109.3621605650061","358.3034245892497","175.8744934541025","1.028226949975277",null],[null,".8187541483728402","1.080986292697726","25.11885689663367","92.84853739737427","25.50459169584049","189.7004308195741",".876947902012275",null],[null,".07679084438976477","1.075274607305905","8.703825141610755","313.0802474653444","79.92108851762669","89.62171261922504",".8839444815305504",null],[null,".1599149896695337","1.016866186733782","4.251370149158477","167.5735828412695","43.38313070297399","11.01789549080279",".9611880539077684",null],[null,".5002298456442834",".9464882552048866","15.16933713101594","171.9462447072002","47.31395908313996","77.200722771934","1.070363349724524",null],[null,".1969028238980556",".9263507323599759","2.448638032180404","354.8882618873093","195.9188609338443","206.7612555319723","1.10545457172789",null],[null,".1982999501097877",".9544573453017627","2.874773949927353","165.1000867923485","309.3858832304285","257.8877804093782","1.056986126698893",null],[null,".4654333255448129",".9118407894106014","8.564118558570444","339.6074088810509","174.0309773550669","105.8259387140102","1.131945586485832",null],[null,".1457726607392369","1.042110702851261","9.086573510120198","191.2923619162608","284.0880254194644","264.8450076182773",".9264741139715148",null],[null,".1210648876181461",".9681582074177892","8.229646758454644","11.81807276688435","238.1278293951227","65.17827454213709","1.034628831897023",null],[null,".5003428655749093","1.083948664972159","15.62961692619376","24.14214625471519","118.0657270036664","324.0825133764",".8733553835431912",null],[null,".3105679064584923",".9668411971478245","14.87893491998998","205.1391290844979","1.393686223089721","134.0731097865863","1.036743575343653",null],[null,".5827716868536822",".9620973885421754","12.39826475099156","24.02576329913382","203.0511523087321","101.4927369710181","1.044420818742947",null],[null,".1209336073282452",".9074402074013411","8.216063770603684","25.92601962302696","146.5777701363878","99.93187096423648","1.140189523952053",null],[null,".09435766663939657",".9677863565895948","9.57714113054365","31.39479850507072","236.312421561323","55.79812145751222","1.035225189562371",null],[null,".05862872207147071","1.049499381474511",".2345888442515244","214.3034309512266","137.8898424531098","294.3421114732606",".9167075188342031",null],[null,".5147554118727586",".9061336357322386","8.804099490059908","211.0754134282044","44.66985033366297","329.4681241486027","1.142656504807844",null],[null,".1870809532545246",".9867329999045241","30.9542955361222","217.7906116665017","70.83298252479719","90.69465938781318","1.005552140164153",null],[null,".1503861206378949",".9721294651214044","13.11935931846921","53.75823545869657","179.9493019678773","50.41698360366954","1.028295449152197",null],[null,".09063079450154496",".9762326635260984","1.224769969661808","220.2273472062506","34.87627991830418","348.5732744902901","1.02181923129406",null],[null,".09777229786374811",".9664967406433776","10.12253676576088","225.5272282750834","318.8693650135202","166.6822472770486","1.037297863117577",null],[null,".2197592458672029",".9009000654509217","7.073500394696882","38.95443585826833","163.5908811092476","142.4048411058309","1.152627949042206",null],[null,".7286104856155861",".9651098049510075","43.33301896819341","114.670684221248","91.27972742160729","219.4629949737515","1.039534679332564",null],[null,".3382486260687058","1.072791373565416","12.25365336697183","353.5264517456175","210.3551315522591","307.4263790217018",".8870154101797398",null],[null,".1527948753008771","1.035266561134638","6.168203172087142","229.3782133638905","276.7091865037223","307.5931642417361",".935676654843493",null],[null,".2040982693564607","1.011634489852949","2.394152440183687","177.6463937912128","352.0786247554564","136.0043302800325",".9686539031539079",null],[null,".2105921394821562",".9732435993908785","8.539737255929227","236.8419218999427","66.27148258426762","91.91020328866279","1.026530221117572",null],[null,".2707327715928551",".986297298454056","7.649686728648634","255.6739979149347","64.68072630942389","83.51920082015323","1.00621852479569",null],[null,".0545525714974873","1.040854171823001","8.529892567213482","260.1742939601347","193.1386957823493","296.3463261334944",".9281522953735342",null],[null,".1198080271354271",".9536360370519421","1.650492661133315","276.5833651536326","34.99914980228863","151.7123660209389","1.058351896672489",null],[null,".3612781114711336","1.042815271954506","16.42075323545364","90.64576868879399","129.7237617513445","200.0139478237513",".925535326275313","0.532"],[null,".3308943443811994","1.078862196468733","11.51082866061343","98.91422532393746","251.8735304442592","64.18438377001131",".8795390183050943",null],[null,".2838796343179554",".9425045538443232","6.233131700569595","274.4061214728249","63.848426521316","216.2193380143672","1.077156702236235",null],[null,".139873314235046","1.078757053432368","32.16972616108046","130.3255299498762","113.6335456680643","231.478003426783",".8796676102656639",null],[null,".2517448781742652","1.028097691809603","19.35435487187776","138.97359610","230.9935212074788","109.7590094128833",".9454803291708694",null],[null,".1373170653646037",".961138884835489","30.02225592741203","344.0634451514871","4.695359051938865","45.14764013505108","1.045983544148043",null],[null,".6628832935177986","1.082932737856096","25.95682789408346","137.0000568784378","208.8530939413305","19.99381069642926",".8745846475281916",null],[null,".2484202988983523",".9686865500492797","10.70063601124406","322.8008421810088","53.9614012661922","277.2360351870961","1.033782483856371",null],[null,".08239498123552266","1.077700845930765","12.59433722226547","140.987448955027","332.8362637487846","351.3742093915191",".8809611127352317",null],[null,".146789763504377","1.088977562888954",".8539964724636919","321.4497852084163","242.8768658168104","196.0799915834253",".8673126411652928",null],[null,".1971645192944172","1.004067472697421","20.99212883300646","322.9063221220274","74.39016613223392","84.95106802065298",".9796246999199547",null],[null,".363301524246274","1.007956018073547","10.34076507558602","326.12021427","56.67918024813014","80.18340558720347",".9739612998490699",null],[null,".232932211905654","1.053516788106706","4.223610096169061","141.4330411043105","274.6370595206142","206.8012147710953",".9114689591553721",null],[null,".1233096517192929",".9288923973758298","3.200865913728546","341.1018709016685","42.59626282362701","331.1558893317279","1.100920506725825",null],[null,".07162715516488292",".9447675514687177","44.80956844249382","321.2630625094606","20.03768607046867","182.7554193442505","1.073288857532734",null],[null,".6737007850613462",".9578172737628781","1.782943486623506","224.8661541667798","146.3632614314439","349.8381003405074","1.051429302515202",null],[null,".07403013505047228","1.049112444420749",".4412592189723666","124.0227924797508","343.729332791554","161.6805583187383",".9172147201535529",null],[null,".2776258406313397","1.090255839573436","7.747134911183164","166.2955444687763","99.90787656802141","290.5338312447398",".8657877598621244",null],[null,".05706797824799646","1.038718302405074","1.039076761755038","357.3214981706781","234.8367581995845","299.8643360827684",".9310165428364319",null],[null,".1749139136715653","1.030486916006353","4.332532542274999","174.5380736308149","260.5848124872796","29.27447565395671",".9421940362095087",null],[null,".1507900037454021","1.010807829170384","13.09901707110648","169.4812547782942","268.2886165466116","197.9365133322367",".9698424254951121",null],[null,".1270258269763245",".9227342012568498","11.12517676300496","9.900695002622648","325.0233489881086","100.8633612552638","1.111959953664518",null],[null,".1578383095350653","1.05341941531294","4.073924873875447","194.7757765856491","278.0745797159577","179.2760957803526",".9115953394868185",null],[null,".1541034431063467","1.090740028863791","13.9801376790571","206.4288960681338","142.7065993303942","44.7810553298796",".8652113274045606",null],[null,".2541636148997889","1.022407979435215","5.34677306172607","213.0011639783739","101.1332926408245","267.9174398511151",".9533837130015325",null],[null,".05559567501036488","1.071505583193746","1.391887521581738","215.2613608850519","350.6507097559036","241.2312039950203",".8886124965232617",null],[null,".4631832323290812","1.045296580355095","2.500641845335474","47.85903219757706","58.1674321672451","205.2292484708397",".9222417512097789",null],[null,".09309715513308107",".9838434381597142","6.958418686163706","39.1348618667364","317.0153542979308","186.1106788260426","1.009985372052745",null],[null,".8034116549781298","1.077131848198679","32.04130308173113","216.4458822621736","158.7866389470892","198.5168483126857",".8816592599520769",null],[null,".1076779699117485","1.016238572984569","13.70377101252293","220.6597910539269","259.747362178081","112.6694578999147",".9620786144291238",null],[null,".5921755392564702","1.022086346991175","22.48079568684041","64.91827776050131","27.74195478326266","35.93289688391518",".9538337678185712",null],[null,".1065951829352605","1.038208561563206",".5512360266455727","225.6372110524583","282.2056206685585","263.5107302279753",".9317022943602367",null],[null,".156624594214022",".9749542239358361","25.60472324443731","246.1061141335419","152.7614043298691","218.3225377639453","1.023829729238613",null],[null,".08485086179137069","1.011044632437243","1.984520415832909","240.5680594236148","102.2021482689323","313.321345366835",".9695017158975959",null],[null,".4993103864166821","1.012148729385344","23.64549440610435","78.9196333447797","303.727243915703","284.4439849833178",".967915785067941",null],[null,".2758949748669428",".9792801409789017","5.771549034309417","249.26886947","249.1967840763003","47.51325736942397","1.017053158169244",null],[null,".1034903250571632","1.066137963110751","29.68901549737418","97.9691249896831","347.9325946619119","133.1925412121641",".8953317011090104",null],[null,".3032824549922455",".9642286491719061","9.975305272126766","104.7593396752423","52.43894561300529","180.819589003958","1.04095996558795",null],[null,".5117949104538149",".9437303539197465","3.30323086932133","18.73151197815648","75.59236925731203","154.8221729585184","1.075058724918164",null],[null,".4528198916139051",".9079348350366307","8.277635650671217","114.3223444177313","7.418091831577346","118.516252932189","1.13925791673361",null],[null,".1617028153559388","1.063457063680429","7.46432197274981","350.7406090315326","147.5132467607972","108.2706773977924",".8987194349966641",null],[null,".7019965607465418","1.092002107002433","16.87110323942028","6.698071546911888","122.7100614457111","341.3898368893153",".8637118128085587",null],[null,".4792016607073609",".9284142582971836","21.14042740997823","5.024565386520096","135.037903243511","248.7205515374951","1.101771087509383",null],[null,".1256937684546676",".9640899994647066","1.907714213801289","189.4481469080016","291.25668314","242.5458537966873","1.041184530696267",null],[null,".5181273225334799",".9567285117822896","21.03950573930992","10.12119760518986","139.4188899208782","316.8629968622076","1.053224610993997",null],[null,".3967130849534125",".9528428797577364","1.503929529459943","9.66901180815163","127.5444964179931","3.397609140460191","1.059673647944477",null],[null,".3106543755558027","1.065570327008056","5.756618671179481","196.4365895479979","71.93465316788225","279.4812199435918",".8960472197311512",null],[null,".3587455650573533",".9901969527173303","15.98273325267941","196.6647168089611","295.1836026721283","279.9111517750536","1.000280253925045",null],[null,".1229224439519171","1.087503400540283","15.47675215694544","16.5371775541985","61.84037290379779","354.9950341605395",".8690767636894448",null],[null,".287335668567768","1.09432700253446","13.3372306305573","12.25472481612191","241.7840610365882","92.2657583799146",".8609608441773304",null],[null,".3208253743876575","1.009187506995778","12.6005046304335","205.70488379","52.60160218306647","93.6815118675751",".9721790890706961",null],[null,".4111234615769902","1.087863554721506","12.28910421482171","32.83001391110147","188.6498600069348","182.6214677066555",".8686452173046413",null],[null,".2334539818382315","1.052696823017142","24.84736431504079","41.58470701200577","130.3469438517816","175.0866645141222",".9125341066324777",null],[null,".2686337177104202",".9894999727288825","3.260115244434358","21.5979395403394","253.6098401302157","166.7056354588856","1.001337300046381",null],[null,".0685743833229439","1.033287270610691",".2627166132567141","21.12799649403111","300.8766102654266","139.3519853952463",".9383664139028114",null],[null,".06861239219681015","1.010847552418382","7.45050589346771","37.3079161767681","91.99000379256815","178.7240261113934",".9697852582507385",null],[null,".3479296736033084",".9896704568818423","12.38335137067085","220.3081286706036","301.4045585487706","281.7396844965425","1.001078570304807",null],[null,".3879806625733931",".9214244582324866","4.166809491765656","37.13172425504107","235.249338453896","91.43221472683918","1.114331660635774",null],[null,".1377453438042244","1.074010203336941","12.64874750386283","57.72805711665049","84.88460685497844","289.7264312632608",".885505907753272",null],[null,".1881839650534357","1.025097242616128","2.010370989321986","238.0169947644241","85.89289476034691","189.4747736450749",".949634482207435",null],[null,".1880274256260524","1.044885488759567","25.64738565706417","60.48648710612584","188.879729314348","139.1651387737902",".922786064138821","0.407"],[null,".4927160973663332","1.049511743547605",".6729183387071342","263.2990949966263","49.57296887547727","60.31808804168525",".9166913222021156",null],[null,".4438167701166554","1.064849379358139","26.45761270435385","71.75614221021137","259.8764398851995","212.6135265597301",".8969573660113682",null],[null,".2203785751176249","1.036265836924587","3.516629477235993","88.38147250467865","264.5622437787115","53.43155048670016",".9343235653857694",null],[null,".2553136726467034","1.034359699658458","23.2934650521834","91.80310558781646","99.06135173554128","303.749490656747",".9369074381045477",null],[null,".04559954786844141","1.015895955596108","12.04441457807025","91.44122884307163","82.25572180394319","84.64120783519189",".9625653561830607",null],[null,".5401550635722573","1.081002068304359","8.544512906064538","117.5544720108239","134.5933091983425","285.1121756027291",".8769287054720916",null],[null,".05194145221160616","1.062122254986983","1.267267751045123","253.1612091805943","316.6435400505305","119.5848657796352",".9004141485735687",null],[null,".184366526869574","1.062623596145556","4.550438252014442","301.0837942461937","95.79491272236773","196.7437004440089",".8997770065610654",null],[null,".2789905314855874",".946043712699653","6.501768616329377","296.0180368059355","300.1757515998953","310.1904223085562","1.071117878118894",null],[null,".212588660230211","1.012616255503159","3.554747152028861","126.0453604961058","121.64206661563","53.69352787235425",".9672455306601891",null],[null,".1399946720706807","1.021217248209839","1.018240701745365","24.72969921679248","195.0491621390244","10.9595052653236",".9550516557581172",null],[null,".5596993087270273",".9371370193025705","1.867628814158693","149.54041755043","120.8975617842393","42.87880844086735","1.086424205117088",null],[null,".2199722459155902","1.054548148323868","17.46875088228729","337.9201923315346","63.4389174136331","252.9970775297648",".9101321454564706",null],[null,".2639145348200399",".9013003009065664","22.77048062106882","304.9787287046579","333.5151613919194","351.4753948829606","1.151860272574315",null],[null,".1185975325404615","1.016771149394088","6.707330761206722","157.8494062943989","215.5149389122512","227.8143430159386",".9613228200597136",null],[null,".28144723012046","1.051267867608886","2.979280354241309","1.930903778273566","273.5505214504019","107.7273770854254",".9143953071860725",null],[null,".3561949453450649",".9269690012722291","27.70278153908486","175.1595686998611","129.8322177574807","75.5019799663765","1.104348783588393",null],[null,".4661180993383301",".9800177414190236","26.1088976469233","174.6358628432149","124.5585204258374","290.999401254041","1.015905162088561",null],[null,".3274508605870806","1.012560904141517","20.98120701983789","162.6115179316497","244.6758896457282","208.1564257046956",".9673248430579973","0.129"],[null,".06383710338349129","1.052157535029986","14.4400853495126","7.080229078248843","281.3941227480843","265.7652627218077",".9132357816014784",null],[null,".1140690535857876",".9642029312069617","31.60890438280592","6.71413534622482","15.76644781834112","165.4210311617142","1.041001613799986",null],[null,".1256836245641837","1.039354092113798","3.77914233264397","203.7603862135886","269.9815786468479","305.7572236286006",".9301623966748196",null],[null,".3678941242649804",".9077632609529432","5.432191864824311","32.33357263375805","317.1282779007673","221.6208293273534","1.139580924467213",null],[null,".2644927210959417",".9954379128490902","1.583139264457365","228.847985341724","219.7526159611385","303.7307272644003",".992390978544299",null],[null,".453782115597991","1.034392525620619","20.34388814961257","222.3250460170233","242.4679619680753","315.8754972202626",".9368628399805035",null],[null,".1503235982752917",".9879695173828132","9.792741793732249","244.5557734900124","254.1302309193056","328.3404116081531","1.003664945799344",null],[null,".2992338957523394",".912640642994576","21.03296035080851","87.54590424181033","23.63004217067981","337.2585542060073","1.130457828400653",null],[null,".5008934399199291",".9233910485040427","31.47294485218566","274.0227567573926","207.5190781907876","236.5008600457095","1.110773688217124",null],[null,".3426615264874875",".9955801061131027","7.089961384331207","134.284777891247","48.23024210053681","202.1858233544289",".992178379468308",null],[null,".2942906193478597",".9449771903446211","26.55747449527076","325.6345364468424","195.9966170731642","324.7273029967937","1.072931720991544",null],[null,".1878713113767294","1.06022396183508","14.27869560139959","323.73872154","104.4257359119548","244.9649156243538",".9028334697735598",null],[null,".4734469788501176","1.054723280848855","27.91053638560697","169.2986941076048","65.92834740065959","61.7668205077586",".9099054692393703",null],[null,".201183184897492",".9076014529055458","9.526397345160811","350.5538078523772","162.1727516091713","210.984606925959","1.139885686403594",null],[null,".09418404119894347",".9912023331397822","6.810187137819959","6.661404640039249","101.7435988001909","351.2332705569989",".998758757610844",null],[null,".2490432478569856","1.046401666070914","23.74076908888002","4.938996773785445","224.6270416970567","127.9646301937096",".9207811929556423",null],[null,".1106708113587991",".9451024731796555","12.56632033088882",".3319350675318083","172.988130007273","335.0554233025966","1.07271838623128",null],[null,".2616971780182541","1.042334461404876","23.85797497888934","358.9608830428842","159.2315445803563","221.7046634703024",".9261757998683234",null],[null,".3672552222404802",".9814061135876962","9.665027554775458",".7885611407135792","139.0032712943605","77.22675705145808","1.013750158950748",null],[null,".5326466451666891","1.090304210190412","4.751749769807666","177.7780338507707","66.74131906132941","55.89285295942541",".8657301453588876",null],[null,".223986836273336","1.029329299113439",".785889102095678","15.21173651554389","103.443978677999","59.52994933663077",".9437839156609413",null],[null,".124852969476048","1.089856792429929","9.228230547186621","201.3665120896521","249.0512604686225","11.76038592648415",".8662633109937325",null],[null,".3403128559100319",".9294100063890951","21.16455508535767","29.24035363603316","222.2421635488317","10.71128522772773","1.100000944273511",null],[null,".2493306978066214","1.011882777625842","44.74642649178104","218.279056893669","346.4806791238948","358.4925448565806",".9682974041032248",null],[null,".1215575884502262","1.039321543349135","4.412747065551202","203.6848784568607","261.7883946467113","349.4381586905",".9302060923061354",null],[null,".3710659736469893","1.068948958979032","18.24654945085957","37.10510349320731","218.0321458882013","315.6198596457883",".891802367383258",null],[null,".5959946522087277",".9613468834927592","8.728749191886619","193.6328369017277","334.0706307608919","278.6003737041517","1.045644096328111",null],[null,".2980398427753419","1.080722204702949","11.01744465946163","211.9613010359783","81.93969459917294","181.1674124889056",".8772693614392872",null],[null,".03078445925160921","1.023451296647396","9.053232393431054","33.01169224385116","100.0169638737506","71.35998921936627",".9519262502471045","0.105"],[null,".2070715222792614","1.052922894815667","2.843852699382627","215.8621614719797","277.5383142433022","226.8297812745269",".9122402287704647",null],[null,".1138775056297806","1.096339776234301","12.91405752616265","35.22713267579658","57.33779850571121","328.5757360565876",".8585909715752558",null],[null,".1884067545759089",".9233641229935885","3.78260040677262","218.393576487331","45.1425962051952","65.81690386927302","1.110822274196112",null],[null,".1799397742214771","1.008716184662349","23.71804807628418","230.8167893427467","46.22085748559087","24.65627240741161",".9728605442349931",null],[null,".2817433007784398",".9708934088799764","5.343355889391854","226.4698386747646","315.6609966825433","110.6531173917246","1.030259777241874",null],[null,".3465863786860392","1.057421965085973","19.8972276692848","231.3929718689854","66.18035567781916","75.35607530817633",".9064243894455414",null],[null,".2619542100124996","1.090733152588328","2.525922022707265","57.13194025029416","273.74747754","88.48903584386572",".8652195092051922",null],[null,".4082140216212535","1.066383417931355","11.64984047175891","65.2981080129948","127.5018375671035","106.6849350934774",".8950225944145326",null],[null,".1550190685124644","1.033619284882566","4.236635440062056","61.00194706076339","269.9585739396534","136.4189012831509",".9379143238158547",null],[null,".2314804077142812",".9019104466330521","17.94367029110452","244.0083711901035","358.3262997108963","317.4038632750828","1.150691613729249",null],[null,".2234467368966396",".9954513623397213","26.80066510270629","61.25639426153828","126.763393923229","255.8566590420187",".992370866401779",null],[null,".1566745898505865",".9000249127013602","9.242345950305021","45.58571121780876","198.4106369772099","338.9072440617397","1.154309520314095",null],[null,".1782435888385049","1.082904055151156","5.347138665920188","243.0071063224071","257.7860572330348","300.2869181907995",".8746193952340692",null],[null,".2969333721660268","1.07908654525771","17.78143095097162","256.7401474496708","318.6032575198519","339.8306716776538",".8792647401326015",null],[null,".1214670200919884",".9351913948894692","1.526124941313185","87.48422485035785","193.5865162876458","300.9385816854069","1.089816354291357",null],[null,".1101010580200592",".9419013439726455",".7002968984483311","87.19872517538911","128.052240066569","318.5042764620959","1.078191612490717",null],[null,".2977425064673137",".9620017133086578","23.60370820558862","105.2251847208088","242.8714684671175","323.0090108150444","1.044576630872176",null],[null,".3379914245348074","1.01234883104582","19.58329893292793","289.9132062481532","323.6180642867737","67.03075134072796",".9676288207646409",null],[null,".1235955160365496","1.016464700520353","11.82190991327455","285.6201957262209","290.0202305084713","56.28623024787798",".9617575894594709",null],[null,".307602270807224","1.046167386209024","3.830733507658575","112.3451860280983","97.78428664893801","223.9110584904028",".9210905113834772",null],[null,".3102817783287626","1.026291421695765","6.001141634805128","320.4424836846287","76.6836099819317","111.6189725688465",".9479774913313108",null],[null,".149972410076299",".9868487476156099","2.255488906915994","328.5082581767191","278.963208845235","262.1363479697072","1.005375233194978",null],[null,".2838257308415395","1.017201274952789","15.77202740809376","145.1314411273557","254.7709696251736","73.07846834939377",".9607131386583988",null],[null,".2306533597813656","1.07036114935198","6.181509242424852","327.4355359147005","73.81658428303734","165.217179327682",".8900380387328813","0.034"],[null,".2013801912540785","1.023889767628664","5.930142493753915","326.8001637923072","279.36013252","337.2340314926079",".9513148357750426","0.083"],[null,".4646856916251762",".986765844184525","25.76023283469006","324.7798140960086","46.59070070331602","84.71646269425258","1.005501936215436",null],[null,".2106581758934546",".954707879843597","24.74299427403971","286.7094480907941","103.7507973552352","7.579013665774801","1.056570092378061","0.277"],[null,".1095525649193036",".956635976284107","9.746143291787252","3.968648239798478","42.79788934020488","336.9054379968786","1.05337743247986","0.040"],[null,".09724602010036026",".9400587415076315","12.67347193081141","173.4355662375803","166.1123829149177","201.7625884400166","1.081363198960778","0.087"],[null,".2111233553295156",".9897277086551503",".1243455733910966","161.6735302952185","125.9418877091535","203.6606506460528","1.000991708995887",null],[null,".1946649742434585","1.090098453961461","5.603686980877868","13.77801507938172","246.2179618405725","233.2246870399771",".8659752669435583","0.018"],[null,".5137789090217394",".9678620753866112","13.71901326681078","176.0773900767354","212.557734368172","112.553263415123","1.035103708713168",null],[null,".05866169916167594","1.03435686042551","21.23997493253759","189.1513926782897","294.7262617851378","67.3086993423284",".9369112957217801",null],[null,".3891670894801524",".9125936874707661","30.00344936924147","21.50635914237308","25.50383818422697","354.759855470988","1.130545077397105","0.151"],[null,".2029508312636266",".9294861862707481","3.624034810622879","198.4564469923658","233.8725801900762","179.8267916222325","1.099865714359448",null],[null,".4427858632448687",".9224323849361477",".5830787533640454","348.2387719800936","82.76566112668084","221.4075691879725","1.112505741819321",null],[null,".66027643080887",".9588049606497652","44.05241708981177","295.0875589420785","97.90333534295647","32.28510891573726","1.049805068979689","2.055"],[null,".195688441327785",".9595667693261886","2.183190993643556","251.2548457210265","185.7766223314236","262.8680996274631","1.048555142634247","0.032"],[null,".05005851314889428","1.011209083481472","8.184607478826626","39.19968150006072","60.45537685285248","199.7166153507417",".9692652231339142",null],[null,".1503211862525992","1.029400209200992",".1674018335097004","201.7618973483013","137.8726753445677","204.1451634692343",".9436863987083939",null],[null,".1928833512235449",".928484066154555","20.65874325463468","43.54245223255192","40.89765815674969","178.4695490376797","1.101646835242607",null],[null,".1448255587412833",".9596776897563093",".7190814138678944","36.99053845017491","316.3052723219221","21.7902863893255","1.048373358435381",null],[null,".05472075479426988",".9812930577512664","2.25891763801504","49.795137656402","43.73175133022645","76.45834059786951","1.013925356878032",null],[null,".668578405077617","1.068599701566349","3.207615499905607","50.64573060685932","28.88973424080698","94.15931054335636",".8922396134850142",null],[null,".2558642776198374",".9586828437023113","13.9212899580234","65.39429591824165","296.7686261948659","33.86913664125005","1.050005661501547",null],[null,".4594578443925163","1.045531589933344","9.802758734897756","70.83599952536724","48.3399397617883","221.1722716388641",".9219308230645763","0.192"],[null,".2612847383363294","1.061083893151953","12.27189115204775","232.6843873067653","137.5334657958429","326.1400023555748",".9017361708801616",null],[null,".1555295331409408",".948510188643534","11.65155512916199","87.71654660159501","19.14147137867203","337.2466657514116","1.066942643688461",null],[null,".1322361691602218",".9923408113995028","18.26390367847728","98.23242861249604","340.167213950665","12.29655146753139",".9970404886533417",null],[null,".2685093211886973",".9297127511584117","9.042665133704732","98.75508127902556","350.0504451610246","181.8904969480753","1.099463693784476",null],[null,".2446522900266755","1.071654485297153","38.58156304124343","83.062650520315","327.6666670413842","271.7147534492399",".8884272992319164","0.372"],[null,".325890415811404","1.032910426863074","21.44274425026635","271.8384174068947","116.5776343783827","291.6347654557864",".9388799866575348",null],[null,".1514594819987075",".9723571667131962","16.11773068212805","105.0639927249505","318.5697515715195","196.8817849409791","1.027934268903218",null],[null,".1836612102536687","1.014447517881294","14.7642397447627","277.1740786040489","262.9823244090049","72.66543393659765",".9646276316935064","0.219"],[null,".3250845898989759",".9508846555422789","23.37363201874198","212.3614674620786","282.5610755212312","252.0356637154121","1.062948724303927","0.303"],[null,".119272850447029",".9365453438311289","24.19636640291606","335.6176594585173","184.5029113003072","21.5046511866759","1.087453912979195",null],[null,".1857958763352862","1.034637415227142","8.009191474180458","159.2946180363288","73.64991267528676","237.7117519863513",".9365302388309023",null],[null,".1882610960953179","1.061401281317193",".8824374173016234","163.6900945716568","267.4335609620527","265.5596461199983",".901331735257182",null],[null,".323117694958318",".968188868630358","7.086093330686084","340.5022013730123","236.9155578435229","26.0589192695474","1.034579684373618",null],[null,".1904165156601353","1.098860462814303","12.9824100480803","343.9135990643324","187.6543702087036","255.3644653094041",".8556383713188674",null],[null,".2033179544669286",".923656130447976","14.07578271226269","169.6212449041144","359.5431227907611","134.4243253225225","1.110295547740528",null],[null,".407123609071025","1.066121027240077","28.46006917191465","167.8820924064534","69.82980533291096","355.663112736331",".8953530353877629",null],[null,".2907627713053546","1.047955891526495","20.32972756493511","175.2130827789612","280.8532133127786","337.3511963581589",".9187335340340389",null],[null,".1661181598133961",".921079841249725","11.30252859772183","183.4048848347588","335.6927425580388","178.5036517109748","1.11495710076827",null],[null,".1979032758931835",".9075536221014758","5.547852280310011","181.8237836854793","36.25453530266459","210.4554919053568","1.13997580069146",null],[null,".1287621963998606",".9410696362157261","12.9585611416908","15.43791868980788","208.2408356941436","274.5371008967324","1.079621270397559",null],[null,".3344810683846654","1.02751990889306","20.21830191147849","196.2568753630705","55.5347279460425","91.61326554725426",".9462779183463911",null],[null,".2339441493516998","1.042652373192898","3.84803228877721","196.2450722231756","86.10548155016063","124.1436723923494",".9257522362220427",null],[null,".127967830180415",".9488536082771627","1.156785710127541","196.7251139318629","305.3498852591734","304.1009262684407","1.066363456510016",null],[null,".06708208298401795","1.061456737160474","23.81230636528842","196.0212263217763","269.4357253501973","279.4848134224446",".9012611010213382",null],[null,".6480668584218914",".9691761258675159","12.79297507810145","213.0490816657154","15.5607090871658","96.7902391533449","1.032999265559921",null],[null,".06571366162386043",".9417830453468238","4.853146171958921","21.12638912506857","177.4024459572347","318.5731594280505","1.078394768502173",null],[null,".09891809196879443",".940362395383585",".3544177534332101","127.1431720410501","77.23427887014346","181.4735400587092","1.080839464253777",null],[null,".09898259302554716","1.063649898767083","9.315889611011945","211.2422617540724","245.2108839362038","205.8029147486431",".89847504520462",null],[null,".07237965721965238","1.071021282576468",".5888835868614345","22.46290300490806","58.78044848846979","272.974636629432",".8892152915854529",null],[null,".3319231337885915",".922953211297185","5.090348264430471","39.94021093804083","128.5836433580219","170.59190898123","1.111564187210017",null],[null,".4162358480151344","1.045889418389067","15.63167565151381","36.65857164117454","240.4302585171977","74.74190633645343",".9214577354839292",null],[null,".08674073765940235","1.067212216758092","7.298309132456983","221.555679047153","113.9589379439556","59.02257341696738",".8939801827581786",null],[null,".147989611455239","1.071623738136383","4.229446374889214","222.5370690393478","252.6867742305591","179.5053352073669",".8884655358028225",null],[null,".03008184937455475","1.057233950301811","24.73602562865971","45.52576533205823","67.70209148738913","229.5272527979855",".9066661932026783",null],[null,".1811850858301386",".9184148968344347","19.1949253630053","224.0703034584959","310.2488971400196","188.1256043770595","1.119813489377721","0.124"],[null,".02710177509491125","1.023032138155907","1.475121239624983","46.1713522487852","341.6227293903266","187.1415117087784",".9525113474653829",null],[null,".267035304338022","1.011010822919481","6.972582964277801","229.3671191968805","63.17566485869175","342.5383036482945",".9695503484029713",null],[null,".1636949793813619",".9646409317692465","21.24397372711976","242.4964183915419","33.37420503294027","23.17989156571544","1.040292685455971",null],[null,".3133259618796104",".9291426788291335","4.536496233026714","60.65267257602428","233.2640951932999","276.1418906630258","1.10047570728692",null],[null,".1574645500580261","1.07653716910735","12.21791429367892","243.7288398532475","97.68524473227392","220.5043978215756",".8823899036433158",null],[null,".2677009306404076","1.075804356048814","10.84742710650144","59.39448125847279","163.7275196377077","16.8719229623809",".8832916525693032",null],[null,".1461789679072208","1.00864517642061","13.50272088750534","71.53732483643945","217.7763103958279","20.05633146023013",".9729632795686745",null],[null,".2354919694785804","1.046562555789029","1.561567668025719","20.44899913375635","159.1637825594289","262.6003813127742",".9205688713911017",null],[null,".1864768782220488",".9602853399430739","2.802807634250192","260.7187661296369","340.1400651279622","99.26011880644661","1.04737842997104",null],[null,".2840967955868575","1.068928098693754","17.68139872879379","54.60289591989186","275.953709243189","228.8400307928681",".8918284729874321",null],[null,".1789792043216603","1.077709096697545","24.36888420617796","70.28762324448023","144.1633407187607","226.6089648406491",".880950996012796",null],[null,".1119732620417105",".9523248632243942","6.023779603073326","77.09202472327543","140.2326860550575","198.2831979854269","1.060538378770076",null],[null,".05951106877782131",".945618887501421","4.541320643984069","66.52948105872943","169.0605601831853","228.6498012773307","1.071839768788976",null],[null,".3724566098045041",".9063811067683651","4.571544674661465","66.10888654177943","239.6021257873555","109.2329828661459","1.142188564085264",null],[null,".1573612373327161","1.086155923244827","11.84805634699017","69.88772313064337","274.9206377885862","69.51864328259632",".8706945208333248",null],[null,".3954680310513214","1.08188262766699","6.098210464739695","257.7611849460268","74.62953628376873","58.76535542968502",".8758583065896747",null],[null,".2836661508875916",".9032133297400488","4.47343950478616","278.877383155611","334.5065806509484","230.8632491312474","1.148202706903981",null],[null,".1996746978957467",".9694675783549398","17.15219112077757","275.4611527573535","290.6637294370915","76.61443082703579","1.032533472399471",null],[null,".1824902395591415",".9672137470150143","7.262137001514534","105.6443244778541","138.3615888846001","49.8323356967746","1.036144636142148",null],[null,".4977839747240201",".986839997550502","23.27495406924202","284.7416512748645","307.8348527197648","308.3908616451695","1.005388604843275",null],[null,".1555578680687359",".9818022546660088","8.574034268797766","282.8990215820584","79.83464016187236","82.19271492978172","1.013136673547334",null],[null,".110529281928898","1.068973753331311","4.516552283617457","104.9297512403711","285.5905561179331","230.1117926267685",".8917713401474078",null],[null,".2901862963105597","1.078016494416213","6.844305173572383","294.5567390793772","267.3987657249505","48.84004861385243",".8805742164965451",null],[null,".3367772336182034",".9666824139778781",".6850288823069357","58.00756161872167","291.0304040371515","256.6914608857901","1.036999022513153",null],[null,".01672547873433814","1.095906384073613","3.817166864361947","275.6804526352214","131.3790469226323","64.07685358785015",".8591003354060278",null],[null,".3275498248934177","1.022770797819927","21.28423697230724","307.9092231387147","291.8955526715798","286.0825672932862",".9528764520500811",null],[null,".02100654246856007","1.037799134652377","3.047870619391496","134.7593518141603","155.290387935565","191.1980849542806",".9322537039735121",null],[null,".09747728783142671",".9506753130075539",".359063721890559","280.352894189853","2.228843503694057","140.7293731380252","1.063299842019994",null],[null,".2884395711517401","1.079793041200326",".118711938694895","306.5363090713012","283.2367901852302","9.753248523994197",".878401942365624",null],[null,".5490334457348255","1.015792258165105","7.714083625696992","135.6328787409436","136.4701761837601","289.0917013697929",".9627127555693166",null],[null,".1562207571065249","1.049184738436055","30.36410904114428","322.170753349684","77.24371052064836","84.59154350208661",".917119920845971",null],[null,".2961964336678419","1.098254301423292","15.51339032193373","319.9851125950843","72.42678224465153","73.85742655416313",".8563468499976704",null],[null,".1874774678097733","1.010508488105332","14.88262524736635","138.7584141951701","151.1908483362683","36.31939995433625",".970273399356351",null],[null,".3109319552162957","1.018211831657205",".9565462142225241","340.1886887851393","273.8852572562988","285.7473238989065",".959283258140047",null],[null,".2292000112748063","1.034915724025824",".2766454053296346","346.3535982728126","71.42614891170437","55.33093078285584",".9361524876636743",null],[null,".04985594581142382",".9568720712564642","10.59308414895634","35.12180092188024","350.5502359330519","341.504889374201","1.052987597022231",null],[null,".2432951937155503","1.096115098324729","3.370012716055144","339.8020901742788","274.7885778894241","270.8189605583588",".8588549716468986",null],[null,".3228543637706566","1.097836100080491","10.02844719650097","345.0091685936265","272.1519718352063","246.3620485002846",".8568362119877355",null],[null,".2284110363458131",".9820205927569542","30.45553307927437","346.305802924317","355.3697691729423","176.9319980236619","1.012798807873509",null],[null,".4509965049502966","1.010049613031734","11.55858734691573","346.5158904339201","295.79264192407","85.79214764284336",".9709346809951453",null],[null,".1340817119043838","1.098283453671217","2.816538969389852","349.941677920704","117.6689618280995","344.8776139725019",".8563127546055347",null],[null,".281558665263718","1.08069250167008","16.77988613199892","145.1690869618581","180.8246764288049","255.4908595702968",".8773055295532769",null],[null,".1778968070482668",".9270408039787941","10.35808332366405","4.742115186076491","350.2048144864515","254.2704414787679","1.104220482284071",null],[null,".2787372298435639",".9115465928938488","10.82843062421438","334.7954778024824","44.00536266150056","355.9257663237306","1.132493624270431",null],[null,".1760926098948249",".9328122865331016","10.57223245459009","355.9954940397416","300.8509769401782","255.2007110062261","1.093988325019895",null],[null,".2229734720674904",".9253559083784144","13.07362855125712","359.6556871125301","330.5869304122617","324.5302207956937","1.107237715211073",null],[null,".1155171085759528","1.0791522557188","13.94737211900776","180.2660853644611","76.51641855959802","334.3519831895512",".8791844326342959",null],[null,".351642084498264",".9798957741234602","5.15723157755861","182.9975152449663","246.476114605473","68.41979356737582","1.016094842045934",null],[null,".05243330356345752","1.037734692938362","8.271720611456526","156.2876111916207","336.2132411545329","348.9351953855774",".9323405425840512",null],[null,".4467887499786894","1.054854875210772","24.79370827609898","9.075773029830399","332.7633160710205","236.3079211437338",".909735206915156",null],[null,".4676756951635633","1.023850086483205","13.94445371309617","28.68860992533051","37.55337356641533","107.2460439201021",".9513701411785859",null],[null,".1624113789856408","1.083378298512884","6.062695904369317","114.8696556845326","211.1297665384475","242.633870910863",".8740451677705499",null],[null,".6444830444386592","1.034443911936525","2.333217858159787","200.5178382117722","222.7035800082561","10.43839879746944",".9367930324277257",null],[null,".1882503684745655",".9705099248943362","18.54237997554962","202.5024680558645","118.617768729479","308.2464740749938","1.03087047756759",null],[null,".2247931288386136",".9137451555390841","8.126735134765411","47.38341961476703","349.8526797495392","177.0074206357429","1.128408743740921",null],[null,".2431466140010365",".9182357706814284","3.967541926115888","223.1473382081942","201.6715907497058","249.5005791280653","1.120141179178666",null],[null,".1367605262680335","1.055613399225847","11.2880154410596","48.4397784201168","289.3711440298127","50.62301678975992",".908754830917196",null],[null,".4213390529046498","1.012854840097298","17.58492008210976","224.58652013","241.4820637003316","72.38484780573853",".9669037892557446",null],[null,".08594286194379544","1.007821331131953","22.4944754221517","65.77706608731027","6.748277446650132","168.7263557254038",".9741565491193922",null],[null,".0377501953914829","1.056928765448873","2.44264160137494","271.3963613250575","5.557140728076072","91.70771210461093",".907058917061241",null],[null,".2752989720426803","1.055680261013629","3.21836441416104","276.6952988549741","124.912191059507","8.478733023343681",".9086684979438425",null],[null,".5240939124594551",".9039570886675529","27.74036322620155","106.2266703258848","48.91500469014012","225.967418642738","1.146785918973112",null],[null,".2035590791732478","1.017008114064326",".7489900507217404","288.8826405333","135.5514723698561","226.2077960499809",".9609868547828009",null],[null,".2423948242828075",".950844983999336","4.912409048589268","296.1688375507762","223.683642250891","216.102885008954","1.063015248169301",null],[null,".3824444134131344","1.059720509738936","19.42209463766152","150.1407610693587","66.93055173944894","87.99906532404501",".9034769234662772",null],[null,".3654453988425992",".9367268953132996","25.02081180417156","352.4116715675996","184.8868176369648","328.0567051032176","1.087137781397702",null],[null,".3195417762544252","1.090459833332661","11.09534797644762","178.5600118849515","288.8444817690336","284.2743035236367",".8655448251373575",null],[null,".2800087947400337",".9266711641992222","2.23669302595553","185.1211501675523","57.60595961484557","323.0879080214846","1.104881241782978",null],[null,".7083860687045126",".9095421166290534","5.978286134643446","207.8347495867055","313.3608399005745","287.1131147267329","1.1362394214041",null],[null,".03039198610434835",".9786346970413247","1.061217061626027","22.35038915844136","209.8549179738709","303.1901699667797","1.018059497444731",null],[null,".5469787557441869",".9369568549334499","14.5683042239588","86.55117001525788","82.47032664504943","3.280269887815023","1.08673757761576",null],[null,".2746443149564559",".9719109405806218","27.73815587810967","30.2066069456319","117.7568123511873","273.6173971879619","1.028642271705756",null],[null,".121173981727703","1.076581233319059","11.33380958804362","29.53074405491324","93.96140672675629","146.4480850482698",".8823357301869215",null],[null,".4625959491722542","1.071231206631497","3.929807514306076","211.4565797258168","288.1212319224077","198.4951290161555",".8889539214910379",null],[null,".2394647341399975","1.036223087723627","29.36826721343675","22.01332092924828","245.9555872031295","97.36677379025292",".9343813840155791",null],[null,".07649665842246697","1.034842799213148","4.544581986389083","221.1494581971539","50.59309524933542","230.8086895449813",".9362514446466371",null],[null,".3243021857088728","1.029675297661254","7.724973628731465","220.9002575069101","58.67794844270298","81.62071788985057",".9433082505221566",null],[null,".2596065673703449","1.080136537104502","1.720914505382195","186.2315843758832","53.49224424582407","350.4096669115714",".8779829627233549",null],[null,".392393114202123","1.081851567149419","12.50347139198665","233.6143574703088","292.6471599633255","294.2628751116067",".8758960263773212",null],[null,".3530071731426069",".9763653994846123","13.69387883163089","67.47721812651611","118.2221139825876","59.65169748898011","1.021610865329901",null],[null,".3307079023560097",".9540576591426432","25.22552354229754","272.9831198151599","345.7878206777258","112.9838982779598","1.057650405679777",null],[null,".09257012568706281","1.059588306306304","27.08312177489756","290.0883714773374","305.8934806267322","139.721696638601",".903646017172969",null],[null,".04706424246896071","1.043955175242086","25.03526710751817","277.8829302572681","170.2505192474833","9.657761351654722",".92401984064341",null],[null,".1029971498138237","1.068901909364416","2.848392166800933","96.62473363135884","317.1374144217357","236.4409556402827",".8918612494271384",null],[null,".1392749381830914","1.058304882257738","12.84109595983363","105.0537708410347","250.2335643956624","4.400778459383837",".9052903154186553",null],[null,".3972792693286722",".9090526156504889","14.08254945349256","297.458966188471","303.4039962682831","169.83896730814","1.137157297607035",null],[null,".1855978988190939",".9013011292134092","4.16614591999569","296.3426894851078","24.18118135765939","103.0493757450889","1.151858684714005",null],[null,".2637616075408862","1.068550200725974","18.16597996726372","297.7394569493104","76.49998080972424","73.34163494181632",".8923016140214477",null],[null,".1006493841641884",".9441977014383964","12.21573340791833","295.4136664333577","305.1613011525659","210.1289988910594","1.074260644414875",null],[null,".09875982667429604","1.062876790055735","2.640512600077446","316.7391585652477","255.5636559403401","135.7285674894623",".8994555142309361",null],[null,".2403428002567838","1.018033666401434","1.533387751691956","291.9925980884648","293.9361974001583","66.33591793416474",".9595350942461517",null],[null,".1881054808577586",".9807756741213226","1.484718265671942","118.7585736194269","253.9620078487953","86.45485081200167","1.014727769052002",null],[null,".1158460421702358","1.070703939895962","5.805735129483233","145.0651130959911","234.3110941211771","264.673681189768",".8896106485954859",null],[null,".1161453707422034","1.060420751261236","14.12470532879835","305.5140122617067","262.6645614700496","166.3107929813038",".9025821640953198",null],[null,".5079493712471392",".9429114351159712","20.69642112043546","124.3799729576192","146.6059167947102","224.2843222458224","1.076459562099203",null],[null,".5611596525985769",".9441674204680295","12.36995594478273","306.1550013647334","327.287582019236","220.8075179024275","1.074312324733724",null],[null,".2171054917549581",".9874439148238892","5.828913146369255","337.8635041197372","28.99401716188784","104.1257208013443","1.00446640760953",null],[null,".2466593539026891",".947628920534118","8.757873338592884","347.2591102786324","357.0776340309815","78.73608210363459","1.068431329412273",null],[null,".1480072544930132",".9599557669231128","29.78525796823321","342.7558681138183",".02792952352872451","333.329653772852","1.047917856853959",null],[null,".09264727322552478","1.09351308428426","9.544686495617636","332.2709019601335","229.3144648564634","342.6531488886104",".8619222621969733",null],[null,".2240477950544104",".9583741152974231","9.499943368277272","159.7710146857158","200.0732192993641","316.0605632051449","1.050513071926644",null],[null,".1720885510832541","1.052320721058489","12.88156149259091","155.3810328854937","274.6849315933688","323.8630428206826",".9130233631706188",null],[null,".1659593033393235","1.08408232358632","9.537261995027972","158.3223805218499","260.00787704447","147.1528605805394",".8731938720007449",null],[null,".1462759450083249",".9368323140655193","3.3004069401655","161.8087056498428","131.6383486659223","218.7532587826722","1.086954288339341",null],[null,".07830745649440941","1.07623550011364","15.82346525586694","344.4455326068912","115.0393783870621","165.8859427322282",".8827609307000962",null],[null,".4031700548592504",".9339075771648447","6.564835662030964","148.439254238534","141.8760911045835","277.0296809466504","1.092064338425078",null],[null,".1273678886222392",".9805468367512135","15.59851786501678","356.4920262388844","5.165931104344999","158.840915760499","1.015083011409374",null],[null,".3042501910782949","1.027340486318043","3.939686509710284","174.4134278115018","102.914850215737","326.3732886067976",".9465258269525949",null],[null,".1160264234348473","1.050273529355341","1.032338638797938","347.9826790041228","105.9331187225999","318.4848679876898",".9156941593977783",null],[null,".135355972244833","1.043984181398628","16.26347263139442","357.7141688013265","55.37798522776009","113.6882402327404",".9239813313294936",null],[null,".4444036290253237","1.036280628221311","11.75852652673329","180.787164375356","228.2075414635471","86.46109394760212",".934303561432502",null],[null,".0664631591392419",".9912477611518661","24.3567816910265",".5941573266955892","327.3069938057516","218.7330355024392",".9986901000483145",null],[null,".1183151305958211","1.011601387474666","2.120768615272569","11.14868751156217","77.45186027069235","209.1979593413347",".9687014490706619",null],[null,".118550192955462","1.099112347216079","2.338315601656757","186.4924533504994","42.3573241415679","290.4966761566735",".8553442572391665",null],[null,".06730186621815942","1.075170759661627","10.82151254335178","183.0944625749577","343.9293887745556","121.5263097239281",".8840725510968758",null],[null,".08816400456180581",".9876807747392283","4.941431823700023","38.12078461521983","348.4040214252386","81.46028595809535","1.004105101247082",null],[null,".2156723875928105","1.0450179983131","5.404097227643411","164.6433305053471","217.5410505953614","87.82411850965933",".922610554109474",null],[null,".2326949637753701","1.049636590891142","25.13939532627839","201.9774675422439","263.0520519685837","74.69233243378977",".9165277754934023",null],[null,".1531322187341892","1.025796985127962","2.406207466462908","194.7364301859638","108.7752034451479","292.7656196999839",".9486629649969045",null],[null,".6614543573238941","1.060796842348788","49.57659683057029","207.8101115238386","163.7053583270103","64.80130129836179",".9021022093029629",null],[null,".1430117736070617","1.071205279185745","38.47320254023803","199.5578228071883","211.9080759711103","240.0881204987133",".8889861960389062",null],[null,".1761069766544081",".9863895772724544","23.01793366183724","37.07319097519237","286.5362670157496","176.6270227113852","1.006077327308466",null],[null,".2922710134036938","1.03386215700551","14.45639402616538","28.55552155732998","64.41359258462123","42.2144283345933",".9375838447533126",null],[null,".1207048016949348","1.073911107789829","2.204828547776824","222.303859167681","96.38653490503302","347.485101293975",".8856284761592212",null],[null,".06150492384404958","1.093783499418868","6.313902512895421","60.29252673525826","278.0113422933062","215.5979689100024",".8616026435271373",null],[null,".1240161102999211","1.062216751368706","16.34431884041808","59.08755950342563","289.2228172782828","25.85535071391496",".9002939979734955",null],[null,".04974029603590321",".9876173226437005","16.93967977508876","64.85730298642065","336.5237088189873","69.22860345260145","1.004201869896252",null],[null,".3378734072224773","1.091699742779618","11.89260845209787","148.3263911155194","218.5921121344817","226.7242684677014",".864070666469661",null],[null,".02162091567815821","1.040380731578218","3.159060569899312","234.0803259048112","79.51496939786129","178.8229070194971",".9287859210613489",null],[null,".7602840498079922","1.079388358207836","42.2583155228418","111.9121882932397","358.5380125551798","61.16416810555254",".8788959827733644",null],[null,".09616277311885704",".986335234269148","5.128260907497019","260.3976708838582","241.8309551813756","322.2392439561485","1.006160474520518",null],[null,".4666892584120129",".9380866318477822","13.42569905555215","220.0797486856945","280.0778503998549","322.169836897468","1.084774963640822",null],[null,".108850218359967",".9770539385776496","3.755741653929372","266.1144444954361","135.4709140563613","150.1085127556597","1.020531147440501",null],[null,".09487946193703264","1.054107561160809","5.839401887134495","142.8887319507712","50.04458888370466","211.1999438682908",".9107028193412625",null],[null,".3668260050124232",".918957487833474","19.40744511738068","140.944685570782","356.4463256778397","134.112947820576","1.118821858593504",null],[null,".3744679536692131","1.025785022708154","6.808039204586509","344.7724027799901","116.1805007919014","162.560288597931",".9486795596109966",null],[null,".4536149787047665","1.07704992667077","48.93581410715634","336.6123924690531","247.236661351813","1.64107600279588",".8817598517333083",null],[null,".1239604007756807","1.008657861384227","24.76216485317142","175.8389576730711","320.212900909273","200.0409008537138",".9729449255279179",null],[null,".2496195435816536","1.094530026623644","8.006002198299619","171.203816802918","89.82429183803769","265.6213065520866",".8607213061824783",null],[null,".2952926450152973",".9340564546473368","10.40041659331696","172.0677777598925","54.45197927158505","233.3407198210882","1.09180325574111",null],[null,".3600309446463452",".9296334485379284",".493895208484017","323.3087946104677","264.4342958795449","260.7493867482498","1.099604381834594",null],[null,".1160082772492626",".9509692280049176","3.949645992957977","353.1074563850295","211.9825559086865","170.9014989616633","1.062806930768583",null],[null,".03816338230652463","1.049917243833091","1.006016143907963","199.8529012979518","265.7155858027705","338.1350763839167",".9161603050630176",null],[null,".3268040050570579",".9299018887291826","8.334371159874198","20.42344330516466","128.5069678380983","43.91177322531348","1.099128272402361",null],[null,".2468534673385405","1.092940619148138","8.276117854161281","334.6566918100245","182.9825501929081","70.00134281605015",".8625995428868023",null],[null,".2284721670082753",".9407020526190067","5.452887092799667","220.907544722292","292.9813409040694","317.882878461747","1.080254132578327",null],[null,".2814675177812199","1.088587247562857","4.045053629550327","50.16154300836612","93.14821386744002","107.8419103336873",".8677791482276327",null],[null,".1709452810930048","1.019693850091567","14.42167769835484","218.9321442533897","25.61694870450476","10.48362871239572",".9571926912736464",null],[null,".1829745244749686","1.089068634826247","4.537818493390351","47.17553865966615","64.93322690952394","134.0697565391654",".8672038516152955",null],[null,".3738433955576995","1.099377240843495","5.974227528896565","26.62297680766951","262.080246655811","197.6928039919881",".8550351346025962",null],[null,".1433953699096083","1.061607588391581","3.172864567443817","22.29355169699497","92.06182472127176","294.2268894976953",".9010690081261893",null],[null,".2454360292646626","1.064542105916714","9.339353928563371","17.51315167427839","170.768842752441","183.5162594936685",".8973457457605664",null],[null,".2280238203300125",".9381930142284851","4.782031915622537","41.95069636834648","152.5268280272721","279.3322205854975","1.084590463751144",null],[null,".4606499003855887","1.043184203710713","21.03133274473509","216.9544545760447","26.23491523702752","188.7682731147416",".9250443834768712",null],[null,".2541282831554883",".9824234207006923","1.246514521210357","57.95843294446131","221.4299581141243","93.87046685015385","1.012175947364176",null],[null,".1948921883996561",".9508457597313328","1.483560973563824","42.70228506633096","119.6123065960652","215.2671546215675","1.063013947304101",null],[null,".5367944965659524","1.040174506306807","17.46646877916069","48.23593169672601","149.9412268197344","350.7616306939692",".9290621467631344",null],[null,".1292586047067886","1.083899990093541","5.014279880322065","50.87944073423243","295.4874730485283","258.3021839526274",".8734142140786545",null],[null,".3861086766557544",".9909447565258904",".8066277396756726","241.9785238442088","284.8202338072372","319.9684382017547",".9991481944795702",null],[null,".1284807940143149","1.018606741220867","6.756494892176456","52.33903851984301","88.31869593445037","142.9994137729184",".9587254470647263",null],[null,".1448884435622623",".9070722549275294","4.095428699304642","235.1489419178914","8.719099326375568","92.36131205046647","1.14088336851094",null],[null,".1977356390137106",".941706415735281","17.80245478023396","59.78803635046325","191.3250582513742","165.8723569977332","1.078526399738678",null],[null,".11161681745558","1.085379311500936",".3080740792154283","224.092276152323","146.9702735282947","229.0423739123817",".8716291883606974",null],[null,".2350660802885013","1.067726703320349","22.81130595295484","238.7578308600023","88.70346506764483","350.3784197567791",".8933341109954722",null],[null,".372234258656477","1.098149796402351","34.32665091325461","246.2134874075167","63.76418812097657","75.84813927944747",".8564690938069055",null],[null,".1969218980200044","1.010824660821499","15.73919243012802","69.01091095920349","114.9232836012295","151.1597139703082",".9698182017369956",null],[null,".1783750649855514",".9843609435724089","3.154402026430337","258.7528441951814","59.09264157644271","145.7869853295395","1.009189011431694",null],[null,".1306442848312896","1.09758907780805","1.081238721393451","66.45227596975366","68.98288035124918","69.16782684396247",".8571254862811252",null],[null,".1446360834444834","1.028779900597431","1.321818336277578","76.89178581766268","88.88834434240528","62.11261194935457",".9445400288512913","0.0025"],[null,".3781469736568395",".9755135814149896","1.417578714592675","124.1680332903498","199.5057221364988","180.675903966425","1.022949262694942",null],[null,".2855260295598507","1.095076216917701","5.489958916293989","102.4161930588749","95.48319777601546","298.4826877147989",".8600774345648055",null],[null,".208319762354401","1.034677030915283","5.698320590295225","292.4826619186452","76.78569278487608","140.9412013548719",".9364764525764019",null],[null,".1944849839887293",".9926099777037742","12.93591033515547","107.2808322766726","105.990369975788","240.2760591211302",".9966349645573603",null],[null,".4093586120664752",".9865263685036495","28.53501212979427","116.507227081889","220.475406608716","96.80375390333124","1.005868081329468",null],[null,".5465157735045418",".9849858541528903","4.546354243452324","347.1923745626908","353.7685405475733","73.7689052115214","1.008228764872581",null],[null,".1426379367907466","1.038133374596693","15.86888475654358","299.1802768134149","320.0909792666513","265.3207292752348",".9318035142120658",null],[null,".0560521160358838","1.043720402670465","16.25412269675644","300.2516670500434","238.3020020068891","311.2668866632923",".924331629191978",null],[null,".1477634522110557","1.024921546181818","26.4987599514467","117.2704192513529","89.04265000382466","288.4455632161266",".9498786782801134",null],[null,".08375729566752445",".9915312049936137",".7724329920626646","83.39840192863959","150.7427850054006","210.5565690826115",".9982618951751752",null],[null,".1973323896278646","1.0772180112297","15.7089020161169","310.7190272155123","96.22135388747377","233.2510595731371",".8815534806470368",null],[null,".3783352069667779",".9045805280603564","26.06358758555654","132.0817954169127","228.8562169044344","319.2390704467442","1.145600571244468",null],[null,".2795059925726862","1.075062935680059","26.00454437853052","327.8301282806594","65.99712911916315","247.7024481216641",".8842055571880516",null],[null,".1479888532126498","1.052189761239334","31.90741148673694","147.3153537555019","226.815729859873","114.8676267736696",".9131938263812025",null],[null,".3263956042656853",".9303745624907421","3.22313479492293","143.6637774276456","232.6908990710505","93.45852510603613","1.098290766000615",null],[null,".4010367672355782",".9557251017584117","34.58895190919419","148.9712392331989","199.3894928619023","317.9040907807858","1.054883707528908",null],[null,".403143443548284",".9214309466290135","8.621740316724779","8.161567225673259","321.3184040705638","279.8482522064763","1.114319890552012",null],[null,".240808372741214",".9895948975003804","10.90877032863346","1.563274465390356","293.9913319666766","183.0490826706931","1.001193226797022",null],[null,".1927972550630154",".9346195877665225","16.86338784163375","189.8495675847991","180.1469833240339","99.77344773029041","1.090816643714008",null],[null,".4205841672554232",".981166823808087","20.84421002336933","193.211420294083","144.6276426369529","253.585053486798","1.014121036008893",null],[null,".4114481101483666","1.046605771078934","24.79314972692548","30.72003855423335","300.6153496173959","281.6547924135351",".9205118553118556",null],[null,".04461542182311954","1.051221456928528","3.447026019705893","198.5942123751664","36.06826171307026","216.513906906867",".9144558627090376",null],[null,".3356278435408546","1.037635718482256","14.1710643781519","190.4531619469466","240.5932930520947","61.82971555028086",".9324739421435999",null],[null,".4072960059349761","1.05635128019943","23.46043808670317","205.0600678530874","195.3349042843832","15.08481066348776",".9078028240423444",null],[null,".03124292406008516","1.024170905091667","9.809596874557052","202.4687007664706","270.9787085776978","124.6151870220016",".9509231552215255",null],[null,".4640599107108902",".9215041063647775","4.868096898631862","55.66921143893608","313.0533350618995","240.4855066670767","1.114187191636028",null],[null,".4312022481688133",".9203066363342279","14.7943345188306","227.1292363679508","136.4522330526753","255.2542851437672","1.116362509560779",null],[null,".1643615168162084",".9231495521657622","8.112234809852328","58.74163940720786","317.7340518434518","188.410150992251","1.111209585066778",null],[null,".1608278147241906",".9224104850297032","15.55075734861896","246.2580351272264","195.4381123589855","107.3900652146633","1.112545361787878",null],[null,".3262412890680175",".9689147096092428","5.321004179446335","79.83268879838658","47.56138593644323","73.96137089733033","1.033417353466284",null],[null,".4519763101145782","1.001625562378573","49.98088880606646","76.66395927171824","345.7759295343187","327.8069036218468",".9832092925268341",null],[null,".511069998239116",".9584944383858226","29.28606964987173","275.5836700903822","227.8121987508317","82.12052326396332","1.050315266381009",null],[null,".33680091319599",".9536917786455898","20.73080086481302","111.1575333344831","316.5632231481407","274.8793349729526","1.058259109840339",null],[null,".2692299468243224",".9784584781108627","10.14936674454627","109.3568636581418","307.6706970980657","260.3228610236558","1.018334536353417",null],[null,".2268441528089251","1.07829065875354",".1053670931547603","3.792396830090601","210.7440149180158","72.76202287422267",".8802383979052858",null],[null,".2030062705470003","1.042497464612899","4.224303761123767","146.1959384717232","297.0451545920843","80.2510882123441",".9259585853448336",null],[null,".273826093303398","1.035286925817851","17.61268979078073","324.8494018398836","218.3787566212053","337.5140945015683",".9356490470405452",null],[null,".5122520075153459",".9616873963012725","6.043861202705154","177.3992487923401","24.32402623428564","15.10234230991284","1.045088785385205",null],[null,".2052878432838806",".9145294502660428","17.16733981878618","338.6176206260017","176.8868566151726","94.39118048592321","1.126957480594283",null],[null,".2000757852575278","1.060344988809166","10.43344597214241","192.344293211445","344.9450633083866","231.8919649168006",".9026789010914916",null],[null,".3481216284692493","1.086183967008757","7.445197771160487","169.7216679779674","36.47745145185799","99.15709458925217",".8706608008631379",null],[null,".3527040438077872","1.032791428216582","45.18260629291269","166.9006089075054","298.9031210180169","278.3545661574029",".9390422585298303",null],[null,".0282656020681183","1.016473419761462","2.108957369840005","343.445070166337","64.69152560834003","254.5130513134585",".9617452146474516",null],[null,".08592818238675844","1.085600992343804","7.108954089659178","181.5749786402897","319.9394734958124","146.5620265079163",".8713622206210824",null],[null,".4031964880683373","1.080418993124315","4.292286888280337","8.493829815944766","115.6457280814378","227.5632366741702",".8776386860597303",null],[null,".2478529461869678",".9360460646242649","7.020556683831781","204.0197887823745","23.71776593267771","198.3949474258502","1.088324087335353",null],[null,".12742411396093",".931405381172536","46.69473272405924","344.8837032694967","277.7680183523715","188.5240284422559","1.096467995762034",null],[null,".09231908609273891","1.058257590438075","7.342877609250663","11.89085774233788","77.30785335820099","342.3241161951642",".905351000036038",null],[null,".1231294635820352",".9410590085310004","3.460343392881499","12.9565761964119","222.3726832627167","172.9087182062812","1.079639559219156",null],[null,".09679165182897376",".9348890758793031","13.46031210835799","198.7498486772323","2.29582396392024","242.7034235495292","1.090345024768306",null],[null,".0817026720955244","1.074787705064157","10.00558939652232","29.59267471826669","279.6863637263885","23.8439507531181",".88454521871119",null],[null,".1220758010975778","1.070865161879883","5.58930237231515","206.3636823466006","105.3903127149367","32.17121995863238",".8894097558028249",null],[null,".2894645160298791","1.074291458717658","23.91747261433461","230.5123303015806","283.093328888042","220.52229888942",".8851581850763702",null],[null,".0579982756984769","1.097531175666739","2.299196311811106","55.98508734258637","177.6358430522966","355.6860704449025",".8571933158654151",null],[null,".3231393488371356","1.056532359394336","25.74888361817488","71.52777135839615","176.2690122945159","187.6015621570043",".9075694514067726",null],[null,".2214247786921327","1.015995790341945","4.360956488448828","241.968703449963","303.2590708514397","135.400096696251",".9624234828979714",null],[null,".4295381903466496",".911569176243574","5.768891129095807","65.78759169835639","231.9352533765278","90.15534582945665","1.132451539686841",null],[null,".05634611017641806","1.061181211020698","9.730017797117243","76.73809961586998","54.14579629088947","285.8396241162843",".9016121302882665",null],[null,".4270773388100504","1.077555219103866","7.280064530901933","268.512226703449","73.22738174054247","300.2694569736079",".8811397057719591",null],[null,".07818140031597565",".9763499863351446","7.130002640822881","272.4623601354221","50.46257815119689","197.8280462491444","1.021635056915905",null],[null,".2272595910614508","1.02363359608972","10.05183666052885","257.5328257564843","53.90298373097087","277.8218903266329",".9516719680038408",null],[null,".6820771783587584",".9478226877390948","23.13438932254974","269.7429257579749","26.88554026489214","87.06181185859938","1.068103710588293",null],[null,".2092772211304189","1.013414615372437","12.75317396816657","278.2446559683525","286.0602480918258","129.2120670475962",".9661027734433624",null],[null,".1579914065635676",".9073930073730037","4.85716584577511","102.9444665384161","138.098699051648","48.46691656144073","1.140278489280057",null],[null,".2586310183833722","1.041594983611141","17.83595864756072","290.1442559710622","272.9016118506845","341.8961583238482",".9271622792440716",null],[null,".3127099062114519","1.055032118796229","8.535648161925756","300.705636437957","74.58209944385227","36.8600090551888",".9095059656112051",null],[null,".073301604082337",".9420383629958656","2.279893071383289","297.9657721073365","335.0505925147885","135.3235463765135","1.077956387373547",null],[null,".0930422984393697",".9847518372585466","12.53699000214889","121.59397869699","264.1214700214623","77.41294447826871","1.008588180164723",null],[null,".3435626871615314",".9447250798500493","39.3642828471562","122.4889419349127","154.1143267710383","113.8175745351035","1.073361235457872",null],[null,".1142671380139861","1.059694971142416","37.38891878147294","309.6620489269267","266.3849114311424","286.4996190009572",".9035095842892205",null],[null,".2512900064982083",".9187202022373113","21.9518348150122","138.2546476782046","129.77055015","304.065265416855","1.119255337881796",null],[null,".2941883842495692","1.021826874013825","24.69498548138809","323.0527408228344","73.72873018260528","193.2395053915699",".9541971020655489",null],[null,".3349923165981428",".919320912797161","19.11020976505103","146.4734349246259","197.6096239672007","152.1530479500722","1.118158486970418",null],[null,".3615343369607085",".987092646133318","1.243879925677417","109.2656199760355","283.8301318246498","31.87701423123165","1.005002632331647",null],[null,".1261774295797875","1.087532164140553","21.11838791091986","154.2561360679484","244.2592908769929","243.1624659788755",".8690422852452619",null],[null,".2051353471732388",".9112728146809586","7.363104834629528","334.8177415386752","314.6370731484478","323.5847603323987","1.133004023618501",null],[null,".2155005724900966",".9144214988444805","11.83676488732227","157.1226946935122","215.2002245705796","188.0631566966678","1.127157049807185",null],[null,".06707574674761575",".9771060686943207","3.027706053500976","337.9811089099223","20.95292844589126","161.5640210340331","1.020449478162365",null],[null,".388639178090038",".9290813777176744","10.32090175351916","164.1928669305749","235.4995403241029","30.02060429800897","1.100584623736589",null],[null,".1598639373167041","1.020995749256938","32.84485479468596","352.8750878388282","39.07077661690213","125.5730822089303",".9553624617771215",null],[null,".0903640865410823",".9818445645140879","14.38168829873673","183.5496121522499","170.2296747316589","139.817062813276","1.013071186809195",null],[null,".3482900189199326","1.080746641349394","7.98443674428829","2.261435156035231","76.69490129288766","208.7233443740629",".8772396078422532",null],[null,".1602161838686689",".9311732246462843","1.307184119959946","138.5534712000391","260.3367436374002","47.91134944119473","1.096878072093117",null],[null,".05896268074546426","1.029712381864687","9.653457367381293","10.09048693064192","264.2723842788286","316.0330757851317",".9432572923288878",null],[null,".2730157189153693",".9424076136270294","4.922612058103482","23.76296199856775","40.63646437641801","284.7021954311214","1.07732290816744",null],[null,".3687984013510813",".9041330074349152","11.93543224884381","193.4782503394153","232.5692610842505","180.6819148501355","1.146451236990429",null],[null,".7519382960970544","1.084403566287019","15.58211644491012","13.68994103099169","38.53668121507278","176.715149170029",".8728058895312906",null],[null,".3065343267781593","1.018490264079481","33.11410732778998","198.0600494776668","154.4814695719137","315.1236377233433",".9588899151937281",null],[null,".2350544014806635",".9838081755453588","15.96159691537819","198.8766131310397","170.4546122289833","117.2686158928179","1.010039673863856",null],[null,".3278683568196669",".9377678301168919","21.28891111132362","22.00030037843535","312.3904245827275","106.9587853963973","1.085328177637445",null],[null,".1150730532336413","1.078855435300079","4.489410073844221","34.28856520449133","243.7496091307403","74.30894196047802",".8795472864021386",null],[null,".1179951421222541",".9270592232283961","1.236899894001678","198.7694119837753","207.5475582283072","73.88898285224525","1.104187573688034",null],[null,".5299107121118359","1.099116946336523","1.313631857191721","30.82986234202273","297.9675743105274","343.8382238134535",".8553388886196241",null],[null,".3268396804530758","1.009798036723256","18.91295273540578","226.9468927683562","204.4890299864149","122.7436965301261",".9712975447094225",null],[null,".381866096179596",".9352679303744005","19.58691840152141","28.64855353263252","357.4366835418411","51.22187022077709","1.089682583132279",null],[null,".3637695468155102","1.093315911452717","10.67233214350781","231.3280214426848","225.446097136699","135.6242608604316",".8621554363142399",null],[null,".3071079863560314","1.095841045149208","18.42461576110339","37.64116200397529","41.61819478114217","103.9897061624038",".8591771716366007",null],[null,".1675863292631663","1.021127871395339",".8295288078194947","214.6464385321414","255.5290737654373","84.03725517751138",".9551770484926829",null],[null,".4375103071263794","1.048695837056254","12.19667275388129","220.7137724466185","214.1357870725699","98.58368137220255",".917761336736453",null],[null,".2678251690400338","1.056200926623944","8.248212242303778","26.87826821404102","79.79096374167888","81.16766031988705",".9079966738903633",null],[null,".1982052647224339","1.096433949812411","2.497456500367278","227.2382952788828","74.80944513649081","298.6588531566047",".858480356367456",null],[null,".4905157669269116","1.09242356023792","5.142650533755141","285.4746032345454","112.0661219231558","255.3415915768039",".863212035469194",null],[null,".2144114336241798","1.003755406916069","5.399145838752258","26.7420587182747","338.4804651286521","231.9919831678291",".9800815808070368",null],[null,".1183355502835988","1.066477624549522",".9295072865795025","48.89910801684731","246.4561465983973","118.2031493424438",".8949040051617273",null],[null,".06013270028059453","1.043375042327286","7.740262456459146","65.35004172972786","277.2963029988942","180.0464282552016",".9247906020788786",null],[null,".1012906081506757","1.089292386683201","7.390189372463186","227.2039448647353","296.5859544404506","118.2559545732157",".8669366664548008",null],[null,"0.1192604","1.0794076","3.83902","27.84919","294.06622","58.00341","0.87887251",null],[null,".1357897723614056","1.0799916566415","16.35774592812418","233.0742564618154","113.9305270683744","253.895199198916",".8781596402627869",null],[null,".07912666171516215","1.041663219395826","3.642102633945894","235.6334256886554","95.45627219036732","198.540144026548",".9270711779048094",null],[null,".3578062136919953",".9026889220139228","3.457817183714484","236.6357883461155","150.8622980873003","292.0427765380608","1.149203406808348",null],[null,".3761846835491303",".9069471754628982","13.3159524070441","233.8674008517877","228.0628523516459","118.4140686253196","1.141119389976287",null],[null,".2704268372150831",".9282164983688288","1.095746428224686","62.23841910869491","51.32800138124392","327.6831769130752","1.102123210817893",null],[null,".140684403984697","1.081758048064323",".90466671283533","70.88951386681393","97.6782998835119","159.244818377394",".8760096119854076",null],[null,".09919458616501695",".9632686434313833","5.797838199592008","251.4849688041224","139.5621081717099","219.0335195205648","1.042516504088997",null],[null,".02917163481433757","1.050485321387876","9.560771997706228","91.14362867747015","118.7701060923365","267.991531751724",".915417248886242",null],[null,".1356018155124378",".9539338832958751","17.03163334375744","84.65300379669293","19.19223539640646","185.7742183808531","1.057856262432472",null],[null,".2124841671741702",".9551346841977455","2.443506058007153","304.6279566529412","191.9212088115985","137.0952069303746","1.055861974963779",null],[null,".4961962797480134","1.020863782996931","18.79571668223236","253.7065571552596","217.3625780458613","124.9825997478886",".9555477161947777",null],[null,".2734421017216488","1.036883460453581","4.495130175797608","162.415799671405","273.6564693479924","140.3592463761629",".9334888896978156",null],[null,".1623667798743192","1.098409121120685","7.482850438735444","121.260311590631","93.44436421990261","29.33508869821025",".8561658044940578",null],[null,".2727555700103399","1.033795397093618","27.78526159238247","132.4909914040998","339.4574112475974","115.5907570306801",".9376746664365342",null],[null,".4607685386981797",".998588129825167","10.18377343671322","252.0640408921175","289.7356853990773","169.0104858758005",".9876986835736515",null],[null,".2765465185888024","1.033010195645069","34.62379230051295","134.3862596005391","26.01487192389684","37.58480381692645",".9387439734996168",null],[null,".1416529992931749","1.047808576338963","27.99508274917561","319.4522091659235","204.1717140846305","328.7977410684775",".9189272929365346",null],[null,".1846605575692085","1.084364225982402","2.829799831727431","335.9070159013007","264.7827861656089","61.80691357984831",".8728533875400349",null],[null,".2528935444200893",".9617200848595937","26.27198129246428","332.7113583848036","122.0698347035622","263.8338046772365","1.045035502489866",null],[null,".0923635692169593","1.052723162122476",".4890452623090712","171.1153143663436","61.66168975810083","231.3488072203966",".9124998594783179",null],[null,".3363160974410166",".9537924578663756","1.344549424690974","144.2754492553188","325.4526510060638","219.0701802305372","1.058091554692447",null],[null,".4850715813938818","1.059497203328511","11.23380911023318","298.0579690683226","218.9885016858775","262.9553074852037",".9037625723830266",null],[null,".4049207817498223","1.051818208476112","40.61540265831042","152.2253276399624","28.49202811482949","119.1505374805357",".9136777450602461",null],[null,".04144916144635673",".9856733231401628","4.010750388259785","156.5552882553684","26.76124613163912","273.9208058019816","1.007174148010011",null],[null,".2975085165605382",".9669735331433525","38.44634928056262","155.6074758395744","322.0842826187722","245.9389227592481","1.036530755973366",null],[null,".5154574278491322","1.082968960241953","16.00910801458796","164.5043626617709","30.73033242327099","95.45200182550407",".8745407691547149",null],[null,".2577579496188304",".9180088009261905","7.329759492877387","354.2777608432543","220.516637269219","282.4922208976986","1.120556622717303",null],[null,".202515738000776",".9308804493166396","21.9516303847292",".9048738246425777","143.9875658807038","304.2146617174957","1.097395588744286",null],[null,".1704755711347106","1.053300031279318","5.875115358734377","359.9094127548584","273.567767789917","179.8652010990109",".911750328107072",null],[null,".1204425383336377",".9571569409761757","10.8861275456393","3.186576757834406","128.5262415745111","149.0774436370789","1.052517545640716",null],[null,".2443266420030049",".9291384895789085","15.9519423132342","188.0027206974145","306.1534070548058","336.638421999204","1.100483149944854",null],[null,".6540613939300306","1.060740937885719","8.794074981821366","3.457274265127544","234.7274249315382","50.0609404202695",".9021735257817085",null],[null,".164749148619067","1.022091749238189","29.63468084083042","187.6505551686953","69.84043833678705","92.69849105902451",".9538262056248605",null],[null,".2348058844987226","1.06264792553653","2.522822464080122","342.4514787410169","278.7664541459751","141.4900963943847",".8997461060613465",null],[null,".3934726438677069","1.089775535141803","7.157201832830642","199.8028006684816","286.6609166267964","227.716336251438",".8663602000098197",null],[null,".008672084832205549","1.028837685593698","9.010474919969058","10.76990515627419","190.9619528439452","30.63262306043387",".9444604543813547",null],[null,".01551965419314553",".9908061576490985","8.274686794086305","23.44926411294931","196.2628871384623","194.196106897207",".9993578505144576",null],[null,".1253595066009121","1.063461452884526","8.159232855881067","206.5267711343008","101.4317327798114","106.3309565492899",".8987138711011242",null],[null,".149115675054267","1.047854352067621","6.452100476446115","208.6361949581533","287.6981562399608","20.46228925496873",".9188670783080434",null],[null,".2353967133906102","1.0681560569673","12.29730179726381","37.7025096425215","94.2766077417653","300.5122403036664",".8927955412189942",null],[null,".780312424031723",".9169849538200763","42.29739608546956","36.95407349287231","211.5850918823908","55.60016163388811","1.122433859910225",null],[null,".3450853944998133","1.097085398974215","24.82805295813456","44.06997458377004","160.2371853662171","82.62519947461342",".857715821608997",null],[null,".07697511891962223","1.093940392799533","26.97416418429224","54.28623837092126","55.71074006400356","312.3694065838558",".8614172930676498",null],[null,".1807949289117917",".9084966413723885","6.713292361349771","59.46263445463052","150.6701229062705","15.26206869162882","1.138201319503849",null],[null,".1361156312370055",".9689002025037708",".3385635731451698","52.65163811738768","251.5019776200677","237.402447757428","1.033440563210624",null],[null,".2828313192475991",".9875901519704339","10.79665500268544","228.000380490239","314.7886968275761","294.8086466952474","1.004243311725908",null],[null,".07141664883531165","1.027881363096742","1.266603340644118","265.6435929308513","226.5852726724354","116.2746384998511",".9457788246654417",null],[null,".5876609914934314",".9294546190051047","1.606183959078406","140.9210273090339","133.8556043211437","101.9811185531644","1.099921747296287",null],[null,".0631273647970769",".9656624675207434","23.39239789322715","58.80560161406507","185.7595132833128","334.6755201253112","1.0386423959753",null],[null,".2183156447907338","1.030357166061731","3.015398040666995","191.6037448204747","10.85389163090462","42.48164692766915",".9423720135312628",null],[null,".05877615136106507","1.035551244263956",".4129109167043972","243.8917216061577","214.1968925951224","108.1342396664935",".9352908414155048",null],[null,".4106331663546564","1.062743724181247","13.3644932338842","235.2194903357907","301.4193167664234","305.9416204879525",".8996244504169401",null],[null,".07150807464941107","1.034219154037111","1.558941962587208","67.10690255694458","287.6031909141494","208.2800330349451",".9370984267035799",null],[null,".3677380184228213","1.040181060941315","6.022332567980106","270.8317757943656","284.981782843789","16.31065645260579",".9290533651383155",null],[null,".3685729700533044","1.067903754893894","6.803950959936824","257.0026144055315","77.547744663137","34.77218060810553",".8931119566298575",null],[null,".08667204656390155","1.07211224461908","1.736002255900927","117.6324692345264","34.17123363767776","253.7335614434639",".8878583628150691",null],[null,".1517355272504378",".9137676712599214","5.846771291153492","177.6254064920407","90.66392053870175","258.3756539146155","1.128367037108707",null],[null,".1300421776080947","1.057838105053444","9.835496818171945","95.98972861415155","68.97277452806036","308.9307219963772",".9058895784235078",null],[null,".1369933069561865",".9286902802114259","1.377379087488501","63.49948930726465","183.4394063453113","221.2591165974274","1.101279927477679",null],[null,".2405076334493322",".9069846444351399","14.07300298271033","255.271114250879","70.62488713214772","230.2508716413887","1.141048678532459",null],[null,".212443708809321","1.060265053775513","29.657650280473","125.0294472652019","223.490069227841","76.08095046262737",".902780984567756",null],[null,".2901228142911542",".9700489472993155","15.07873074600495","123.1855912063685","122.9825947738","323.1126733817781","1.031605385810692",null],[null,".1862960757980628",".984596001937852","20.40979286207087","295.7352949748083","26.58880291895732","134.8806982220772","1.008827638604224",null],[null,".2637218703505899","1.071629443996411","19.04119131007067","126.9600227437912","192.8684529770987","74.50065045790097",".888458439898636",null],[null,".1803569048892974","1.029213754195724","19.02454946683281","301.2442067156126","291.1323874434229","27.87497806063218",".9439428512974729",null],[null,".1974320422547573",".9733270167876156","1.042157706674226","290.0989813847895","303.2548124349851","320.010971504295","1.026398258307285",null],[null,".05526931037936063","1.050804488223154","7.762211283497997","311.8612447935778","124.5219065388801","54.64924586847622",".9150002132110631",null],[null,".1215133670006124",".9467482322344657","1.588826385715122","267.8437071037637","357.3310164858825","70.22752487719603","1.069922497385426",null],[null,".1499763270649255","1.066147542703091","23.98791323014207","148.4265384238079","224.6192323657989","57.87283715709744",".8953196339797969",null],[null,".386025844641613",".9607276171701374","6.740700944535816","347.6254791700125","358.7568993003455","212.1945095720522","1.046655261974619",null],[null,".2056889202068171",".9431270687434433","15.75036746736586","319.1521406365422","47.77030497645208","317.9746484136708","1.076090405673402",null],[null,".04144110891044879","1.048990105978133","11.37509987432427","320.0083434263022","157.1629813662911","26.43131800264284",".9173751800444678",null],[null,".2801711484900191",".9525585320504886","2.654848187256253","305.8110135746662","343.6372831976999","13.81474376938714","1.060148167221822",null],[null,".3540141583119844","1.029300420316204","10.7509788265495","144.5122420001526","155.7936130852456","313.1020072774288",".9438236351660083",null],[null,".3844643503533336","1.04064180825146","7.552258697160462","134.0570723031452","223.8064962179933","153.8494329882855",".9284364216554698",null],[null,".379638755817568",".9793812107975816","19.01099314707341","324.8105548342496","295.8919224002767","279.6375912463391","1.016895726019591",null],[null,".3410604518514478",".9780442884476782","14.12094819247354","325.9346782838685","301.6728896388248","272.9574359334274","1.018981482959781",null],[null,".2898604146899328",".9234871983577041","25.44344797369585","149.4106236919932","220.713788051397","119.9288838603131","1.110600218656154",null],[null,".4800652197365881",".9578302860692592","26.70871518164984","15.7790915065264","356.3070839396241","222.2002819274267","1.051407876787771",null],[null,".09807224072693178","1.049611154707827","13.41113298850441","355.8345097321005","97.48593926060774","41.38473144838716",".9165610922717905",null],[null,".1961550066842076",".985032893520752","11.1001924392906","162.5996923944297","236.7015171008937","43.33381423084897","1.008156545133253",null],[null,".3769076495124561","1.07754192030637","6.256552532568008","167.4739124460756","256.8633909431821","279.4354620129313",".8811560180858201",null],[null,".2251982992719822","1.023485124632046","24.29133822537449","4.173270635914909","76.84047215288975","163.4788940134781",".9518790563802025",null],[null,".1944599791362591","1.06252083925387","21.33387542115166","180.210203735222","252.1008016044013","87.08869821092026",".8999075365073385",null],[null,".1352901119916138","1.073067973691431","11.26172415754536","185.1534040271471","140.2449104164876","87.7573480768858",".8866724690488571",null],[null,".5746091285182738","1.02499852446871","14.51847933065219","175.2028932491149","123.1629923287051","31.80656366225076",".9497716752058425",null],[null,".2502014092260172","1.027455710585342","26.90782715107198","185.5877094807463","121.7542753286538","270.0051975990752",".946366608869937",null],[null,".2000562049884503","1.068033002573347","11.80654639595224","207.7605209716528","108.667075379512","128.1858944134607",".8929498420389087","0.143"],[null,".3040981415979387","1.059589512466685","27.04617536261808","206.7423416013416","133.9902537584448","141.2641745850231",".9036444742051",null],[null,".1019899654966755","1.067513113958497","11.50320407712779","206.8031283762183","281.9471581887237","287.5407064325259",".8936022335188637",null],[null,".1883395071110745",".9642620827829405","19.87003034971876","57.30923928939042","315.2295683228477","218.9354309472301","1.040905826651764",null],[null,".1824418626471762","1.085949739405923","18.7410454083174","211.9638818681208","111.9633523885273","44.30338463406735",".870942504213802",null],[null,".4858607994146449","1.089287799478234","6.762535069285261","43.35148810371577","298.5975379888843","47.25924999419985",".8669421427215467",null],[null,".1919653944832975","1.068664420096178","14.83428587686071","31.77016462161854","270.553965386207","143.5564968990698",".8921585633994703",null],[null,".1056199363787971",".9346056331346054","16.10293040212381","32.55907494606954","330.5434911769571","35.18258313118761","1.090841074341802",null],[null,".2999672595396862",".9537872233991475","13.97492085713698","43.69711719204096","316.1576769561466","304.3497427648396","1.058100265052101",null],[null,".1822114477851036",".9684747449891062","10.966673609115","35.92183881256749","323.0515340997194","205.5298502314909","1.03412163415461",null],[null,".3589931632398934","1.073622558499134","1.621547642581147","158.7462493217634","177.3409664749363","110.9213595490398",".8859855354947468",null],[null,".1583288840318581","1.058675277529207","18.804812652718","223.1952583324773","254.2857521701156","333.2495312226151",".9048152605147149",null],[null,".1716826576662724",".9394221433264928","11.94534970407031","229.0325436021314","227.6083626333925","249.6223960761736","1.082462561680128",null],[null,".007798672962771863","1.058510305497981","2.718268208935195","43.63287270173826","59.98422777578645","6.351484619003471",".9050267960470098",null],[null,".1080184629733258",".9832943192548962","5.09523775131698","323.8778039742161","157.1471685890565","348.5151708243141","1.010831526869938","0.170"],[null,".122809699441367",".9693065247222036","9.504251514044908","237.0802606717238","233.838644629755","65.8402605885796","1.032790821601869",null],[null,".1244244994747666",".9737152573940057",".6193532053171859","243.5089742946825","223.5500031680415","46.76785061451015","1.025784449873529",null],[null,".1453610602477692",".9794319746652335","7.47035779743341","58.33534883399088","39.81879037391323","21.77696818485305","1.016816668628426",null],[null,".6074530688014258",".9446144673107056","29.67387874828789","239.6132414934125","208.8261905167468","180.4132558135928","1.073549773784792",null],[null,".06259464055255017","1.090191491041371","1.031866458037033","194.1750966242689","100.3942492677321","41.83178496302937",".8658644156502331",null],[null,".4742005938745119",".9631603977602884","1.802006530979266","55.24687936806045","315.5546881566955","286.1442119169535","1.042692255299972",null],[null,".1379059106103458",".9829455041145218","9.339972346591424","234.5115542231567","208.4888808557885","24.48772810156936","1.011369641066354",null],[null,".2133468726041705",".9914935616288175","14.83574910154994","72.36527908466431","27.45401965825589","311.3399452793669",".9983187462150734",null],[null,".4953743602367534","1.078126287770416","13.34167104017912","75.14372501164493","294.4210312900332","74.89388698957501",".8804397071123374",null],[null,".2376341153105069","1.084269910624529","4.214999122312132","106.855695406971","238.0551809956743","42.14391568429721",".8729672779131976",null],[null,".7347402598764331","1.086703909948627","18.01848043111309","55.69613634044424","355.1616373166176","321.93214295748",".8700360127575233",null],[null,".366983575591825","1.040108118603453","15.66149110321744","54.52969662350778","28.34208376382168","144.8552684929053",".9291510980272591",null],[null,".08659117642923606","1.042073886631244","9.762797597690358","87.44040930320793","3.134687786541465","100.4801390995443",".9265232125669074",null],[null,".2627194947392499","1.066562238805899","1.742379584438402","237.3858562860819","288.3407449100543","240.4424680232476",".8947975132960875",null],[null,".1490056122817877","1.036049817666322","24.33045664171796","120.8478890746454","307.8886185268432","151.1531232045663",".9346157941961895",null],[null,".181428630512066","1.090820413579339","14.80014171137152","281.5801824895595","258.7528813803935","138.6811863263214",".8651156904634391",null],[null,".1837081918147367",".9659298370220485","6.353462853477239","281.7905002486525","152.87071229153","144.0620018206188","1.038211181298553","0.091"],[null,".08395203818324334","1.056774441959022",".4389182106329182","272.7043325114903","327.6512314504074","232.0078142511342",".9072576145348844",null],[null,".5613944901447916","1.046696166589704","13.91243205327034","140.1055293442293","42.96807586643934","74.55566839894794",".9203926110477634",null],[null,".09069643348925625","1.01852171839326","12.88028091077872","144.4641082500961","298.7984071852143","221.9224087169548",".9588454964186571",null],[null,".2552428993038593",".9545591158277015","1.790462366043559","166.2348598008332","47.6694379933919","20.84634794955557","1.056817094996124",null],[null,".1187379564108211",".949197619491953","7.250348634995646","182.4608452247569","328.784602453852","145.1642386129075","1.065783796794343",null],[null,".1388852945384771","1.050196021429497","19.98379913218032","172.646651206582","4.540615138375866","338.6591982047926",".9157955331361934",null],[null,".6039609478595022","1.055561335611461","33.14880216189479","351.2028653710137","181.7404386367589","308.4091719072163",".9088220657280421",null],[null,".4870464168187005",".9186849301352678","3.168764675134721","182.600696643865","43.56197113836686","189.7547752203998","1.119319797740876",null],[null,".1088471914100292",".9942512887488003","9.167383120835805","182.7075311250616","291.8518961962708","304.0420662882044",".9941681142986989",null],[null,".1162214735966522","1.028429886391264","3.743564267286238","18.85672200216096","80.5590422060816","163.3966619144834",".9450222647727891",null],[null,".321186995711965","1.05223829692229","3.264568149209158","201.8684821452495","75.19116368896327","191.9413122883353",".913130643958581",null],[null,".2395328141294185","1.0598519990625",".9007907649429082","95.23377947947252","189.7163195713553","162.238492129374",".9033087954376507",null],[null,".124726171855251","1.098607254036077","8.3575323321071","216.3413837377555","127.376734172426","323.9838922919015",".8559342017383643",null],[null,".1299357644873799",".9851774124982741","20.91195605331504","227.155690296711","355.0555784258985","235.7970503680281","1.007934718473583",null],[null,".1873093015784809","1.056252439655572","16.13478082599796","222.9664749188139","280.256522925349","9.675497116037709",".9079302507168976",null],[null,".4266753951886855",".9774698921540764","11.96172679509507","38.03737896821932","241.9457386676102","166.7534573349171","1.019879799883445",null],[null,".07434846014871277","1.053053406855357",".8683500913721978","186.1431669698898","288.2491122925934","36.25862008497547",".9120706438617125",null],[null,".2886003128560983",".9091188371068443",".7068307731749923","51.68548895535167","225.1529553242994","212.6171767673171","1.137033051736286",null],[null,".1080244623093657",".9348688003430554","2.48430156806375","224.5067292975726","49.78442960055187","81.90167201841973","1.090380496242908",null],[null,".2572370505891153",".9588391351154011","18.98281922921456","22.85866023546755","168.8838335561828","41.38019204442309","1.049748944537749",null],[null,".2005612202517496","1.041734364579872","3.778088265989849","44.53810049428625","249.0325461418875","238.0962770080542",".9269762081231474",null],[null,".1208905855662996","1.044697336012304","4.494349789226918","241.6398615707624","84.22438487044701","198.1667840908883",".9230353696713208",null],[null,".1258900502983642","1.074734313016145",".2844286166438112","95.37706274709332","20.36052115587043","311.5840856926493",".884611134910341",null],[null,".3377039116962399","1.016876811785318","18.09105216568554","246.0215106744826","299.3595496118712","154.0460876817179",".9611729891833901",null],[null,".1782389876739622","1.088320232562043","19.80071192997175","74.78968005646196","82.60540921084252","226.7517031076867",".8680985270116605",null],[null,".1742523171327319","1.039515836182392","9.938875793463346","74.68589739314253","237.1998757332818","231.080320681315",".9299453113844861",null],[null,".5577050588632333","1.029471034928451","2.363557481668326","70.29294207872124","237.4822996090155","234.3985401100711",".9435890145317194",null],[null,".2119713113265298","1.047134002003403","5.188051481843052","70.69798549774282","268.6507448801714","168.4074086291623",".9198154093430836",null],[null,".03356697082594927","1.041881851590827","8.133190021586415","251.4182838673135","85.01139443021523","213.2526437359727",".9267793833418848",null],[null,".3711271700272326",".9564087264887605","22.00730260947786","69.54826166222459","191.6224239286797","332.8649932006107","1.053752890197409",null],[null,".2757576694146243",".9386448908236369","19.74566508635696","58.59651021081041","225.6264433320016","11.83917184980672","1.083807352810147",null],[null,".1211798652393163","1.085029255464935","3.750233598073924","249.1039810979164","137.7781282745151","340.1540121116131",".8720510345901866",null],[null,".3803464162560666",".9094730660030713","17.85402443760748","253.5260984188151","352.5939783220624","277.8567159890053","1.136368825234904",null],[null,".1851389768849557","1.00443824956124","7.599861086026674","256.2370199677173","282.3261996719503","212.9687276704707",".9790823241384816",null],[null,".3189697172681018",".9897946205510099",".7937596783324757","209.8350165306539","100.8870672702144","85.85118201626256","1.000890207452603",null],[null,".1952447742049271",".9904335934075451","65.76965163875096","77.16008687428493","187.3310237899921","172.0168223391568",".9999217853636638",null],[null,".1638029408573364",".9740287519173847","2.321397760518944","278.4730054850467","274.9369118489907","338.2765710222194","1.025289261312695",null],[null,".1455843201673062","1.015200600340618","4.484176371914734","98.57023743629284","83.0244651736474","147.1996725675778",".9635544801231974",null],[null,".3962767070772047","1.070582176822281","12.66568372617611","249.8079095891029","75.96448411674007","61.50099539501429",".8897624232222866",null],[null,".3229875984826437",".9279278345886376","9.710455556695612","256.6331694914164","322.8129672841647","214.4461339227833","1.102637530652026",null],[null,".2334501971476174",".9373971459983659","5.692551141769724","257.2941511371342","65.04260836084826","1.606678041572371","1.085972014175673",null],[null,".03483292784766304","1.014854783912424","2.71835171018765","87.56988271090266","108.3247332463924","124.8017107942214",".9640470254976491",null],[null,".2796645369511589",".9953022046220829","1.618514008017579","254.8926065622227","83.49741173494571","34.39788428326208",".9925939523901023",null],[null,".1942498670422519","1.050742322959863","16.46926127837775","80.21113386380456","254.6237558656488","83.64421231098177",".9150814159058059",null],[null,".1192697650714726","1.095457101472012","4.701709119160032","258.3554289117943","237.6655550920156","216.4994039049908",".8596289070946724","0.046"],[null,".2563387079055033",".9478036646076017","1.578459019249358","270.7886138398007","53.41477609796725","297.9778121975604","1.068135867212657",null],[null,".1869879596741142","1.070501788689304","6.576258367834932","266.3573258182734","86.37786692360174","61.138845747889",".8898626486729103",null],[null,".2559072230781273","1.083945928573261","6.657675829156479","266.1306561508839","267.9484434953388","237.9296886598984",".8733586906964651",null],[null,".2046424235140042","1.040841828588192","5.236230499143128","86.27983538419571","270.3134126888114","179.5000619518282",".9281688057145454",null],[null,".4039400710137895","1.004607684483255","2.485570132175737","88.66669297090834","111.939892260581","213.7963741639804",".9788346397763513",null],[null,".1946730299222641",".9217039486631097","12.16493816026339","268.0284219303824","46.69101629865734","108.0881857665849","1.11382484699204",null],[null,".7014128226857164","1.087155084720064","23.84564366342228","310.8882159547618","2.099554856715633","354.4636876339992",".8694944650396857",null],[null,".08539158003808427","1.068891957930028","6.832433761612966","83.68176718954881","254.318229280973","99.37478236133877",".8918737043613785",null],[null,".250484832954362",".9439122123367747","15.48511865873329","281.998685712877","37.20066772732409","334.1914339640184","1.074748051332983",null],[null,".1039100127986133","1.089242231166598","8.624944013583301","124.6694918074953","251.7250482804333","328.5001802036062",".8669965459136504",null],[null,".3613226465362978",".9187034354160633","22.45230084418561","291.2214631003344","317.017432272812","240.3017324414381","1.119285978520137",null],[null,".3771615050056182","1.024411267118765","7.307344182621213","102.0007632353079","260.5155738071883","232.5867413850066",".9505884960616707",null],[null,".2284787544803275",".9348910531215395",".384311239307425","129.2079306918691","200.68851606","108.3352616823157","1.090341565744821",null],[null,".1404362353960358","1.013412640267866","2.259803854163428","305.6137188671434","279.1631263997715","121.4007891189794",".9661055977937673",null],[null,".3059384471565842",".9655398038138681","21.7885586542277","333.3119056137696","36.07045863142171","155.8982261718773","1.038840328425436",null],[null,".04370581733543667","1.059413567192429","6.510908608894123","318.7555725969171","113.756687428749","49.98015932388187",".903869596736355",null],[null,".09221038578625693",".9827207300346211","5.703308074027574","316.8480229681981","276.9156117344997","246.1249239001811","1.011716651166176",null],[null,".2438403281705226","1.061219893105749","2.864615380708024","123.3956531371611","114.4990540500022","269.3001882327833",".9015628343042048",null],[null,".1784840207295586",".9329532534685385",".4849858892289278","346.2274588826507","270.1910568579476","133.5493638122833","1.093740385977185",null],[null,".2107522968659053","1.076523670859288","20.65315536393289","317.31315567","96.45527504019491","343.2238188259258",".8824064997788188",null],[null,".4544479978303811","1.044356133869991",".4554649181532715","240.4971066089052","12.70135891142451","349.6518076271308",".9234877546733837",null],[null,".2508527654087361","1.037322678181579","2.731259910329328","120.8408773437837","277.6042940773674","149.7191565673633",".932896073005947",null],[null,".4787414355508784","1.085164462991917","15.1591465532381","146.6461354934756","211.1760205244178","344.022195234823",".8718880581082635",null],[null,".0917699074432381",".9082067919803019","12.05597280638053","319.7432588263417","356.1944816306153","197.2048208355175","1.138746239368013",null],[null,".3796033258693307","1.067141674074864","28.89806559889905","127.2142628375229","160.9393521999818","196.4042867896987",".8940688281596948",null],[null,".2336479049764623","1.082796446557208","4.553939919378818","137.8878678163314","94.43448017505511","190.2871007426726",".8747497783273789",null],[null,".09972897786779369","1.089930551087671","2.444774814519873","132.4668906127284","301.5241770732039","284.1174328617503",".8661753787791316",null],[null,".04918682812122668",".9984648103967458","27.72662020206943","328.8900009840505","326.7773719781179","97.58432645913979",".9878816737952751",null],[null,".1261378828769334",".9949733522696548","6.293733367063791","136.3541378833097","120.7986261616255","156.0881218870024",".9930860919413761",null],[null,".1501445058604795","1.051000450073404","7.105389916189624","337.6019238910943","79.57354741031475","88.06933615361731",".9147443187775627",null],[null,".410608953601742",".9571518908009851","17.51289227690136","341.7092841216405","358.4374597759294","242.0662203490296","1.052525875674422",null],[null,".3759059644652835","1.034785614293178","8.045235661838666","325.0204653071937","70.12697560703802","152.101198580234",".9363290552205614",null],[null,".4197670749685201","1.010414448479685","3.007973077723154","139.2063723076777","117.3494978383611","131.5964011942059",".970408858034302",null],[null,".1600241600251771",".9324216896975841","4.773522987371431","139.8145322211364","240.3159016394812","335.0145961438998","1.094675814052334",null],[null,".06439129221600948","1.090536511621541","4.578143940783807","144.5290507671481","6.762868611810092","210.1180156890374",".8654535388800642",null],[null,".0225909823656084","1.034972418335029","8.201642897425872","145.9637935478761","346.0240614248266","97.03209474737766",".9360755670750459",null],[null,".1608366273035754","1.023430814464084","4.346357223847106","336.7962747724029","71.00821465188675","215.0385265370142",".9519548271062824",null],[null,".3483425923383918","1.043628697435864","4.182951144769557","328.8431592022517","68.91048617471473","113.8544101576727",".9244534654991087",null],[null,".1656042208432655","1.080970062832231","6.3895625812806","162.0321708137884","287.1632817579317","298.624843924225",".8769676520503312",null],[null,".2684273938927497","1.038283490080989","18.89928727119705","164.3898621901762","103.1244129329356","340.5866459764894",".9316014406727459",null],[null,".6480259472528014",".9894900532633363","43.23625109075767","163.0965530619601","222.6741401225423","66.89594553404369","1.001352357434807",null],[null,".09525739959679816",".9204682400788782","3.198581657291818","169.0539674813094","206.0241733527759","56.51755481174173","1.116068528027123",null],[null,".2880605280475911",".9557132419062672","12.38814714160211","8.0832986020131","12.28016230962057","220.329069774347","1.054903343340779",null],[null,".2029785805632247","1.054280847023109","7.325245062446569","169.2026682553675","260.3416376717302","58.66482847344389",".9104782983718753",null],[null,".08958721666238438",".9691218069447399","2.241195122942321","166.2781564910995","123.4892646956187","256.0869723375071","1.03308611562075",null],[null,".4503145888859914",".9510975913692841","22.07340721269228","354.8275357453095","305.0734755899163","19.55049930790555","1.062591777973547",null],[null,".3523682323037101",".9213877912523318","5.585713093001234","7.4049838367335","329.3482181144561","117.0536673355879","1.114398179180582",null],[null,".2552359303698589","1.030915980483062","22.87265668423112","173.940580116619","250.0925218056265","83.85991424060106",".9416058894579218",null],[null,".2960244927556388",".9903544529542337","3.362883670217691","323.4944517872532","317.3017881964624","275.6890855603212","1.000041645244197",null],[null,".1102446887487965",".9644817805020282","9.091512583203869","2.588296761420895","48.71314181178678","136.9811077568951","1.040550187565928",null],[null,".2026710247736126","1.057536821677201","11.41957323392824","180.0853954927736","93.80640258418573","248.2571406361423",".9062767265156627",null],[null,".1606505789031438",".9776285475742981","12.45933817665017","11.40755563724804","5.239263194369685","114.4600830836541","1.019631541646309",null],[null,".1654798341924308","1.006388921295335","2.115669255002266","223.947925692896","198.817240522513","287.7594481813018",".9762370884546493",null],[null,".1427913879833425",".958542591412573","1.479872003490671","357.6016142588629","344.4726752738999","254.2228723364758","1.050236122442511",null],[null,".1700513629962798",".9710453479179012","8.145810777806776","199.6778855579973","205.84715648348","106.3708021823046","1.030017980260554",null],[null,".1500474310623701",".9443122706986549","4.179265154810486","183.8564065238629","238.6067165770793","226.2307966418769","1.074065147356338",null],[null,".3449383911828449",".9545893940073652","18.53787853311879","190.2585873236157","234.0882475524666","90.42886285427211","1.056766814358189",null],[null,".3831063492568808",".9930709537884095","24.86730909108323","191.4917009392753","176.3931160083642","50.23203349891109",".995941099387155",null],[null,".3842145878680483","1.054498999539286","1.20969413662875","20.52389795686597","291.8304559183215","283.6537367846432",".9101957762564961",null],[null,".1462313093849998",".9390278135170453","10.38366209002963","18.48647557508937","334.6164168713465","343.4945307629424","1.083144477686764",null],[null,".2942178394827847",".9196014244559064","9.35304550305702","190.4801040495297","127.2936200903828","152.0608553777636","1.117646907880401",null],[null,".1597219737806134",".9750170854373414","10.33951472173504","12.75591861249677","303.9152965091215","203.6312092226288","1.023730717994092",null],[null,".5150740041651259","1.099585381233887","26.35742852405358","186.3256261712713","247.5115022022949","59.99614630203848",".8547923718381508",null],[null,".1445534902770005",".9849869713803033","20.98594726647095","199.9503021688832","223.0416961021057","15.54934311867647","1.008227049486224",null],[null,".0869248708458383",".9851785117031988","3.196843517360901","18.01327552229102","55.76019179432613","9.645768462943332","1.007933031581587",null],[null,".5152455022300594","1.008496912978519","14.7087527873695","171.9399941660396","157.1660503312721","68.19785813548677",".9731778466904265",null],[null,".3931939258466379","1.073528136670393","14.68576267057576","21.90172998313618","310.9050258503316","155.0867646543134",".8861024279325517",null],[null,".1647377262996189","1.031428219171127","25.25807302882708","23.50709042766019","279.8408769035032","323.8107298715983",".9409045312800922",null],[null,".1589604916140926",".9199032449460245","12.36671766132214","42.31168593534657","308.8067148661282","98.36364539014963","1.117096902645975",null],[null,".1954455612399216",".9878088057007983","5.131730017066386","33.69184735008588","70.46480703716458","314.5626215368981","1.003909892859776",null],[null,".2396994809691667",".919230137833154",".6328479821691606","46.02241947597185","301.7640667640792","111.9171611402237","1.118324120084989",null],[null,".1645426186380263",".9684141580027011","3.45256768334115","99.97691761923225","336.0515053972235","85.546242468093","1.034218682446641",null],[null,".1459589167983878",".9178031092818567",".7795008223738431","204.8642886180299","206.2350792827511","34.81252753615328","1.120933340847893",null],[null,".2940928675958677",".9785696443965378","36.30373704039225","38.46403641986441","10.17914912478786","48.63287875791921","1.01816101586585",null],[null,".2684664496185923","1.013375037832333",".04646775140920945","20.09701323188637","91.16201509347979","183.9509504203803",".9661593709662325",null],[null,".1426729743369829",".9091955391027984","9.586110903419012","222.5394852499074","152.594042147002","128.233289441642","1.136889170368548",null],[null,".2112751295522612","1.087650688146828","4.63102459627738","220.1592375909012","277.4833382624639","226.3997376700801",".8689002365596395",null],[null,".2762291534943285","1.087623309953876","16.01075375954544","222.1852212095474","269.3113134275844","224.2345644085695",".8689330453471408",null],[null,".4677101217637362",".9218955486991326","6.284518677551953","203.2678924107013","156.9938477340636","109.7328770454544","1.113477631205412",null],[null,".3345851612449359",".9543049906514711","18.03378648839219","218.8937708853342","193.4040415908082","177.3594594158606","1.057239258316359",null],[null,".3192515947136488",".9508193769301474","5.601656560744458","125.2864851406212","320.8667888361025","150.609570051993","1.063058191480527",null],[null,".559017589595988","1.053092741718857","14.60509172291739","227.6507782266044","132.8632803567843","290.9353252874135",".9120195431804712",null],[null,".497361285428798","1.037525235534767","10.34131986696223","231.7349350314989","124.5407776732231","291.5586356256271",".9326228906369717",null],[null,".2133961864851129","1.028324072436859","8.995581203692758","216.9215973371557","137.06575877","293.5860182605725",".9451681318946475",null],[null,".2134687883008395",".9737636746365697","3.711273686124472","221.3984246765057","219.4782290255083","122.7939803580696","1.025707945116582",null],[null,".2959284378034668","1.039167653818315","4.65804961470891","219.9985633126963","237.1105319671128","86.25551021433137",".9304127302025694",null],[null,".2801346768797862",".9015250474113536","18.13925099393126","69.7638130703518","317.0331913459148","187.1944063059708","1.151429568342436","0.328"],[null,".1460916947938415","1.011955781800046","32.18162864644802","72.93987993930448","76.538169688","167.0729141872725",".9681926241137632","0.060"],[null,".3848049857813798",".9233100587534629","23.32212716912575","83.29676849704137","358.3601386097415","291.576768173518","1.110919841596243",null],[null,".06860214102840945",".9874336429489865","18.34495564394206","248.0741152572602","208.6973165006065","342.5625182625092","1.004482081237644",null],[null,".1213845142047035",".9375474752549919","5.966651220381705","73.88440824195149","35.54186488334982","213.5556029392943","1.085710832487912",null],[null,".4004597813414094","1.049605010895453","10.4338231107386","87.25013242679084","51.89951044097619","74.11834659283369",".9165691398551533",null],[null,".05029109648078142","1.067337162471732","9.147786476790708","260.7894841866196","28.6466884515269","179.8244058249456",".8938232093175392",null],[null,".6105625285463776","1.02629220824979","10.44230708902807","231.860584711918","235.2004052889565","108.6507120625087",".947976401531502",null],[null,".2063132892762687","1.097606270825348","14.6825960900427","242.0860088960408","203.8149045364007","267.0207581867578",".857105347207586",null],[null,".1309194799125571",".9333151445570054","7.213580209271704","106.6725245977674","332.9283419693529","278.5631041682715","1.093104304162537",null],[null,".07000442945144759","1.053147492737886","8.480993961431961","286.1706233308016","78.17258618145824","167.4250595803432",".9119484230112134",null],[null,".4435509729483182",".9181630251464696","20.42253225294218","256.6802169196792","148.2037488271745","60.31337603589014","1.120274304039498",null],[null,".1858483453738163",".9488988619764216","8.88394892631613","285.5811470870054","237.9243201800551","85.06309199697671","1.066287173908563",null],[null,".09500117956961109","1.037435534180333","29.92226954735782","136.7420485005391","39.34839347405325","47.22171604622747",".9327438514202184",null],[null,".04750213814402149","1.034975522061198","4.535878088546934","117.5914634564531","272.9478367479793","261.0127320607586",".936071356369013",null],[null,".2426661027192811","1.055551220712303","15.04460036809095","340.5706338856071","195.1373337623673","331.5492898613016",".9088351290432881",null],[null,".1624300698455887","1.075440102176571","8.806321085774133","129.9491215765115","305.3818284371391","23.2635003427145",".883740449735631",null],[null,".285302808103362","1.011761665328745","10.47433296668548","327.5872207694242","118.3700226663214","278.692841748937",".9684712734585497",null],[null,".241855930325159",".945688938357742","14.75547494418315","334.8254398994422","119.5648488815337","212.0162144949132","1.071720677986252",null],[null,".09457461283953487",".9770546333827674","37.93906350124487","342.7066536743901","161.4696971792262","202.1429258497687","1.020530058859892",null],[null,".1866162417277877",".9002930115201853","2.013194639692318","191.29841886","357.3195976546351","325.8893109308311","1.153793944871531",null],[null,".1113368091232014",".9603392531792448","30.57447815228944","343.7981553074252","145.1345634136902","90.29861282736047","1.047290231814073",null],[null,".05788209180116709","1.02202671077491","29.05182681909356","164.4689474003166","281.0089573687256","211.885462105972",".9539172546776414",null],[null,".2628422195118828","1.022155798448547","17.1796641255622","160.8995373317668","336.9861041820917","172.6245252188268",".9537365556028625",null],[null,".5224663248998287",".9246490412564459","5.14856752610787","153.2628626202779","55.63935289029619","124.8978349373479","1.108507634064338",null],[null,".07317775566569736","1.075162628819416","5.358447493668947","345.1950176724859","42.14702526508195","61.69280241757024",".8840825797211227",null],[null,".2230612950072013","1.023892033581998","5.436421303194646","344.6695467816572","108.1938944197949","215.3471375482262",".9513116777753314",null],[null,".3080164706909989",".9418081087806512","3.634701451617401","358.0017544593095","220.3864840590143","48.83665803318523","1.078351721363619",null],[null,".03468287122163088","1.046216927931169","1.957369293351571","349.5762997852399","11.00872575811607","193.5151031814417",".9210250872796135",null],[null,".3161720911001572","1.013703620867797","9.57588281954761","169.028989896227","287.2676112274473","288.7793702593395",".9656896510546792",null],[null,".1864699673426743","1.019550657794029","13.15358054416329","184.5626858695071","301.4758533526723","196.2362796768242",".9573943498650763",null],[null,".2053862515814746","1.061378552378685","4.070631683677155","13.95238689095844","85.29113519686166","60.69729786743604",".9013606878253538",null],[null,".1906048899442039",".9887692100252555","9.726717621501807","194.8853030827293","41.87815091847781","174.6612955101367","1.002447582095563",null],[null,".1959245097601474","1.018798800339243","31.73363319541421","16.2820742137881","192.5080334747525","93.10180719840345",".9584543582797693",null],[null,".2594239602638709","1.037642513662202","2.325369738119624","191.4916285127401","276.1217487326086","149.9381081546649",".9324647824603161",null],[null,".1689218496381995",".9127996323052433","6.736454497775569","191.0308888536804","31.43489323922341","212.8519826781219","1.130162490500605",null],[null,".1776917039962998","1.036563504190323","1.538172149681402","168.5918784217792","108.1766021456175","295.8624134359143",".9339211333509255",null],[null,".1688265910404179","1.032160270454305","5.227638987728231","205.0248700792263","57.5397217277838","328.6602046586023",".9399037154499323",null],[null,".08423724573726546","1.077572225108513","1.527673623157971","190.3011842849074","305.6782507822143","311.0820593850721",".8811188469286346",null],[null,".6855652250238597","1.092416315363825","4.632072631736989","210.9538579256376","295.4885197671301","310.2894617225784",".8632206226801252",null],[null,".5813760416785281",".9470534626681368","5.271030494878773","226.3807900952186","297.8012870452537","169.3747805598007","1.06940529333179","0.050"],[null,".2894754048841673",".9429323314217488","1.366300503684267","7.713298580884646","243.5925164152649","7.934744847707047","1.076423779197088",null],[null,".4499081686288269",".9738416424586266","7.593153466510976","101.5140607378505","109.2707647642048","270.1542614263759","1.025584767057632",null],[null,".1531603449325958","1.031119671987021","4.208959500019966","206.91157149898","264.3967761846594","161.2204444586718",".9413268903453426",null],[null,".1519592963005585","1.056792091041391","1.088911576357904","181.0396925989761","296.5395141985381","54.89134227073814",".9072348869837636",null],[null,".4734725100738983",".9408900416115019","11.71015348819858","28.99277209138411","126.5225418165125","197.3606023999752","1.079930398029483",null],[null,".1839778050657395",".9516549284769745","12.1597825157669","206.927768383392","311.7531409226544","104.8875239594423","1.061658453677207",null],[null,".1256242090829402",".9549527310989693","14.00041005614298","217.3200982815816","319.4039970691342","60.9644073568843","1.056163759287244",null],[null,".1792960322084747",".9299882992487394","17.4932952223787","215.1513329304693","25.89497556880662","102.0561379419233","1.098975086541435",null],[null,".4214169848353468","1.006141110375951","9.459097595631318","216.1373668068618","48.55945443348138","45.58273430347894",".9765977790728674",null],[null,".1944429209486185","1.081636552938348","5.349416107261405","250.173477385768","336.0832157123998","203.6364604959094",".8761572131642027",null],[null,".1562235818701766",".9469268822057281","16.88534154664157","214.6993042540705","44.09414536918892","354.4411967362864","1.069619729645826",null],[null,".4430664768331534","1.035859542834323","25.05311845766253","56.56651650215487","205.6465583320709","303.7087117252161",".9348733223968301",null],[null,".1857611003392266","1.014572356689321","10.04501438130468","34.40198764042861","265.9592539509271",".06798584263419336",".9644495971869325",null],[null,".2969856465147074",".9289516623170169","43.85696663571333","34.47051506671998","222.4275181656105","112.2268761343454","1.100815154182651",null],[null,".2460955045766065",".9416116920089419","25.523782761345","36.57463804364721","229.5525709905466","6.013036665173584","1.078689149324848",null],[null,".5338017364377424",".9244350826607109","29.67833747197713","219.7049418935729","308.8288980724242","274.7902815092248","1.108892499044151",null],[null,".3442720039583199",".9002475661561016","9.466060862478537","223.4581852738894","306.7469819975444","17.52935379069825","1.153881312918286",null],[null,".3319375322155814","1.015076220719297","2.458554021097154","43.14764500557703","107.6176132526241","207.7823750572913",".9637315853643217",null],[null,".3249125584654349","1.034619460992986","4.179348571550046","44.06678390102139","107.9288574420368","128.1187510348372",".936554617005851",null],[null,".3855555179409698","1.058052617290332","26.29723090808627","222.5381590163759","287.8901387410552","45.83653541000785",".9056140989054589",null],[null,".4287753356028259",".9826550365307819","1.615956674519616","129.7268413217507","131.963788670214","153.3073602782231","1.011818107404696",null],[null,".2110706419249448",".9324472998593691","4.415240270726125","230.4930918963038","314.19238202269","174.3004774659022","1.094630715580487",null],[null,".4823970547164359","1.051532225913593","5.604135864380146","181.594351347892","348.964831599627","290.2718627050605",".9140505063436396",null],[null,".1383957278411001","1.072027947956544","23.99891311197802","224.1715222289207","250.6839707763071","359.5474973456209",".8879630871856461",null],[null,".5478246707236901",".9866634967761849","26.78954962398402","235.3716876736045","18.5305148148699","132.2906563266656","1.005658392572612",null],[null,".004034449354350387","1.025675912520734","20.38633916565211","50.30431701483555","104.5974817409102","254.0785122133048",".9488309427492068",null],[null,".2821075373484981",".9075954406033138","1.841597119764702","60.24943597902535","220.1432607428752","163.5987483342241","1.139897013058486",null],[null,".1747031505917085","1.036258625122894","8.411391320747157","54.65460827634949","272.9881305523274","248.4723968120556",".9343333189856393",null],[null,".122415955286764","1.017213182941137",".6262576877874259","47.40194614156685","104.2930319718393","177.9091215484601",".9606962688480309",null],[null,".2181186444699293",".9528253746229995","4.529288422297278","67.29890280040047","113.8523675728768","76.54439478395116","1.059702850276314",null],[null,".1853567899250645","1.057423815912649","10.01502827278638","242.78153970661","266.2251730946899","27.0278164670552",".9064220096495649",null],[null,".1217928640009585",".9170797001731765","11.16278300518916","241.2004370380428","355.7535270926072","181.2775868379876","1.122259921208919",null],[null,".04491282371843892","1.041598256253992","6.233873911949998","243.1378064573201","141.2425125686838","187.2274868168187",".9271579096102859",null],[null,".1325040638129376",".9554739900678143","13.32422671825374","60.17852110748655","204.1821309073783","309.7590302637302","1.055299591745947",null],[null,".09347144440802503","1.09229926184573","22.01283202514055","244.5468479880365","212.5203041754288","300.6052463349508",".8633593837155811",null],[null,".1220389635903984","1.078424514674465","11.4885925792182","69.84098402317628","254.95594206","102.6111705952542",".8800745179161783",null],[null,".01701998060976243",".9832904952298154",".4953439313718138","329.7657636283226","195.4856651266284","254.1595657030128","1.010837423574251",null],[null,".2415826643620354","1.059177603282843",".9688126123669594","64.33127222176827","97.92655228300389","15.14547803788779",".9041716600749949",null],[null,".2218106338968661","1.058226102465492","15.88846543096859","250.5984051385524","285.6105196311165","2.913636631347662",".9053914089989197",null],[null,".155832276966545",".9129005336504816","13.0900397873521","252.4674477180072","344.1226727454439","204.4615489112843","1.129975123267791",null],[null,".1483065960923243","1.069678869373106","7.06468529660545","80.9449979052571","292.9068096235519","84.1752499827234",".8908897223180661",null],[null,".06734709467938475","1.026798336922883","3.446371223002894","85.86529464972281","74.87754321279137","122.4574321144363",".9472755741771436",null],[null,".1582009226562951",".9810971017903019","16.60697675055124","271.0343485060693","292.8770341436899","274.9869102197996","1.01422914124024",null],[null,".4488686476536148","1.071388709719814","16.32144755573176","223.9649507099401","81.03405188118262","124.5157716659937",".8887579032193681",null],[null,".223673662496869","1.086233192107405","6.063064189852851","295.6066177123678","258.2613178223322","249.7023174819458",".8706016176047026",null],[null,".190854662830116","1.021129357186214","14.71686872225211","287.0328366673012","281.419534165417","112.7296572115769",".9551749637502847",null],[null,".1188185721212873","1.021449299092352","17.76634225739024","290.6762281725416","343.6561253629943","23.59681747090171",".9547262240517415",null],[null,".09063201813601469","1.024375751829026","7.704050259243365","104.9831407842613","242.1638047763068","290.3503314125793",".9506379320988149",null],[null,".4289163242102459",".9631397499694664","16.45143186165063","289.2149363833307","297.9320304287391","10.41844886792346","1.042725785333336",null],[null,".2657600497026356",".9283549292525231","18.31761921149239","121.9585765948919","200.0179878168624","26.28657475570288","1.101876706710106",null],[null,".24826111815113","1.05278372925165","4.201678186164488","270.4172114756675","93.54796845447487","70.32462219184906",".9124211158121205",null],[null,".178903350885679","1.099667842196419","3.057863717538635","247.0723316233476","125.0047485503801","75.91181472457177",".8546962259711055",null],[null,".1127455560555566","1.08020962056249","12.99102461563067","20.22116837538337","15.01444514597595","56.22276803529972",".8778938620393092",null],[null,".2515076599957627","1.019590983726432","1.495994987641681","74.80478474472494","159.9763072990293","100.6461323138215",".9573375514448713",null],[null,".13971960571832","1.075607196915354","4.759113779389214","142.5083138980045","70.24123637028157","262.6950370026449",".8835345251497307",null],[null,".1775388534985089",".979702280948044","13.73163743667419","318.4363201536775","286.2837820929632","247.0609027967047","1.016395878077909",null],[null,".007756715052343637","1.017079259251216","11.22846670898883","120.7104862044006","15.85770161356749","183.8980937824217",".9608860243021012",null],[null,".2754488649985217",".9357487900861698","1.858937427369137","118.33700601","142.6429089649919","83.27737283438968","1.088842746944272",null],[null,".09315864883435686","1.085626321608035","5.825278424585536","315.0508518399618","117.6433354863888","343.6970001737041",".8713317255491364",null],[null,".2108799216022252",".9397325922663549","5.750435068055586","127.7981026446164","119.5834970444728","73.17517275557141","1.081926204419986",null],[null,".3056910192378826",".9364647488372347","7.52570284541273","80.67456958553986","267.5311872260282","304.9366377107298","1.087594300367943",null],[null,".190319857426573",".9813889889485505","2.983762001669585","303.0654369771119","293.2677870985822","246.9771077215396","1.013776693049228",null],[null,".1301306026488593","1.04473489253333","3.624002605871047","123.080161363879","256.1406124722623","183.9564237096802",".9229855976871058",null],[null,".1070084639553949","1.055299597788312","1.630601185386831","304.4796057196467","250.4792756492126","346.9592209164647",".9091601988872806",null],[null,".2313080577652212",".927310585894594","25.07028979385797","124.0779987988235","155.5104330850122","91.53016851755902","1.103738642023997",null],[null,".2117492184372098","1.07692571699529","23.81259924875486","311.9289337806408","85.68469628413584","35.72572376074402",".8819124057970706",null],[null,".3375960033604014",".9558108830038931","8.820152710149738","313.5120300067905","294.9544800673619","10.32138369204022","1.054741701600389",null],[null,".2925893207923868","1.096156635216559","18.93435953160246","309.2701377526141","22.50200165956123","139.3060471227896",".8588061549558428",null],[null,".05144354143067461","1.044402441224723","2.121021987286092","315.7711357673319","23.36034872790788","226.1137050891373",".9234263361061803",null],[null,".4028629092950713",".9811853749388469","22.40038091993431","141.7958548397823","213.5001564641886","75.7175964931303","1.014092275381466",null],[null,".115598685888085",".964805099173791","4.60774422531111","112.250527682218","144.8086309716836","294.777475440403","1.040027178642458",null],[null,".4978412490652011","1.09542086657361","27.77910870745622","131.4135857998361","111.8824344692636","306.4729231289074",".8596715603244166",null],[null,".05248074107890907",".9948058212366357","27.60969026390745","130.0342296178933","145.3422906421413","220.9073611356294",".99333696463625",null],[null,".4783135016079815","1.085635935517905","28.94033096102759","123.906158961475","136.00194660","284.4267384419683",".8713201513865342",null],[null,".1003611149021782","1.084242524744022","9.661959154960707","314.3151950459053","128.9082824257482","338.1887640606939",".873000352333322",null],[null,".3335292703186816","1.092521626921076","10.48456246777829","244.3797280001047","11.04593720420499","169.1386917108179",".863095812907423",null],[null,".5519552706363211","1.094831918780166","8.961138841718522","335.667309180565","50.64658367486671","62.63302443730453",".8603653240104575",null],[null,".06948038296194868","1.043073894017047","15.8267904712881","334.0837751856424","108.9888679452793","126.3951861131118",".92519112868007",null],[null,".1691115543459607","1.039567612649195","2.671398500091898","128.7187385260595","125.6754048327287","357.0928695008253",".929875837284258",null],[null,".1305775376614436",".9295769323141577","2.63644574661142","158.6718168275486","143.8741902368456","52.1544694063243","1.099704663634373",null],[null,".2744948449716021",".9737110808315155","5.711488940372131","330.0174348134572","70.91698113025015","67.13421195654452","1.025791049763684",null],[null,".1370922429452251",".9381184279688196","7.137784247827457","332.8539455704279","313.7822769341627","29.56444216133521","1.084719813870679",null],[null,".09681109585861744","1.060723519363591","10.58987486667406","331.9622878938131","10.0902345503909","172.6703961064428",".9021957482442483",null],[null,".04678989698873542","1.011666669784508","16.51321027186366","157.9276046995934","263.8768725581036","274.2558617422487",".968607685902677",null],[null,".2409444280565588","1.007142715592619","3.145807479936171","341.0041285052645","73.74795956426111","280.7707633618343",".9751412990062978",null],[null,".07309468589584335","1.085230717839835","19.72779536636225","347.9260700769632","194.4403335758099","250.803327606768",".8718082143551608",null],[null,".1525906230981168","1.039342102128192","2.838995443371187","25.59937163154094","247.612573869637","336.5785147908582",".9301784924327355",null],[null,".1691400583871704",".9180415283174981","6.119424505446765","26.30969368475672","332.6858095916631","42.95291724544889","1.120496702930831",null],[null,".2214819839689499","1.063294969027253","4.371196300548348","354.3724750307248","84.22264673859669","43.26473202704263",".898924951581241",null],[null,".2724725111428191",".9330325849405","17.52092394886036","356.7377958275805","48.2128395612154","255.0903696245748","1.093600895365979",null],[null,".06319965891280571",".9515362894461034","6.023823599197367","163.4012214359013","205.098113468132","228.5586385976184","1.061857013717558",null],[null,".4095178122452683",".910991197885724","16.27166992956412","178.409469240229","231.4103544721048","341.9545574238356","1.133529436411503",null],[null,".2637444385582673","1.007570497926092","1.813886712379908","185.6966217141918","100.1072250335862","101.5259145513725",".974520344034236",null],[null,".1864960994246085","1.046953683294682","1.007094505967826","290.9612763875645","142.08356615086","111.9629777266635",".9200530517587477",null],[null,".1561927865414408",".9600848227435633","7.151361443535048","6.941160693647608","56.03795945057536","119.0492434085139","1.047706570282143",null],[null,".145920699361606","1.033346990700137","3.173055878078778","10.41163666065147","85.82984076259278","143.7536816356062",".9382850687443115",null],[null,".323769559294749",".9070876164442496",".2256498148612707","199.5511478909116","114.6231230918035","174.9942282064955","1.140854387366631",null],[null,".2818735059254618",".9041922186672239","2.524191169617121","16.81567828859192","40.93709553588642","22.65663988499015","1.146338625405557",null],[null,".333380469294927","1.039148018895703","7.099185836200778","188.5272697625928","104.1235696496366","341.2851487564507",".9304391008464812",null],[null,".1277395318021323","1.086430835727453","6.616723306241382","17.72143545794588","82.44879220903132","317.028304058286",".8703640584931643",null],[null,".2879962239035139",".9717149500184291","21.74699831876826","187.1214399707764","242.2588003932037","44.98763592282577","1.028953496217824",null],[null,".3481476762290007",".9389406679918945","3.499921071639057","30.41266395871924","284.5560122147519","17.82233596723438","1.083295275369216",null],[null,".3460210449161749",".9863299897539375","2.494855720531241","5.971970813333016","295.1436975732697","183.539188801084","1.006168499468024",null],[null,".05900736128628763","1.038368759422823","1.515703525014884","6.701375667627429","239.7216333074125","357.472094474602",".9314866903827249",null],[null,".1585171977804326",".9711913330972448","11.70719752160735","180.9279899606422","226.3964666989035","87.5835191895585","1.029785747377592",null],[null,".2824463031119355",".9373280141861767","9.559560821400572","176.9111270390764","233.4465668988415","226.4642627699734","1.086092158772522",null],[null,".3173895529036154",".9109991277603887","17.90020087279996","8.948896060952872","28.45921382348733","24.76375435563597","1.133514636078784",null],[null,".4019286244924192","1.094700702272459","5.409742258684965","53.27966586651164","250.6741304344584","293.2943800064149",".8605200204254946",null],[null,".1827997723237247",".9600543817130003","6.856387586992391","196.2853784446502","128.550443207828","251.1382166602459","1.047756401085192",null],[null,".1283932755116777",".9585752648156767","24.12762703705907","191.2601016046143","176.5628945766533","196.6266703125574","1.050182426352545",null],[null,".2289104565983016",".9619130794721842","21.69744354168732","205.293901992995","206.8532192015414","123.4995216141204","1.044721010290123",null],[null,".04550765711255017","1.028783646317028","7.248999697429008","194.5682674765682","131.6916073725212","313.0210635342993",".9445348703630778",null],[null,".06101501280321309","1.075339762794803","14.97571548962438","198.5292870957869","82.89595650360553","193.6507251082249",".883864144648536",null],[null,".1870693692242895","1.045401023688896","28.1407778352602","27.59365136273535","48.01601003137997","119.1709033286912",".9221035464514763",null],[null,".2998021635392027","1.077037186558676","19.78971262187911","37.68225766507169","31.29148402283658","10.99654790454789",".8817754970880531",null],[null,".06444345288635014",".9529965629024917","10.48043261342376","195.9568409944164","158.3500581059457","239.7256353391739","1.059417328951507",null],[null,".6406550296959991",".977336556331769","13.21551519457268","37.62991094694274","309.2401384820357","201.5752976581784","1.02008851685336",null],[null,".1471023472717652",".9090523393529948","1.510392048184534","141.1178081452735","258.7097468474934","41.06520040314604","1.137157816048695",null],[null,".1388276332420793","1.057953824766736","10.22631488534121","206.824827767961","270.6822571579579","35.39947634302214",".905740952254943",null],[null,".3623336062076241",".9780139809848076","18.58961800483993","218.3104539841516","116.7981863011781","179.2813834699161","1.019028848820568",null],[null,".2167390397004952",".9103611002661942","1.791753350645914","67.47715624357069","312.3508767460397","68.19716611176814","1.134706482156305",null],[null,".07691364464673144","1.044400607881997","17.46889614722802","218.4258482172553","281.1643613327099","69.06357757806077",".9234287675836514",null],[null,".05517105279993955",".9714712819600625","2.62454705016215","45.67274650809946","345.7632628104067","116.141050583608","1.02934064943542",null],[null,".2662772850668629",".958834889012868","11.15600597528984","220.9004490758905","235.2856856823532","79.3352089728198","1.049755917604705",null],[null,".05120597157369339","1.020573051222856","5.232475868623697","222.8316336587369","279.5858205282166","159.0577444589275",".9559560571748942",null],[null,".4631023913905598","1.075316867358507","6.982038305734551","36.51519931198784","61.96303985133837","310.5259436792437",".8838923733923821",null],[null,".3492059892311689",".9064340548283107","5.822087760150123","243.1977577482331","130.3681261934364","101.5220924274247","1.142088486558832",null],[null,".2038297691313879","1.078738723479208","18.95986013820765","58.84282747628652","76.26464834330297","298.6802308683331",".8796900313592581",null],[null,".3344526591390271","1.029203288880546","8.786887866026454","57.15805956542285","56.45865448706386","123.9991411305523",".9439572488679067",null],[null,".3628774682988442",".9770105950248091","19.06861783655233","233.8867573823613","240.5775374229402","325.8945305219092","1.020599059605205",null],[null,".2558449157952944","1.059454648159595","4.963035816263375","175.4347962212973","321.2390227744914","358.0570966583973",".9038170251458635",null],[null,".06637512234657093","1.073752253916448","17.52661182616271","239.354016255951","41.79698401938384","200.7160381273384",".8858250169113232",null],[null,".1655057160148926",".9674680543268731","1.237643144611654","349.406298137792","125.5946523115873","20.24403349906144","1.03573612367589",null],[null,".1131294239039362",".9466397163393314","32.63988667885844","239.1060452608486","149.55452509","234.0548895799071","1.07010647486299",null],[null,".1342854171071466",".9064685123984291","2.178194199361839","238.7290798454782","207.8481100804815","356.6661039949556","1.142023365896206",null],[null,".1559695619694706","1.020587093721126","5.223908368189272","50.15326389874577","320.8755884213923","317.1173112728465",".9559363274058443",null],[null,".2400344653195113","1.099174408074816","41.70652676471441","79.29960012590102","11.3288910028505","275.8688595384257",".8552718174387581",null],[null,".1549606834539393","1.012255322592368","12.42412090168451","247.4102387291381","249.6406752845662","186.1643022975552",".9677629028910771",null],[null,".2126215905759437","1.093164438954382","16.02134770865719","247.8774550391634","219.8443330136786","285.2758368778395",".8623346372061341",null],[null,".1304578207818142","1.049510393399768","64.998263617717","79.73117880953889","29.09825317882759","133.8022202468898",".9166930911258123",null],[null,".2310993077636711",".9658678052249496","5.913899777204575","271.2081125662701","131.8253934332071","150.1756855584299","1.038311199860653",null],[null,".4055492932727021","1.062614524425567","29.97240850071017","280.2931898348803","202.1592665899405","14.41681023205402",".8997885289084776",null],[null,".2580728733688857",".9064936106904931","29.38226327530785","272.25249760","160.6744549477696","217.2115183795594","1.141975937041451",null],[null,".09091478822311769","1.020381852708501","10.84431106854671","116.3618035342793","349.5045275773467","205.8110106630883",".9562247594347574",null],[null,".254551845081224",".9561672874783966","18.60757228127903","276.1605832242367","228.2115293777596","51.1734627506024","1.05415203549054",null],[null,".1215634862018049",".9665352017915239","13.5505544064847","254.7147682191374","262.4119675393783","346.9486435271993","1.037235948243988",null],[null,".2571861669903556",".9760626550728939","43.92694092850783","294.8055066488565","119.2812574336864","97.92471002449976","1.022086210268661",null],[null,".4466169880059794",".9826723389852097","17.90402311449674","122.9579600773053","299.8895416997395","83.58134375983019","1.011791384062233",null],[null,".01887823071012097","1.053252725091889","11.69050017366486","132.6841770661582","340.3194492882746","79.99614016891819",".9118117548404447",null],[null,".2319097127774131","1.04379129375529","7.715371979155273","314.5047599890414","118.2621753250304","177.8150695571481",".9242374641615049",null],[null,".2289631032670677","1.062915232926649","1.825499157174399","303.7733195624164","116.0403712903241","124.097881048981",".8994067182331359",null],[null,".3955391513868223",".9664663024589921","18.82700997083746","321.3431709271787","228.744216906491","89.18434916889194","1.037346866968715",null],[null,".3177890014712927","1.034466263139002","4.004252826226844","322.647551642433","249.1357238033488","8.463807204263627",".9367626713540144",null],[null,".1742721847385368","1.068568133680424","7.453385357073765","144.4149001413556","295.4177712212894","78.88334040968998",".892279151899276",null],[null,".3319996197785395",".9666346247015036","9.022424409777107","340.1955245764528","113.5383225844622","99.36556153363868","1.037075925477516",null],[null,".1264373330364028",".9841822785496813","4.147102135823214","326.5641875156706","234.2746772337007","230.9430137858966","1.009463830890059",null],[null,".1583154171876149",".9728136782881071","9.158395144258009","322.8386808669989","218.4647912339077","302.7976113449213","1.027210786834577",null],[null,".2607271206356266","1.034566146680625","6.298492343439255","148.562028271772","289.3903608537598","208.0254528884638",".9366270131626834",null],[null,".3077127129731331","1.099398192011133","24.60858745402657","214.7585637283966","348.0744571085818","159.0618128099466",".855010693186523",null],[null,".3107042516991085",".9798614443714968","8.536855229577021","321.1851504160828","168.0455436830617","348.8093502180524","1.016148241314206",null],[null,".3980436232571384","1.02921433544508","21.27483445069982","142.7066038666514","21.23692807797854","130.8420175608412",".9439420516592266",null],[null,".1389220727704348",".9300258229659282","4.81375898767015","159.2865266796101","315.6551072944782","215.979846167183","1.098908576752077",null],[null,".2725354710156375","1.066006991984594","12.49514064989595","163.4036885275891","70.20843940778765","244.4201363834681",".8954967087549489",null],[null,".256582139001831",".9574758201907573","2.042789662921703","162.0105738202558","62.46285501245929","304.9581185112876","1.051991791336568",null],[null,".3099973908932803","1.040717499717307","5.167701701521017","9.539945973076462","94.87110117402491","166.6317644858018",".9283351356158874",null],[null,".1157573832480415","1.017517040313378","4.117846191041087","16.58178389528583","220.7532014602938","72.27469611135346",".9602659671855885",null],[null,".1204423829853725","1.019714102041067","16.92973355108207","177.5014926885413","38.39809812777256","139.6578735447909",".9571641760454964",null],[null,".4393172603650756",".9795464876951098","24.97519006017667","316.2300500082197","287.3689272161996","162.1611671308249","1.016638368737752",null],[null,".1520172181080165",".9960460592315256","8.805269747409582","182.1775395057124","68.59304373385457","122.601468763762",".9914822451869697",null],[null,".1456490281106624","1.016768537532204","13.37707368610147","2.623549026554981","136.8910272172099","201.7340245091957",".9613265242125542",null],[null,".03326543317042167","1.048831351661496","21.0951250923144","359.0555105183859","99.19430012018317","112.8414487323822",".9175834729894635",null],[null,".5257681177971897","1.083634505038192","25.07329777525492","41.91047137408982","206.2138515116392","153.966464718915",".8737352069340505",null],[null,".4835324025653809",".9405118993964027","6.317402552713986","326.9800592884483","177.2796994308634","268.6337409822082","1.080581758717897",null],[null,".04063013794225817","1.063168706659473","1.302562162089369","343.8130616825165","156.8964655145863","22.68290871647237",".8990850913999329",null],[null,".1899663458196651","1.092121473443732",".1315870209843955","34.86206113414889","250.8680649600297","100.5354245525919",".8635702140156253",null],[null,".2171957754167709",".9730685510130654","5.441785317866477","11.84394487423239","116.30494281","27.01731922507925","1.026807232222172",null],[null,".2320262606395975","1.039411278549709","41.68768043682236","5.471589986720924","246.0764413145538","87.66894525048416",".9300856340783386",null],[null,".5066294017441764","1.023878728754765","36.70852455915184","354.5065009238004","229.3643542736691","89.84289071143272",".9513302206162375",null],[null,".02770605022126192","1.065092788440357","11.07888859617173","191.1505938606597","210.7835579742573","115.450487992011",".8966499067495535",null],[null,".1388567780541391",".9803996402907499","11.20573694655142","188.133844066154","69.30153286713991","185.9036170259365","1.015311625683186",null],[null,".3200575615788953","1.076760930821921","16.21908364908498","318.338127313155","205.3784647258023","213.242261891778",".8821148637355534",null],[null,".2096181031576422","1.041318371596465","1.123765436319337","190.5454564182445","273.2502880535204","155.4466175054665",".9275317357865528",null],[null,".2419850431622374","1.087455113592375","60.55201202996738","19.95642180400462","104.1872280640571","282.927709093927",".8691346495708561",null],[null,".3967256605903186","1.050016310045122","13.53734137432102","199.4469646969588","71.52957540322069","248.926223898348",".9160306522337497",null],[null,".03818802172685297","1.07886272504645","1.55809750181632","281.1969744506542","137.7075513660313","55.23510910309589",".8795383719235044",null],[null,".2547935489750548","1.036799438313148","8.337896335433031","14.59233891277281","113.9450476375606","282.1407547157766",".9336023667923244",null],[null,".1500892715849497","1.092500702000383","15.62931989537289","201.8980386415201","271.2979998403142","287.4770416693062",".8631206096413425",null],[null,".2314068928013733","1.086865221008071","7.652558901560599","203.8248200208074","92.39622844220422","125.2360303726483",".8698423256002416",null],[null,".3298423168168766","1.010902976415424","9.617563223883009","23.81822555375855","110.4548047177887","247.2175509263666",".9697055048424296",null],[null,".3617615430465757","1.024354798590215","11.22771008650848","25.22645252977694","244.4998048642486","343.5039101706639",".9506671002818053",null],[null,".2025702533730424","1.043528314671711","7.335399415359757","199.8935489003134","88.68626162298575","276.2992750264607",".9245868611500566",null],[null,".2961249537729853","1.04486295010067","3.965745429345582","194.1055130908118","302.4937411967","121.6871479896593",".9228159223214069",null],[null,".1196663285323812",".9831934312170625","11.14308210840859","27.29760745679157","214.4134926047336","200.2886171763292","1.010987116943325",null],[null,".1942339807573986",".9861406032534834","13.21613623430416","30.63980388870993","239.5692573921315","146.596033670192","1.006458362615807",null],[null,".1749468386163212",".9176525261993831","6.029676458574188","26.51826384916767","134.6908588379657","224.8511809495277","1.12120926313431",null],[null,".08829416820001534","1.07411003136708","27.96278032765238","34.96793588055193","58.67866300335243","44.39034698868726",".8853824619393361",null],[null,".1099889124668805",".9439704511582153",".5887502013096475","333.3143510710317","229.9248573855301","50.24505968763825","1.074648592031548",null],[null,".09982235664929835","1.012229375141465","7.855523722812023","36.22107953354972","257.8983539624408","34.41142389910868",".9678001145280066",null],[null,".4193075855551562","1.082429847031582","8.521836596602427","209.8906061720665","74.53480781665274","128.0995749350798",".8751942089833261",null],[null,".4118930271842481","1.049088261366952","22.32227204172666","34.86486015322484","119.5942997487059","280.7543091244806",".9172464350956974",null],[null,".3757126491768416","1.00982455863397","8.061709342330342","41.24438208901785","238.0346704603012","73.68422087903896",".9712592798978863",null],[null,".1671424075912323",".9224879344792893","4.208060655181149","202.0352494046728","50.58200803828423","83.77828789206147","1.112405255536997",null],[null,".09675746724634045","1.011482424133713","2.436714250246171","28.88951045787905","94.63424222885595","228.8241329461568",".9688723517176722",null],[null,".1963216152487591","1.024142649418129","7.688286487781863","226.1540747794687","82.80585419767144","325.7892110217237",".9509625088597725",null],[null,".3140376021138555",".9513147681157478","4.33191448128843","229.0334471119555","58.40438583239116","253.7906698293086","1.062227928286211",null],[null,".276452630786388",".9181843157136607","11.08656233888382","232.3991469856866","54.3213329786097","45.59011582621135","1.120235339416594",null],[null,".3032444076426852",".9821908998396572","26.76613777403526","54.70399830664755","115.3456620869403","316.5200987155212","1.012535397777181",null],[null,".161208230528469",".9342956631080017","21.93646579063526","44.20705693197768","223.0389363557181","24.05892399797974","1.091383979698813",null],[null,".1620020230423522",".9649987843063433","4.675777765142613","277.7321669982585","279.962603619339","339.7143365133191","1.039714078205596",null],[null,".5098864686650496",".9085098253451488","19.08036620745709","334.9778858804008","266.9972969881204","248.7575818906014","1.138176543832195",null],[null,".1918256309092518",".9361186504529115","8.961692756450613","242.0837839758777","300.3069119770814","122.2521093751299","1.088197508229724",null],[null,".246870222704968","1.076435296454602","5.200725239297791","242.9964706012674","90.6074054852908","122.9509893420388",".882515169222181",null],[null,".4221414517978641",".9126419199946381","11.46055021955587","64.14040369204682","127.4275913437007","243.2092237931645","1.130455455738089",null],[null,".40825950201128",".9707061158668217","4.623111955319731","245.3454803570514","53.83789343565736","80.04353519760495","1.030557967029563",null],[null,".6979220165715552",".9494919763063806","1.4039052476073","219.6599987118973","355.9835768965522","298.1523639194643","1.065288221665247",null],[null,".1855328594292521","1.066264751175256","20.68567169200839","257.5065849028217","275.2808887338862","4.579207482976702",".895172011877889",null],[null,".2214527444240354","1.055631194007307","10.29318079389059","76.6957801510566","111.5629998810707","26.88835759599121",".9087318526854615",null],[null,".1590639759825962",".9420333804334412","2.328703717920513","233.5727458834277","56.48194013825061","313.1237439411706","1.077964939605672",null],[null,".1707670831804002","1.043804346545019","12.13466754390539","261.7587909498904","264.0607572826338","84.81069897477522",".9242201278097185",null],[null,".2150471124488944",".9975777219516471","27.19618752819157","269.1550017086948","284.2955003665618","221.4206406909914",".9891996661518471",null],[null,".2356037731358812",".9647474145326214","2.693728677938885","103.29869083","226.2201716814625","165.194699350376","1.040120458744304",null],[null,".09956850623885559","1.076521312072865","3.226743301856563","264.6182606484371","141.8606369532905","74.13411906625353",".8824093999670287",null],[null,".2011239694525108",".9367212680146364","27.50651370509045","93.79914907940226","219.2095649462172","121.5615359853516","1.087147577790827",null],[null,".05256330500465353",".9897859766433902","5.549253294138626","91.49546116411587","87.652510336","246.4151294036319","1.000903318804325",null],[null,".09445831676315385","1.032765828557841","10.58482641027048","107.74536901246","251.9635570414924","263.1102736404566",".9390771734757787",null],[null,".4436203747015631",".9649572396166662","7.052047504582759","98.46838595187947","134.4341039521616","336.6076417277267","1.039781223766882",null],[null,".1132529086958922","1.094711614868379","2.200133223835947","273.7018643219309","137.0015019987976","14.77268633343289",".8605071533580922",null],[null,".1684297178010458",".9971788091247422","16.98240352764076","91.8429676893751","142.5615157315884","236.1039262300554",".9897933067734515",null],[null,".162438825142136",".9549552203335137","11.21991514152543","307.0615753792374","20.68782767965451","224.1290305012206","1.056159629715179",null],[null,".405963927668023",".9887238885117727","17.08073800760839","94.21213906936056","124.3159302954479","286.6396928219654","1.002516508766213",null],[null,".06579380872966863","1.06785149533157","23.87218629800297","105.1797866124339","68.16409548970573","294.5737165397812",".8931775194156663",null],[null,".1543421887525642","1.002302469590064","22.07181070833595","290.0555029797484","284.2454677348689","180.2052944336303",".9822134418240867",null],[null,".2257989201800753",".9713563363895633","5.437122962794554","293.0882976337416","287.225434884015","300.0008779355928","1.029523365567467",null],[null,".1261735657695307","1.066882776049621","23.7158567812862","110.3699087586382","222.3306971598082","131.9001079961262",".8943942903889875",null],[null,".2189011636272543",".9289045361446552","13.57015679492846","112.1679500870413","199.1439353378227","352.7134292132557","1.100898926829269",null],[null,".365314530167285",".9768328981700753","10.3556465336022","114.0170181763945","114.7707594759691","282.529164674505","1.020877559885019",null],[null,".1691052339323822","1.06543421236094","7.754233956320598","114.165074138536","280.2201588562156","111.7692184664728",".8962189371094255",null],[null,".2028808887019214","1.083106734711797","12.46059892799235","300.0078593000965","82.5313728102894","68.98089544368592",".8743739080939857",null],[null,".3088861479588632","1.099721593197764","8.620908281608907","305.9949104838041","279.3909688695612","238.9393684439428",".8546335643595636",null],[null,".1504725793807482","1.074796322621031","5.347805283415787","128.8049957284325","72.99402812405734","312.2736445194632",".8845345805047363",null],[null,".1162481966221686",".9171392264407962","21.66954794075825","288.8428339428534","51.06220945215532","8.994600599695548","1.122150663761676",null],[null,".587802963359946","1.063304820048303","4.455186836090803","98.97791434398962","129.4769053779823","308.4101877457948",".898912459434551",null],[null,".06968629198010778","1.048319913208195","2.864207530920754","297.1975102076348","212.8592660710963","74.38954958046136",".9182550399875501",null],[null,".2872499848892971","1.055398985628871","2.375048451755825","297.8322661294661","274.3251515445476","20.95843302155027",".9090317773005917",null],[null,".09149015344755157","1.099672826692678","21.37836075364164","298.7386091670048","244.6020105286745","249.5198639593839",".8546904148424207",null],[null,".5931092858450454",".9563430719820404","7.962650259598769","128.8527845918671","136.2248174024493","352.4504355647961","1.053861404833447",null],[null,".08491333985076728",".9750436647623633","18.94028260367331","119.8902210876592","243.353783777023","106.809581677012","1.023688858505584",null],[null,".3314635076150628","1.04004199910479","4.087533854516004","114.8117726096506","118.524046953829","50.96779857718617",".9292397040349583",null],[null,".02356933517502381","1.097235243184864","22.50819959586708","122.2102295093439","99.85223425380292","208.6973014200479",".8575401263381167",null],[null,".1379271894525733",".9379871554485576","29.30617988539202","131.3849336761334","171.9491470028857","315.1562407444446","1.08494753375712",null],[null,".4999739752558542","1.059714784596199","2.290673827772821","8.314283655854787","250.0363040075604","345.7359255020336",".9034842450702701",null],[null,".1536726974864177",".9829883057211973","21.4854401949254","136.78342296","125.7491170550261","203.3586351253285","1.011303585690964",null],[null,".1553955132137504",".946668257288349","10.5980740366847","319.9365816494623","6.829334057553833","268.2560083263111","1.070058081525769",null],[null,".2128734406820799","1.092863232527018","19.60707949101233","148.5534272423485","104.3780598029562","218.8513076275217",".8626911666742879",null],[null,".4431687699072419",".9042282571730265","4.102374513678523","333.8777157208984","310.8791738002432","180.0525791476756","1.146270094170371",null],[null,".2417241070367354","1.029456675261115","1.170326202094134","42.52673251855331","215.9569460710331","56.22906416581012",".9436087574775761",null],[null,".05208974203898158","1.069288641534534","10.87098296371943","155.7238675000205","7.924559794993259","355.0308874553524",".8913774508040301",null],[null,".009186575660775152","1.011595961105638","12.37587839504668","338.7568836008078","4.63696995649426","9.036551995166041",".9687092434947082",null],[null,".165535660126257",".9855324738675078","5.153599576983765","341.052249590921","281.6281649465145","196.03891172238","1.007390069075574",null],[null,".1284654380650536",".977185961973938","7.075153941333906","345.3154854661552","9.460857247349239","111.3713560064853","1.020324335059218",null],[null,".09574272368481535",".9780035349710541","11.36535236122677","150.5963602702793","189.3779034278445","129.0979454209179","1.019045175169216",null],[null,".1313652969175076",".9181066457715901","2.440437312858976","333.1201930187032","325.9793095544625","65.49252515912573","1.120377496846475",null],[null,".01221866927475891","1.016757815860418","29.43542250142249","194.5462792520755","126.7758626479297","10.76700523065808",".961341729979084",null],[null,".0925123316708695","1.009805215189191","6.389009679212969","187.8369502443705","101.1438605877096","77.47078181237478",".9712871876393649",null],[null,".2439457145127734",".9253391596944449","14.17304692951454","351.8077105230953","337.9213255349355","357.1473460999039","1.107267776932159",null],[null,".1021336956761087","1.065006984436835","8.829495583127873","162.8473188653764","300.1738996951231","58.43363394939642",".8967582689985552",null],[null,".1972666712993148","1.063886925312288","3.181851453064506","168.5134018799408","270.9519585823859","72.93152835204258",".8981748010215557",null],[null,".1305414757524484",".9810380907076215","10.99798974102515","164.4528663545708","244.8165466131105","37.17468057633329","1.014320653986227",null],[null,".2955981867907799","1.073637524880339","6.546757144299106","1.002615996020582","271.6314427357198","268.4659572804766",".8859670097575947",null],[null,".1771008565532204",".9381577909185246","3.546168702489905","181.3706530627631","232.9742503106964","192.4434360850861","1.084651546052601",null],[null,".4545034783891926","1.052769405361234","21.37132974688165","359.140323532482","39.62851619132269","96.53741728985038",".9124397373608639",null],[null,".1336507859952185","1.04097925774223","6.945288212168358","176.4060231084188","97.81739206367881","350.3998242275184",".9279850077530678",null],[null,".09465221698887441",".9418922751119635","1.158335304896675","143.058622545114","191.8646674239083","277.7013398347838","1.078207184324116",null],[null,".3451433682878534","1.083373833489971","3.459065047836462","163.0369592169764","258.8728092836473","17.78698808522068",".874050571218005",null],[null,".2475684972125025","1.080946793601088","7.790374604812824","17.43693402309862",".2118349039639526","101.5178208311662",".8769959695488532",null],[null,".08980973452029896","1.013762569278605","4.561669853171945","181.6988642076461","255.746768742861","253.0188871383546",".9656054226869086",null],[null,".06856207091952532","1.080683050408172","10.58962379477929","182.7044286184298","89.60558840321575","222.6211134841412",".8773170384722789",null],[null,".1700150813243179",".9021455460794326","3.105352497899635","185.6003317405661","173.2362484642179","63.78950841880389","1.150241837076972",null],[null,".3872759078123482",".9291777112655965","17.25288662423981","181.219287199694","233.8367986420723","205.5780750308975","1.100413471643334",null],[null,".2964477392390153","1.093537711907674","12.22325624276443","9.518465052584402","269.8115870272865","204.543535547482",".8618931452623579",null],[null,".5011147641517135","1.068999956561682","12.27109901315734","5.804159873456554","64.83257435419215","32.26606211690815",".8917385518205336",null],[null,".1880677879664879",".907021503640783","14.35588313874809","183.1994027367269","152.7226454781445","76.38224258062301","1.140979124965481",null],[null,".1046579343441593",".9232408295742226","1.241264897834907","164.7640472658008","242.5389497765465","272.8390224154674","1.111044797363077",null],[null,".09225957809967986","1.083505823642483","4.597847975608403","192.7403411651266","320.6325021097399","320.8087923229915",".8738908638788246",null],[null,".1108234431405327","1.083106580161175","17.14897085850101","33.63560905655571","31.3600924323472","46.21358359864445",".8743740952432077",null],[null,".1194889889177375",".9583137563987689","20.41953331395105","195.2718970709726","147.0060932671152","207.0789972920768","1.050612322527039",null],[null,".1736503852801733","1.030729726533258","9.671419643586928","22.18834835876621","270.7206928114331","9.43771746895847",".9418611247525582",null],[null,".2262473103739904","1.086272632199536",".4745545476764112","42.40565581068363","74.87500445550268","331.2938374836432",".8705542036839474",null],[null,".09099963323671879","1.045752725839117","22.83437190122262","196.5186169637029","115.0690220645475","290.6788364764062",".9216384099188244",null],[null,".4466914573513384",".9136951548393002","33.22769713162985","26.91739028505513","315.1073047532937","270.4120352594646","1.128501370912714",null],[null,".380117012037486","1.086229182726643","1.551406264066706","196.5558260746718","262.5293258305549","328.851078082803",".8706064378258683",null],[null,".1110235256965271",".9360300593876868","1.004647001552556","167.5910683938328","232.841672690648","226.9914919818269","1.08835200143722",null],[null,".2305878671498542","1.045908788791299","7.872918767551885","60.23532368229503","26.49769018654654","117.026166142505",".921432137277675",null],[null,".07966204857617436","1.02941568926962","17.58020805728207","205.5726286451512","278.4391707438109","154.9025727961237",".9436651124455445",null],[null,".3639744486255826","1.097294510153638","19.37572985920508","32.60212485873691","79.0153305349416","289.9089265330642",".8574706512102348",null],[null,".4815903922302535","1.064763970947181","30.40890504274484","37.78150253677772","32.50517073907846","59.08683182303142",".8970652902673169",null],[null,".136233057823576","1.097936536945849","6.869713945033759","32.05899146659359","120.8758583129948","276.6199109208366",".856718642384804",null],[null,".6398723959644057","1.020443932481096","33.97477076761425","211.5040737483902","232.0599297559327","53.36596903907914",".9561375013660985",null],[null,".2588896551538604","1.086818289269162","35.66671702325937","67.85290174745055","294.0498856924957","134.8596875932743",".8698986694077083",null],[null,".1775531461464673",".9805272822796115","5.146212667605422","54.68238848424888","287.44789158222","132.746246656839","1.015113376975802",null],[null,".181444797936864","1.090857768260354","27.02889163771342","53.99755301269659","48.63328263133828","336.2742818581929",".8650712540873924",null],[null,".0585495932177835","1.060454001413726","10.68359522351883","225.932865375193","65.68618317344456","265.4293029716508",".9025397142210614",null],[null,".2782221187704586",".9541091397926292","43.23144103633257","64.5819618640959","305.0998036516269","212.2998484683926","1.057564805730676",null],[null,".310478101589633","1.079825629379628","9.193360875302785","233.5038383922742","262.008154945227","323.3684951661422",".8783621785788929",null],[null,".1998471467818774","1.007030089880999","8.861209905387428","59.31604264224754","284.7517398336799","43.42901803587213",".975304892509357",null],[null,".1290648271730014","1.076893473405487","9.537709599423566","236.4232195001846","112.5985887480592","168.3793147639792",".8819520144985004",null],[null,".529929086006367","1.090529824017364","12.06235083277755","232.4353261379962","149.4193965948069","134.3276173215219",".8654614998997181",null],[null,".1388051094030563","1.021926305151675","1.331920019574462","233.0376978696222","151.1289954056741","302.2169570043272",".9540578435956641",null],[null,".4373729909917133","1.05084186569276","8.655151091093721","212.5524276183789","170.8834509823633","238.7980882181768",".9149513950829675",null],[null,".04537419077129177","1.08477018506787","15.19252036985132","236.8709931378528","5.755570067364658","21.59031225199315",".8723634548165171",null],[null,".3698108414335891","1.012979889612255","2.006108164617317","250.4079765982613","104.2070915739646","288.6567688319684",".9667247524562587",null],[null,".01334811761520107","1.054082837550504","11.09291779839309","251.6057798433361","49.53964700960078","270.5143594491064",".9107348604572464",null],[null,".316589691192628","1.067575228197526","13.93436627655786","85.15534063943161","279.9366951137048","205.1822581919921",".893524246580949",null],[null,".2058505370846553","1.022511333165174","1.804754182217802","245.3807947270131","262.2349465133781","140.6964757131848",".9532391670151565",null],[null,".2539063350097351","1.058933516553474","1.910307235196856","173.7880221873709","341.5613092835528","10.78550063747939",".9044842987115785",null],[null,".05758784621315124","1.091129524169658","2.126185917769666","178.2998909673728","142.8174787102809","150.6470147948569",".8647480932044792",null],[null,".2992608106829971",".9921072420255281","2.97771142471399","197.4104954209789","301.1621062330901","241.3242860402947",".9973926055700022",null],[null,".3071990749104332",".9214805104634369","1.973947718095798","96.60738625173259","35.42727407990554","161.7238922008323","1.114229987580788",null],[null,".2011913609059418","1.018555957945388","32.24090208673552","131.2356704973981","303.1359067076178","299.4495385639106",".9587971483173165",null],[null,".3100254689451329","1.017183532943569","15.11224274363484","88.53886262354028","289.8079800573921","345.5927788674639",".9607382743200322",null],[null,".4123056293467793",".9628593367023879","31.96928553311172","79.5357082421565","56.57217941151016","74.76282984768063","1.043181327626096",null],[null,".2869924617374893","1.047347429014635","6.974160916222625","258.3093187697955","263.2292583202145","37.7989203963116",".9195342655982257",null],[null,".1786499214580061",".9481114103969798","4.303193042882236","97.32746626181813","26.90284253326536","76.28629012144808","1.067615852945811",null],[null,".02265907503129514","1.076626355482373","6.327644243081126","264.814230530078","70.36196260171528","178.3919316401875",".8822802618070659",null],[null,".1542686492000603",".9051403966595665","49.99091351090409","94.08702614393945","351.7458059147369","301.2587181806195","1.144537830152616",null],[null,".1098159599924628",".9471156304864204","8.229440158173951","134.3224057370067","313.4763618913555","139.654219395711","1.069300002856956",null],[null,".3272902700296272",".9124426052897772","25.11402947070374","270.5472832722531","132.2899159508251","352.7120889517364","1.130825882379182",null],[null,".4162964879583425","1.09507183296997","5.010876760289369","141.9423080559134","20.98951107416489","244.93682522589",".8600825993448002",null],[null,".1782796978511882",".9722580618954915","27.95117786717375","288.0318164831468","155.4841585354852","53.67154113768711","1.028091442967901",null],[null,".193994475814553",".9707123868101527","9.315958862943273","244.8093483039069","266.3729117861761","317.4293053893811","1.030547980711392",null],[null,".1598412094179762",".9256624826891811","11.66656667827431","283.0418088839691","145.6732910004158","245.4542646423752","1.106687694218303",null],[null,".1594549442454593","1.058615136806427","18.55788515261325","107.034346941105","279.7854047315318","193.9008127988681",".9048923664638574",null],[null,".1391920379739771","1.030286472856143","25.49425230715534","111.3997630861363","345.3921510557057","196.580156457626",".9424690066170954",null],[null,".1818357008890817",".9560224152785618","22.92920297676794","133.241374799116","331.7576442763762","71.45169311842503","1.054391658182404",null],[null,".2447888039268408","1.032623539426111","11.83981533196461","132.4992190107747","283.1143583996869","254.3989453441791",".9392712786943583",null],[null,".07501252718706998","1.030967216752649","18.04673504917218","312.6243549216538","103.8923121212359","236.553485596871",".9415356974460708",null],[null,".1097655901574816","1.026168621344523","4.439651831923233","135.3943400458612","86.36560473881892","65.55906681008872",".9481476613927412",null],[null,".3699350542122666","1.048004518162133","17.29140837407462","315.707918277822","118.8201238650061","200.0432584512191",".9186695919395981",null],[null,".3202773336860397","1.069787829830261","9.514449689156972","317.5782273164243","260.5811852484902","275.5317132322422",".890753616900354",null],[null,".08089811478003889",".9832906072138153","1.223216251903281","302.6206634964767","227.3918828184975","260.6499409432362","1.01083725089242",null],[null,".04195118269497131",".9901969993756089","4.429528411308912","313.4113247758656","210.38055543","238.700272246644","1.000280183222453",null],[null,".08407705396775991",".9634978252856845",".8282893789180742","144.6267657489464","330.0901818414467","41.58389943644193","1.042144559829151",null],[null,".2189265792319754","1.066658661501577","4.080044734935452","142.595715207673","271.3792471339738","290.1751948273594",".8946761855836911",null],[null,".07477715644585069","1.027582340798201","2.275761440037675","78.12227721415624","5.022279023548782","221.234430597117",".9461916814067958",null],[null,".1417088962800334",".9794860016848488","25.62122978343206","150.9344481569564","291.5075117284803","27.28449110872713","1.016732540601392",null],[null,".3256296447063979","1.033661887832765","16.76613538028028","336.3956930329002","254.919636943289","6.699193356540636",".9378563394217692",null],[null,".1414581986972361","1.075406601773731",".6679133301470348","352.3246460589402","277.1875987740742","232.0656544106058",".8837817446629441",null],[null,".2778951381189021",".9157605841794053","8.153145122239639","339.6998651228124","177.5067076600005","184.3432889471254","1.124685649100645",null],[null,".3397991329569809","1.023591336791885","9.637505854253863","344.1532054254408","110.9385426222022","251.9370201466439",".9517309037374415",null],[null,".2732345295996196",".9588837795180036",".4323625804924641","302.4376680556899","283.975503711755","272.1208024226679","1.049675632938351",null],[null,".2520656229131194",".955795718836341","7.922615381070364","171.7926520679808","30.38585417860288","319.4924831959947","1.054766802691047",null],[null,".1120572334267769","1.063699383092338","5.40043020442088","337.3430126546666","101.6235220996749","123.296390723984",".8984123490401962",null],[null,".2317268706315292",".9914284856545897","2.685252129926039","347.7573713220071","251.9961006727613","146.2074933548072",".9984170401898886",null],[null,".08339344767649125","1.017749108021761","24.01710042188292","350.8085301803617","106.2777539504293","240.2188899251427",".9599375453523551",null],[null,".228927889691007",".986432353905911","2.967278190684937","345.5011740129063","122.1404047127134","344.3493285872768","1.006011885211527",null],[null,".07069479408586572","1.086795629840855","27.03008364467724","354.9819919526832","123.1939833034459","17.50793872567776",".8699258753175456",null],[null,".276148514032436",".9656113344136207","30.6312506925972","349.5121596992479","148.9130702194221","232.9731503190831","1.038724897675121",null],[null,".1471443372981553","1.016786920604057","13.34555830982623","2.7018056268611","136.7421078332486","204.3354790521942",".961300453772916",null],[null,".4334796697146137","1.096686763914739","18.05947434392375","177.2493108796547","70.21089426749005","162.3562205400193",".8581835212444154",null],[null,".111292604102948",".9302121943527007","3.675339937861962","1.778823276604585","138.189726030404","142.7415077663776","1.098578337816395",null],[null,".2055016841825332",".9245556397838665","26.82515903204245","187.2066021575387","303.3945486558729","185.8195543134851","1.108675615615327",null],[null,".1525593846470344","1.012627813918902","6.19478988322767","355.9443472631723","134.808144448582","228.3769684027413",".9672289700928515",null],[null,".1848484029913545","1.058006059533408","5.541400817522253","185.5183877818919","94.3402419896872","265.0790201127954",".9056738771428587",null],[null,".144107478095397","1.097973942452027","9.697029564684843","12.23766044112565","279.0245835143391","154.2375840302448",".8566748630377311",null],[null,".1727791751450972",".9780291156942288","5.286647207626275","6.36233363715563","120.3171069954021","348.2890599643005","1.019005195159948",null],[null,".3487475200140973",".951597330597439","10.28038688426544","11.68720558593756","138.4837585578207","74.3577796669601","1.061754844554501",null],[null,".159754449615448","1.081085793456595","19.68060126259029","17.33360719964229","77.11637611675495","67.5900540120119",".8768268362636075",null],[null,".2128664191479224",".9705137779529078","19.37625085588794","199.4980587161113","298.5480665156568","7.149016743176821","1.03086433855059",null],[null,".03894616804039577","1.040846332218618","14.57270203914274","19.31673673207053","78.77676324876022","164.1849257388539",".9281627815907779",null],[null,".3681439583099887",".9047050438903382","7.600153143325293","196.4834983125235","47.54348352287233","97.66298999485745","1.145364073451042",null],[null,".511279654058973",".929649684884161","18.95534792069038","26.07412195157479","132.9824297708001","283.8015859280347","1.099575575048878",null],[null,".08364871702962783","1.064143179504519",".7095996310923984","21.42645391275828","70.45041102760237","107.6687215056082",".8978503890356891",null],[null,".3336752454336321",".9919556007025173",".2303095352532326","123.2904935404479","23.08204176886391","300.9579337969603",".9976213230362342",null],[null,".01215851060693129","1.021439225683274","5.444029254249613","23.15454280598416","301.9010978679338","350.0587780512202",".9547403473171516",null],[null,".2470645914858485",".9354954027450162","22.8217155119525","209.327463458511","8.499797022587522","28.31828843654152","1.089285161171042",null],[null,".01562768799285492","1.067636449956166","15.96348388646417","220.9811661635776","160.9895263572746","160.2193761329493",".8934473912878241",null],[null,".4194295993067202","1.06780581897801","7.606810432195695","38.78592543878715","252.3837482414899","202.4504454349241",".8932348297329669",null],[null,".2354243656301703","1.035955541662738","4.407333211578024","220.0537015511912","83.76519134027888","302.4016827566502",".9347433776344061",null],[null,".02970176258746879","1.085410015460334","11.05579461838176","36.17769889772366","262.2498252264859","190.477429258013",".87159220379602",null],[null,".2303340447722811",".9711917230248515","8.975232882034444","46.53567130568572","108.2847259773804","351.5748966642193","1.029785127198525",null],[null,".4197572020975895",".9116839436533409","24.62171027628211","34.88643101191091","207.7919800882515","61.64445117077297","1.13223770827824",null],[null,".5979243341685863","1.004521976703245","13.51338831385605","198.3781203812441","13.26045163181852","222.177813961678",".978959916577736",null],[null,".04477510898514606","1.047034609509145","6.200402736568929","226.5562538795756","123.3719313352544","245.6712883724962",".9199463862705357",null],[null,".1704138571033908","1.0246751263545","6.866079920473376","42.57331047346736","96.90114991190633","187.4955261463068",".9502213473918756",null],[null,".4082981802422198",".9125198019421188","12.27146819053654","227.895886404167","46.10033155733884","20.37299225105145","1.130682388299318",null],[null,".2809935790779148",".9586742559981126","14.12510320123247","226.384226601334","58.61245588348149","209.1709667391881","1.050019770295276",null],[null,".3235809885250737","1.034397510017367","9.221420484538324","221.7641162820316","290.5878367940091","163.4189192908296",".9368560683712969",null],[null,".08814964011449436",".9823655404955429","2.543635890337862","53.85695688331293","113.130096510875","282.9950785174543","1.01226540359562",null],[null,".06616906374143226","1.038536806825751","9.428508064558324","51.06777516083915","302.061273088927","267.3427856695458",".9312606113659873",null],[null,".1831583330191653",".9905154296985792","11.58554649649539","230.693418722592","71.05159307965266","91.38839586757003",".9997978677559082",null],[null,".3358248350442136","1.012202607066328","1.726583992294343","233.669234480905","74.82787172126719","354.8269076878233",".967838505533833",null],[null,".3586932887491907","1.096136044029163","6.273040604286646","242.7028835502407","84.47154456757704","103.2151753310791",".8588303543972233",null],[null,".0602776682942152","1.039626938868319","1.652579118761051","246.3783875975684","145.8857342881853","228.641574989599",".9297962434964289",null],[null,".1518201813158166","1.047405188190891","17.24544488373039","247.9363986176402","77.31503480047513","259.0562900373733",".9194582050486365",null],[null,".3457635926295712","1.080343979825875","2.547852335089725","247.8475679937777","289.6673237966265","13.98407249364709",".8777300954395616",null],[null,".05583678113919644","1.028099943440369","10.87375878206851","72.35581954430214","308.9200346075408","271.9672076384721",".9454772231429311",null],[null,".3018116146185617",".9970717803739453","19.7399133344589","78.12808265239916","249.7666713393064","30.96182613651931",".9899526822333518",null],[null,".2001131770278294","1.095085715636267","16.99176091075944","72.56356257161194","245.716704486166","144.2622187785114",".860066244184147",null],[null,".1250613036149794","1.031991742031602","4.256933453133266","260.3343849197153","101.5707474047998","272.1838874934531",".9401339599628817",null],[null,".1994251160020909","1.071328801447198","8.726651990903294","92.02347603772428","92.36226457650586","13.61549187754804",".8888324527344498",null],[null,".3061469488890521","1.09109540223245","3.336327745290295","4.17588590267709","196.0476904926524","324.0453171185828",".8647886585539007",null],[null,".158008536164934","1.083226476933098","19.5810109425728","278.283557727798","248.9663304611806","358.8272909688944",".8742289292976514",null],[null,".1517076106468857","1.08279634447571","2.749385583922007","278.7552058134287","255.3712903075688","353.4563877968843",".8747499020289919",null],[null,".1685046817503593",".9567605568390916","1.668319412202076","97.80744823660625","247.5564826806514","163.5524579136155","1.053171697504352",null],[null,".1101424304521028","1.029772601305501","4.412428188061848","282.0096284950091","270.5072138138883","115.8436252327113",".9431745532909018",null],[null,".09968511235134962",".9943812498376804","14.82021213883382","101.7141323741194","268.6537444326503","19.02121243034183",".9939732208174102",null],[null,".3495032512690687",".9779865705545298","42.57912171633274","272.613881881249","52.12532241383906","89.33902878507668","1.019071690229286",null],[null,".214662862298905",".9069483564623366","17.18052062541215","286.7564950892769","309.2227092475962","137.4284409592079","1.141117161082695",null],[null,".1093089369623106","1.024955970825792","7.162312857592318","287.7256399339811","273.6572277350958","128.6930619544277",".9498308240844722",null],[null,".2819534462947665",".9834964883758462",".3484698326587825","301.855749527828","278.255213855544","251.0510470743492","1.01051986065478",null],[null,".09703117528936257",".9213582895513076","6.69482833957172","287.2065690409653","35.62793902381041","328.1414045662893","1.114451703806319",null],[null,".1831600603075093","1.062503302840224","21.25073629343002","113.1740348202384","259.4032322367486","176.1688327717145",".8999298157994957",null],[null,".08009140597696088","1.075942368381136","32.72304677732082","104.9591337285225","285.1408551117794","71.72667621862003",".8831217068076315",null],[null,".3632197925872831",".9673919858295715","2.223868615108612","85.16855312209567","143.5471094897056","304.0604108218544","1.035858289933931",null],[null,".3506065045727099","1.045214936572203","21.32621339385091","301.730637984185","46.67372960519646","84.57217190498987",".9223498104824989",null],[null,".2526754436412698","1.099962149371736","37.02878618084701","114.0556683322474","249.539671094686","82.80471145444031",".8543532236134747",null],[null,".4482932645588369","1.0685650208905","13.57680093102149","94.75660927573203","168.6146320683684","328.7134155982645",".8922830507910456",null],[null,".3085410148606436",".945183423206445","5.382266471490369","53.86671824674636","278.8152740830566","216.8002723097395","1.072580580085928",null],[null,".1767038187347098",".9777194997642429","2.544599646145394","96.5060596956686","163.8507266370167","214.3048719855045","1.01948926837942",null],[null,".512502181573584",".9480641311148283","4.766653844086334","263.4823114529355","82.57603281186825","172.9933008877358","1.067695715803366",null],[null,".2717403167276462","1.087111672715944","6.736819321740345","305.0917349972109","92.22334783857185","75.50499674436908",".8695465482916823",null],[null,".3024382433077822","1.026939647741431","22.34840423919756","80.63093392572887","196.874655513014","66.86798873615007",".9470800577969304",null],[null,".20572762182139","1.065848514471869","22.8192305377706","122.4754104171795","274.8535597098198","137.2257395825884",".8956964388726788",null],[null,".4923785956171304","1.082204340471218","19.94240825027917","306.7519187466009","65.72367130217927","103.2584621287299",".8754677788297182",null],[null,".2490951129153325",".9277516616265485","26.08886293020888","128.1154074699965","181.5069466017066","320.1321326287325","1.102951619243043",null],[null,".4416250834655613",".9302683037492068","17.97253480386351","312.8933301194336","34.37658361390111","91.1612043687684","1.09847894772195",null],[null,".4132671693172114","1.033971755704079","20.87022550994772","131.9000744120946","234.7102345132713","232.4740382275128",".9374347760110463",null],[null,".01643273048902286","1.071700849918484","10.37755446781255","133.8419363221262","11.66938351468582","36.83644944720581",".8883696462711483",null],[null,".2845512350875797","1.067214770292855","4.687937481096279","312.710317772443","81.78051868173984","133.4757260092444",".8939769742057581",null],[null,".2239199173075732",".9141076641457567","8.051999456413951","320.7855385142427","304.3891063813414","80.16677383175737","1.12773756898537",null],[null,".2002832200594102",".9288112877065106","8.438013084436857","132.8333275269095","248.9852960953539","223.5484540758943","1.101064718874502",null],[null,".248772792085152","1.07278605147667","10.36505663004951","336.4157637476292","91.05074236870874","88.34073620934639",".8870220109095597",null],[null,".136146691162201",".9588016322103143","30.09719382551746","343.7667711203258","354.1596228989619","180.372970600947","1.049810535515501",null],[null,".1662066751786087",".9369257437654546","10.02660927673571","338.7073506721316","47.94311647248445","192.7007000083392","1.086791706701605",null],[null,".406474054941471",".9346637229973273","40.90955750007614","157.3008094247937","234.7149218448895","82.66784063243068","1.090739381368549",null],[null,".1718069910085372","1.040579476787832",".8399859294361762","299.5560523850762","321.5169887722968","28.27887993703123",".9285198439249203",null],[null,".1177057954944313","1.013230399058398","1.683784166435865","351.8931408887883","266.8989880245691","109.4227549939777",".9663662574167022",null],[null,".4606503888289467","1.06910266377527","13.25504763379304","161.4117701104324","243.3250875264602","61.06564793733354",".8916100527758982",null],[null,".2376535850035947","1.020999547770185","15.38489322832165","157.8717055538562","263.2147369332315","236.8323848864997",".9553571303028571",null],[null,".4394355420610752",".944197974572904","11.02491231299799","337.742157470356","46.71955585048354","88.15311367337816","1.07426017827699",null],[null,".5325003069393299",".9939701665766445","9.346592400752987","130.2620472546644","255.5562787251444","316.7372126047578",".9945899113549898",null],[null,".1872681305564512",".9082606170116787","10.899595292251","158.1072496114631","226.2134868549832","300.2176345137354","1.138645014879977",null],[null,".02351742801150723","1.063339956947972","22.419601933682","157.6508710198908","310.0740495737161","54.00081551001406",".8988679044419056",null],[null,".3286105705485379",".9013568067476333","5.341538023821008","341.4890329727182","53.89153983511126","297.9459560265901","1.151751959507403",null],[null,".09202476247350465",".9438930286069086","17.47787344327143","350.1894882620796","351.7495574175218","229.5401704045515","1.074780816350455",null],[null,".3463598885160649",".9612766637979865","7.210546380497491","351.6870184608687","293.4128585401587","264.961645850176","1.045758672315324",null],[null,".3873184459379407","1.061219269808795","13.09767350946006","166.7427393102978","257.8685468502738","106.243360103513",".9015636285907409",null],[null,".26140651884807","1.055231272162786","1.449162319347495","350.6780239646004","284.363921906647","287.8974120855418",".9092485017286365",null],[null,".3108373194669585","1.06319220978331","7.290136516150995","171.9243391915977","264.948374307469","97.7746242267593",".8990552785524561",null],[null,".2444398664061365",".9511138881276804","8.52669099282785","167.8159758658122","254.0537289572273","96.0317743355902","1.062564467794108",null],[null,".3614809202370468",".9237660840645288","11.28563651547356","188.3044997910104","237.4935037245","173.4948657422494","1.11009731999619",null],[null,".2690280037683725",".9739142586713269","27.98707741443898","358.8406088390232","75.36055118512206","359.7037740043762","1.025470065954295",null],[null,".1818624397788077",".9895525276371852","3.362914740492063","189.9878578624942","112.394295156928","136.5828764544881","1.001257529913245",null],[null,".1115703630834682","1.069322231350541","7.794806156359878","189.5308634036339","287.4459585475025","68.38232863942217",".8913354508784371",null],[null,".02227021396393854","1.052905858752657","3.744732852581055","10.9452999624012","250.6177368647903","341.9266151589123",".9122623689904349",null],[null,".1762448109243511",".9008040561760974","2.823595596858403","3.022212015582388","350.3622660258442","18.40396775449672","1.152812227612083",null],[null,".1674956351363751",".9804355028313597","8.063710371370586","11.08306226033922","65.01743790337012","349.1403738099877","1.015255918824348",null],[null,".1920497572757018","1.010471409226651","2.258960843155667","9.03657502369415","291.318309236961","79.09538076418895",".9703268055873971",null],[null,".04840749721710873",".9898723156612403","1.235558304497884","4.149109404661468","326.1895595605305","88.23318087076011","1.000772369907574",null],[null,".07097915844295075","1.004604761019188","6.746936455898554","187.2546864691841","106.684499153556","91.65281254739401",".97883891248651",null],[null,".1146572997560759",".9345125208135666","13.29744321137843","194.6112346459448","221.5250439706118","174.9565906913404","1.091004111120986",null],[null,".3321453329210985",".9418425781196925","6.262608230091389","193.4237182106835","233.5033423549932","112.7423670727424","1.078292524001132",null],[null,".2529689923322457","1.029070265930995","10.61967061668299","26.47977455084148","354.2921097577649","283.5481253636757",".9441402859832371",null],[null,".1377123790716828",".9504176189862319","6.358165166377821","11.62337504954969","53.89654344069959","106.7568985202366","1.063732322298957",null],[null,".1678934119790369",".986412904827324","6.977642908511552","196.1087146798151","252.4869054156246","319.8117051003844","1.006041638624978",null],[null,".1266026150789188",".9209061035105894","3.362163808435401","197.2653303369227","144.3132062509873","317.1910087412255","1.115272636621293",null],[null,".1488297126402934",".9411866781661608","4.63406575624555","25.08767905812469","48.76922694163633","129.3134334029735","1.079419891032063",null],[null,".5362577114882188","1.026594212080739","23.36056098285312","176.1381545918191","156.72496603","27.54322997007846",".9475581182724913",null],[null,".6131575834567341","1.012770198615657","10.67326708114598","180.6489364767453","216.5718030211113","291.9515358153129",".9670250041340902",null],[null,".1650206581319254",".9615644327466448","7.383921278212199","38.59759456759048","319.511102643497","158.1041899864621","1.04528925859715",null],[null,".2139819302561212","1.095899545126393","20.34406024247949","210.0897577948104","281.2550514778652","339.1567827189991",".8591083772257032",null],[null,".009737400020079575",".9857038438105729","5.762837812127334","201.5186673283885","195.2981508437541","25.35927729811949","1.007127370178426",null],[null,".215403906203228",".9949778018727174","19.5524619209917","36.15576066857546","289.3155572086433","99.55496327244941",".9930794302339978",null],[null,".3315832093303792",".9609853073994368","31.33160537425625","335.9003292184612","93.48738184832766","89.9058473587685","1.046234295987072",null],[null,".6085634484054256","1.038171294981697","3.250048457976341","216.9159638007637","127.7369186689589","5.769643075502621",".9317524619066534",null],[null,".08436629712192487",".9615000257364918","10.96127480344304","217.1223318969642","175.9910723781478","114.2988286860045","1.045394289925569",null],[null,".100550879920207","1.092938175781353","16.12218270980201","43.08852197601922","107.2778660578631","340.5860066304012",".8626024355228585",null],[null,".3996904002112255","1.008202863775781","17.00908978987227","221.5853814685178","246.3399060578504","209.5729169219807",".9736036286106541",null],[null,".5706566851160504","1.072979043842134","8.915537778464314","221.3798997630799","233.7247555760971","61.020340696917",".886782704125049",null],[null,".2232070633338888","1.01829163646879","3.626357131040856","230.3440362251928","103.6210604085731","25.37566268582648",".9591704899723716",null],[null,".2724420138896858","1.089030695998201",".9836689720574074","226.1974193606662","268.3148657585083","346.1192533168029",".8672491684981923",null],[null,".4580325386434607",".9556619564125343","20.27203130632455","223.8193370692239","234.7578955251216","76.8440169309176","1.054988261390419",null],[null,".1927135060106544","1.072285366028813","2.573425347129558","190.4217064788064","309.2003782463707","30.6489540729863",".8876433532307667",null],[null,".3235328809712951","1.036890805573746","10.88812848690001","49.85960815075026","335.9132675397082","269.3927365404355",".9334789707518367",null],[null,".2918280963882937",".9896764540553429",".8488249758426504","57.25999904607192","288.1623663078606","104.3606848381862","1.001069470915209",null],[null,".2384927879686713","1.05548835308562","4.458531059812305","233.4964268885799","97.73992901795164","291.0835304331217",".9089163291222323",null],[null,".2221071936527255",".9360964365718261","8.462460165548109","240.0375073952696","235.0968594261784","91.69461201987849","1.088236243394995",null],[null,".1301483669579779","1.081236309506541","2.533009606668085","72.81895561858265","90.35385954955763","353.027750437677",".8766437515148024",null],[null,".2205137724402069","1.019559861963086","19.66517024428774","68.38210230607395","281.1511120549217","6.311711482949098",".9573813854479424",null],[null,".02651980221628994","1.057146855184408","3.143767237826777","61.66598628590334","252.3893013433893","279.5162010153784",".9067782417197491",null],[null,".08935390083862536","1.035394500482172","4.299290253108402","92.06602962552238","19.53306030793723","167.6284767899874",".9355032337524292",null],[null,".3935818820553972","1.071268319281048","20.9854640403948","237.7605092596368","146.209978023692","190.6564437686974",".8889077269723202",null],[null,".4616398126544807",".9451605416982776","9.119723531107054","282.739879899133","112.7278041747178","217.1940286293076","1.072619529677724",null],[null,".2768915457603885","1.036221557147368","2.689138578389898","71.05446757580555","71.13305606842512","111.5474599230278",".9343834542401516",null],[null,".3540349622716933","1.086603060380227","16.84172670831888","248.7312837931235","118.9946977804687","191.3487452609958",".8701571399594948",null],[null,".1491938740471021","1.096122224301901","4.92497207503887","81.16335604460411","47.49864085752085","351.2040189178476",".858846596434483",null],[null,".1179172592688896",".9896714322546303","5.459835944589947","74.01103470327185","63.72384592901332","264.525598082163","1.001077090380007",null],[null,".1813639129829122","1.033143602259003","4.585537731458174","243.7883782704321","254.9728177618589","135.4938748482538",".9385621537433356",null],[null,".1964658037236845","1.080165976693206","12.08573099865954","77.54538190578047","262.6735643897889","217.2191584092221",".8779470692378822",null],[null,".3200908093488978","1.057567807839396","33.25857791326085","83.93780172302262","291.3913323465787","285.7735285328445",".9062368966861053",null],[null,".3198502192671768","1.07583557738612","12.43998347414101","266.1657085687967","118.4570353332321","202.8325545226583",".8832532024374364",null],[null,".1924759445496287",".9825756416216551","25.38950915746175","257.2667036184314","242.7892399998647","278.0888860632421","1.011940746557429",null],[null,".2371645864037842","1.093139874621456","22.35311896913355","254.4154105517494","274.1580333040158","59.7006159447967",".8623637041095757",null],[null,".4553619253207014",".9266113417826156","12.13562232751174","96.12467095853857","348.1676016698013","203.1761181998376","1.104988240904015",null],[null,".1277055091866244",".9920329758942803","6.806539852858583","310.4853054906002","144.3320185455337","312.7961360145721",".9975046087164414",null],[null,".1361642907586512",".9461972231564294","18.77003568173539","112.7548830102933","327.0215730228107","121.7329841063518","1.070857222431008",null],[null,".08102148410740166","1.036704124482097","8.320172288905482","103.2199019200746","294.3481468534209","257.7745362602006",".9337311218437832",null],[null,".2674376064374225",".92379904868772","22.21175831497857","127.2504650215703","335.0259437874521","159.4383548983678","1.11003790185738",null],[null,".308254762421539",".9501795377331339","38.78597832264592","282.9964318549906","231.574859473689","96.60356925043575","1.0641321476678",null],[null,".3228964245449397",".9551069813658428","3.156004290313706","136.0014700140621","274.2429460533015","149.288610069753","1.055907913135328",null],[null,".1161322274862798",".9172121059926172",".458020707767416","112.3197451620229","355.0485990597688","180.5390534586318","1.12201692117529",null],[null,".489696477432721",".9583909708724014","13.24721046524608","303.0667513338279","219.523531140597","302.231344067644","1.05048535840805",null],[null,".13102868607248","1.063389558919439","28.19763002014541","294.0274760950142","280.6155644564798","349.8171392930872",".8988050134231403",null],[null,".1267184550336041",".9896615621812815","5.708244741053852","121.8915911524616","299.3586357629595","6.069034245015749","1.001092066301053",null],[null,".08289967584515144","1.093452810898543","15.92265783301415","272.9715279897243","112.3906547629134","130.0499000588088",".8619935295918996",null],[null,".2976041502984077",".99122504188591","8.473118409221916","311.890504310549","215.1971920259235","217.2264011727279",".9987244357945931",null],[null,".3800269245680428",".9597839848254298","18.28084568183663","236.8314191951518","297.6607246790292","294.2657521461168","1.048199203883539",null],[null,".3144855692309452",".9469084428730934","16.06994646975659","266.4499372312046","182.0481733824905","110.8573329395039","1.069650973168081",null],[null,".3618760600391161","1.082630346372302","12.80863703692261","306.1764785119694","256.3831977315904","289.1031747202589",".8749510958960268",null],[null,".1947413711556958",".9672204854420648","3.963515482698646","120.5621171629712","330.765406904368","44.33436394520382","1.036133808249766",null],[null,".4079853469155345",".9818462424661768",".7153394624913411","264.1166377114579","278.0408674706251","213.3562459735191","1.01306858983813",null],[null,".05743455442653887","1.057911690365153","6.891563682769479","303.6320911201502","109.3063310994648","186.7338750572152",".905795063434558",null],[null,".06102481486839906","1.035937794247249","1.119679623737524","328.2391907353285","250.399457813212","63.37770025752521",".9347673984060798",null],[null,".3303279707030159","1.063379725804075","8.690627106329488","152.2268675103284","38.93981218631657","358.9889154162467",".8988174803814676",null],[null,".5174842402599847",".9729149649995816","17.99217690327434","167.2816217902731","358.4950758052347","259.374210142016","1.027050382125424",null],[null,".2176869189253276","1.074523638232134","2.112359209934915","234.8283901527453","186.3385010355466","161.7058208083748",".8848713074943181",null],[null,".3939796816058894",".9696868426844693","46.2805831101934","146.2127865866881","52.46019574034489","231.6009533953977","1.032183279505895",null],[null,".3899051919486043","1.054369765637185","9.834345971863048","323.5463977257047","116.3040855646003","209.2173265301261",".9103631251695861",null],[null,".05009474016242182","1.075139993314858","27.59829543015435","149.152088910431","44.6083729727094","131.9837721293208",".8841104994721085",null],[null,".1128679458057164",".9657914240735065","6.531577318324143","291.6381160026116","269.1213939020607","270.9117416645336","1.038434377035935",null],[null,".0442999347998645","1.091753767475851","21.46729655864024","329.2273469418046","70.72105636192711","297.1724270568305",".8640065303371298",null],[null,".1902073653547428","1.0301194394845","9.076062843576365","338.112309824132","249.5395928376328","54.31466053631542",".9426982472511061",null],[null,".5593787465970963","1.022825750992783","5.611796337689902","185.1244800135693","24.00207099690007","70.92176340023448",".9527996605521298",null],[null,".4202880348454238",".9024769462084583","26.71180454579664","333.1102566240318","228.2061819516005","93.58830584204563","1.149608321789014",null],[null,".2128690783872177",".9180358762748881","4.552525889851771","328.0196911704975","210.6572972611727","91.96326459986521","1.12050705073698",null],[null,".5623482889169527","1.028145590795746","3.229776030095489","332.4494166860456","136.8965720225522","298.80787472503",".945414258245923",null],[null,".1383190319166445",".9236016450221814","25.20387334889805","159.3590516540899","5.793018667600301","172.0021516409138","1.11039379759729",null],[null,".07396193776272465",".9885342503090911","7.076048985049703","342.4403491893368","165.0013031234962","267.1886458106068","1.002805003390526",null],[null,".3073309080449481",".9812708082148097","21.45036899413953","162.5933732368574","64.05005617980001","82.10559309232127","1.013959842004663",null],[null,".4679230935357954",".9544667386449531","17.64923469273542","166.8737467127592","16.25825219811862","133.6957080571414","1.056970523312302",null],[null,".1411837203950434","1.014233237303796","7.89450244283483","159.9410977012452","78.87271079333124","91.70610298817535",".964933348182983",null],[null,".3754286900556983","1.023403702099364","23.33104529658919","358.9620664700656","135.9609838824792","229.6061003778159",".9519926566314569",null],[null,".1974272855266994","1.056981369848771","11.05718036558374","353.5897972035015","272.6156090016974","309.3577502524222",".9069912034321074",null],[null,".3654907488216986","1.069189810310948","12.47086294019873","348.123673935703","120.3786644741261","289.4945433366779",".8915010462017686",null],[null,".3567614382486709","1.027827242416028","2.564498539295187","348.7030929091372","253.4644301649292","26.27693188252057",".9458535262283376",null],[null,".2352330965065566",".9767114536962467","8.768707570057396","177.6745890365798","301.2724700974989","355.6509631215169","1.021067969946471",null],[null,".07299179172966677","1.088779290168857","15.1178569413089","355.3393051543461","193.9000765581025","333.5138619087581",".8675495655816164",null],[null,".1931110537797548","1.091471783306294","1.301994700974808","188.1785908678425","81.76826517879492","227.2159632676297",".8643413789810709",null],[null,".1758577761227995","1.029449593509278","22.61375816262925","350.04707008","239.5186984124855","107.8336816135212",".9436184943547329",null],[null,".08840721524739917","1.012732721189191","7.747483947829444","352.8791070197137","260.4093701520269","86.83585014399671",".967078683564528",null],[null,".5503367814028725",".9795264372522284","15.0817206386651","174.6471435418268","51.02466223954758","68.22211352692045","1.016669584059868",null],[null,".2197116108389445","1.014711856372627","13.13924877767709","182.5625043249937","280.919958922973","266.7910829262453",".9642507193650698",null],[null,".2640232912247015","1.010915899658518","1.647523976371116","177.9341162627989","75.86814565232585","70.75276591628504",".9696869102690496",null],[null,".2935502926319216","1.055265612306915","4.981722912842071","1.132433915319606","253.764765549204","315.6124487258534",".9092041193402524",null],[null,".6539740444803607",".9707049063862521","12.08398811608349","210.0510345892937","17.49888429655715","166.4412498423664","1.030559893112184",null],[null,".14296808909693","1.090716788058227","5.12885957092982","182.8812670922129","108.1908400309598","214.9115766933498",".8652389812129105",null],[null,".3937935413015585","1.078922931759235","9.743014169853566","26.20522006314132","215.2559918705436","267.7327406117615",".8794647521488683",null],[null,".4569393185960716","1.086221220278978","19.75713189690805","184.8385593268355","294.0804981863088","298.8687139054582",".870616010697543",null],[null,".2659687553379947","1.003762380633439","7.195858475766371","193.3517448819435","285.2646117026987","287.4549138287143",".9800713670325871",null],[null,".2758715953019072",".9652890659947665","17.80520324327598","196.3725345382039","332.4718553968618","330.2984369804797","1.039245119303766",null],[null,".5298159945584695","1.042344089740426","28.7512222585685","2.596288366177645","130.1181039830088","293.342271925856",".9261629669983419",null],[null,".07554150368524699","1.040948664478478","12.39368893641196","191.0652884296207","45.69371544472955","123.6411831134894",".9280259179841827",null],[null,".09524627027316192","1.056140581171689","27.24484637853228","4.890989545313231","65.62365938334786","179.9018535318915",".9080744962731104",null],[null,".3842427662814318","1.087389639953475","1.240616040612554","150.3685135454407","326.6808995580571","298.2636124526706",".869213148936716",null],[null,".07879710394410325","1.096063612347175","16.7558692148053","17.36604060225495","304.2668544278098","182.8469532295916",".8589154875328893",null],[null,".2093588347320247",".9438150807760619","9.501333852868306","28.33966080459691","127.0505507647371","49.72212355864277","1.074913965149452",null],[null,".07967681708137389","1.042637544036461","2.41359972156395","171.3631846484018","300.2720695768664","170.559692443621",".9257719863839632",null],[null,".163389433415518","1.050270538627683","17.01064535035139","194.2435885806322","263.450111724771","176.3768216584416",".9156980706668724",null],[null,".4059539123737196","1.04067310899868","43.93642601772504","210.8033557033015","317.0359764023284","150.584222813646",".9283945345321646",null],[null,".2001629552510267","1.020797057017636","1.504397963998146","214.8177561901702","264.6688828069707","232.7036822857689",".9556414090085709",null],[null,".1126032033188445","1.097646629869563","9.049829503084863","199.6715081557548","243.9069613058705","77.26214666420807",".8570580756626924",null],[null,".352964404459196","1.008642531408101","10.78705255441146","17.2785727267956","109.9481839569687","275.1419825660951",".9729671067447828",null],[null,".2547421039025146","1.084546499900816","2.448242889291963","356.7987587016968","288.7808195160188","71.28493922453377",".8726333530985373",null],[null,".02562467109028418","1.098383884559601","2.770208430429742","218.911194006337","336.3342520602322","312.337183887938",".8561953116705145",null],[null,".2544682494985839",".9257981163593385","11.23089511097904","208.9232913276721","41.91052162395608","329.8790479367673","1.106444500891654",null],[null,".2309950200254362","1.02917437763409","1.134881434522724","23.71601811120696","265.1016310430182","352.6372532947534",".9439970251773253",null],[null,".242640293632862",".9692273173229554","14.06533416021396","205.8666746624379","67.77404993878588","168.1417719569343","1.032917427112428",null],[null,".2032211392491831",".9106126270402941","23.72383304882194","21.50554098118165","208.3369288848085","49.25734102166206","1.134236376631338",null],[null,".3017618830197323","1.038485199060705","1.053636010968072","303.1665534735822","193.850303504038","185.1148088795654",".9313300310495198",null],[null,".2031118451282337",".9834533300091162","32.15009081147301","24.49510237968067","119.6227927974573","266.2511039340519","1.010586380639295",null],[null,".09624233372487845","1.03736861579204",".9201485812842558","27.65775403488159","286.5001479175117","322.9730594942112",".9328341067849077",null],[null,".1768704455429707","1.056110820264392","1.187183354365378","347.4363309151879","137.9515634408421","138.366406667897",".908112880471207",null],[null,".1404995226784083",".9163652855946083","20.41197234556139","32.16743728175042","171.9015399257034","72.81932445040184","1.123572577483614",null],[null,".2645713483657299","1.048032486135725","4.222185357604181","30.88238596188044","95.90798962076774","166.7755720471437",".9186328185249211",null],[null,".5255647148582895",".9181625913720119","3.777814318206666","41.02202101462229","123.9464567338312","163.4258319318309","1.120275097929012",null],[null,".1550396510953813",".9860793724029111","12.35706489565053","33.16737302567178","104.7491364216207","300.8329975472151","1.006552108504827",null],[null,".1253739201533758",".9217893506467865","5.533779036944018","35.67372218738837","170.6808521968714","50.1815854505351","1.113670060031119",null],[null,".2675051786230134","1.015104585945388","8.607412773259666","212.9489071160086","77.70602862831458","22.59628740011916",".9636911910930497",null],[null,".511940021605663",".9340043349114111","15.81005904320955","220.2524544114491","49.59221172772546","251.6538379925464","1.09189464497094",null],[null,".3219264559095113",".980383490863404","3.14624339619688","53.07598324679322","113.2917874984618","269.3916501630849","1.015336712963815",null],[null,".2463671231442334","1.078294761785935","12.14946386301962","221.1890471692556","265.5742348246385","94.19056096654526",".8802333738014582",null],[null,".497537382333588","1.073919024801296","5.980010246346747","39.86935435109123","114.7327068901747","107.1243047467398",".8856186827981061",null],[null,".2960085221538019",".9392562325075574",".3159041874703653","252.4356305235953","29.11063881187799","246.4882498028606","1.082749384659494",null],[null,".3515944185661712","1.062087956426735","2.874349136147662","217.9974152059905","79.93323749848452","250.4828898342179",".9004577652411859",null],[null,".2148385965534696","1.035210244161022","9.257499814322369","228.7139657106857","293.0956895263918","155.8483612523105",".9357530091798791",null],[null,".1687441335490179",".9385089077455847","9.329169902757863","32.27578725669611","150.7840544882175","31.38930687980112","1.08404291498285",null],[null,".6373277991269226","1.04011611984703","5.031933384276535","232.2227564278075","302.3466671378883","183.1447325214093",".929140376601904",null],[null,".4391487851764801","1.097414393452233","28.05383473842184","227.5862524848598","300.1352020639233","29.51322129367044",".8573301478553487",null],[null,".1318311188960909","1.039822671255806","7.812209229971277","40.64379148771918","93.12092562951406","166.0304264237326",".9295337237240129",null],[null,".3962485549363129","1.075867801557677","20.56976545580309","222.361984078876","73.05068680177341","61.45100524746685",".883213520208844",null],[null,".06922641350327054","1.03439701689041","17.13451445050037","53.29874560973082","174.9606157616822","62.71754180965696",".9368567383109282",null],[null,".2524419752438217","1.083038297656297","15.92700778288638","43.49988441279002","106.2068258390672","64.35562438684195",".8744567867711888",null],[null,".106783336834688",".9682954499778244","26.81798661882928","222.53642288","319.7988448334821","229.7363122802428","1.034408873087443",null],[null,".4042014583439075","1.095053664567495","22.17602289668044","221.479527067842","301.7967950891285","41.06549165236525",".8601040043117175",null],[null,".2037712731054259","1.022221229102679",".3077029348761857","54.82230251167199","86.27540088679739","216.5182057757058",".953644986469398",null],[null,".1720949581672867","1.094924941942472","30.06185895881241","47.27549337387173","78.64427040253597","300.4104324123937",".8602556833398535",null],[null,".279030157417715",".9990285569344144","1.736705961557277","279.2861682227135","237.6898905440176","260.0847726717957",".9870456071544236",null],[null,".1731572269830705","1.050891900173905","2.56445562540196","220.0302211247082","97.5553111263069","279.044977995336",".914886052624702",null],[null,".1813926875970426","1.093208011631168","1.497948698022957","213.1897813784937","131.5283676452812","160.3500091148282",".8622830818018267",null],[null,".3305948523587437","1.029645414350406","5.010056671005661","240.6836328516717","293.8949505955513","172.0188814122575",".9433493171498581",null],[null,".1161403422671645",".9123996499764272","17.47173134586365","61.46528852881209","200.8929892940444","16.5875864896269","1.130905741383688",null],[null,".2891469783903641","1.051441677168298","42.66002725152325","240.8342723886252","69.28676097630205","271.1153213124177",".9141685840866908",null],[null,".4776258214551085","1.038850209965797","1.601058474140661","238.919885382172","57.69990589800384","71.46247060926248",".9308392253249368",null],[null,".08610124125181783","1.063012841969662","1.916413675502979","164.135162242561","188.6697328081415","228.9216933775988",".8992828417234755",null],[null,".48758282513645",".9305210167468347","9.839322169483056","289.8313842562584","272.7669032255067","65.20826323058239","1.098031487015928",null],[null,".3445349335202351","1.02690910712084","10.49455252107378","71.84354422378433","214.9305012370949","95.37913942167279",".9471223078303264",null],[null,".347593819010532",".97954901539976","20.6900219648026","66.2523564264043","241.7534293715737","91.96941761695645","1.016634433620927",null],[null,".3528734244220029","1.028909670592666","7.185244959037385","82.84028926788606","232.8690083294847","313.0097056856861",".9443613410223829",null],[null,".1629513173460692",".9473457647632046","20.40444867646413","67.82653749689941","238.3588405681002","209.8932197538202","1.068910386446907",null],[null,".2824958759141725",".9962404645070069","8.480034756211312","69.071305440392","119.3488426337293","233.4616107119083",".9911920442028518",null],[null,".2029307101853239",".91592706720477","5.603756566316467","49.77050711374421","241.3986443366151","119.4850939901795","1.124379021151094",null],[null,".1510563901666288","1.007416606571195","3.784409614103899","76.10994748807944","261.6320489757562","12.90490213450272",".9747436518231363",null],[null,".159922374662333",".9250562546394634","13.4729537954399","255.5621347323643","56.176996799035","273.4705177561973","1.10777576052539",null],[null,".03012909330111935","1.055978010581325","28.40158003127137","267.4199158700218","269.713672806356","75.03397140232327",".9082842050272537",null],[null,".1897081531612707","1.043195041545612","1.608567117555721","41.31299022759127","148.4001584404867","109.7305533542076",".9250299679766077",null],[null,".07898107862714943","1.097884744935674","11.43476533823713","93.71116237640983","333.9615739707154","87.24251323740602",".8567792658302144",null],[null,".1144581487573925","1.017004311878125","8.656963601375571","88.18294406124214","274.4596903729395","325.4994251213075",".960992243925695",null],[null,".06234734055633145",".9605420080735435","9.987383486248072","88.15324761544986","238.0585857442584","161.4361697711329","1.04695865024994",null],[null,".2680390056943969",".9396959592211805","1.534652747556378","257.5463461925049","62.3342879474515","207.7283942317338","1.081989471646058",null],[null,".168909185751556","1.010081076053311","10.53469572306521","275.356408650165","276.3712698229298","185.8536908268967",".9708893158730002",null],[null,".4703150667633564",".9230755173972998","2.821550488425386","119.7015367016647","206.6275622310363","227.3642279245336","1.111343273685432",null],[null,".1924785465534677",".9937685416201546",".5392008007822298","324.3803799238704","236.7808933742176","221.0525072656008",".994892614112848",null],[null,".1696974920335317",".9713876519780108","8.100642070327066","107.7074946452963","176.4656691284305","180.0155503762508","1.029473581317935",null],[null,".2389941645916866","1.084366184100775","17.59465511344798","277.6202994424323","358.145645079971","184.9232716150699",".872851023281624",null],[null,".3842642040025426",".9765489430259061","10.36355227111411","318.1616752500536","299.0049812203767","223.1104889473929","1.021322859388533",null],[null,".09572141682458031",".9326962996649758","7.644456259941151","268.197902482248","347.3053675208187","327.1956671382057","1.094192398236498",null],[null,".2351638361953434","1.063824267596797","20.81104834651086","123.4599870662625","97.45250644400811","33.55787170483256",".8982541539910965",null],[null,".5169465903414299","1.029934302048603","19.08620177116054","282.9984076336856","8.148638002838286","46.70775385731369",".942952442949185",null],[null,".1107057804634859",".9539874905494905","9.382692441497447","280.0353186699463","295.7626552106877","307.42044332351","1.057767097784853",null],[null,".236038233531957",".9429690188102219","2.18480997144086","67.04647385723594","159.5750187635925","342.7066899894987","1.076360960388974",null],[null,".2458509144500042",".9860574197315214","14.66253409641347","102.7788921958521","244.6497627033034","47.95252803165861","1.00658572211122",null],[null,".1444306361442349","1.053121363870777","3.645911024557962","98.19502297913506","99.85943186467199","82.68236772486127",".9119823625851855",null],[null,".09647444879939919",".9160868676607267","6.293101347660776","289.1660759157085","348.4411581227069","353.0891872689765","1.124084832162354",null],[null,".4602174828525022",".916866044454363","18.08728335912743","301.4093370482318","300.015187182225","278.2187882819503","1.122652221515211",null],[null,".002845742598320258","1.084332140278323","22.08354201125438","282.5771317476747","210.6186500466187","330.9082086157202",".8728921298080204",null],[null,".5947178755069696",".9827836582572818","2.642749090323469","268.4223453604521","73.83531426280535","23.52455926834073","1.011619481492546",null],[null,".06852600177001492",".9471900903938919","27.67084624449629","109.9897618384358","208.1708667783616","208.6911450381323","1.069173916633134",null],[null,".1401309700333039",".9884894320421852","10.92603243713813","301.926266813952","283.2254827952403","205.237363394839","1.002873205169338",null],[null,".3940547362441444",".9810534592355616","8.481604823792832","114.1137865331688","115.5007436956605","252.1080856078109","1.014296819575195",null],[null,".05153854213182236","1.096575419304086","14.10148842547035","302.1638997192554","185.0706072655506","38.79769730820129",".8583142325487952",null],[null,".1873723816232857",".9010422613143351","2.352352135682346","76.97228039273845","255.7631493497505","327.0449314308164","1.152355110907508",null],[null,".03973641339780199",".9933236587616515","31.92721616934212","293.7253105630232","288.059534426967","254.4716486454753",".9955610672737837",null],[null,".1155472856652307",".9371698211998887","47.6593841098967","119.1488642787129","176.1488453078076","181.8567797153369","1.086367166687263",null],[null,".3278651294002393",".9311211733679498","3.381791383511517","10.21907468164704","249.2626015610314","349.9911182309688","1.096970049440481",null],[null,".2723025381257595",".9477011761883303","14.89855112590531","300.563950855309","58.34488215227464","140.4817000637316","1.068309141002393",null],[null,".1325178648823642",".9620454746582517","1.369531376718935","342.2322360099599","247.5758883582924","273.9860057905666","1.04450535841497",null],[null,".1339349131947701","1.039543019108765","4.727578876658966","128.8770789156716","250.9006435033497","256.6860367561347",".9299088360257775",null],[null,".2810266412015229",".9454406724500399","6.069995695936896","124.8806872537072","121.2796093620912","320.3665148337384","1.072142844888482",null],[null,".259901408945066",".9798310913306398","7.273430001785398","130.3968370979815","130.7499135470394","203.260062690852","1.016195458780901",null],[null,".1243009279792116",".9525541311510056","8.240760690673198","97.82854835150145","198.0660267103477","230.5020037575374","1.060155514223043",null],[null,".09957076272457542",".9617191398989963","7.557775774907864","124.9627774000557","230.838087693988","123.3915504790551","1.045037042725328",null],[null,".2688054183674467",".9542848177594223","30.16280721302184","311.4109686276663","322.4429710106606","261.9849712847075","1.057272782405408",null],[null,".2530625997998714",".9911757352506748","3.333675631174614","300.4266795940243","318.0196088580667","173.429611124393",".9987989599462362",null],[null,".2778267656506506","1.054362537813155","1.133080175821722","300.2823535961585","289.5961276978682","60.28339822168426",".9103724862131253",null],[null,".3443184239271427",".9277740874652538","20.52450700294576","185.7551733901734","68.99444585262373","356.5604421627676","1.102911629229346",null],[null,".2784008780555434","1.014022415402726","6.460808973093069","88.96665893966367","158.1252758689131","135.9773042505092",".965234287767217",null],[null,".008886089549342854",".9890455898955159","5.906071827191874","307.9954574488142","289.7312035529783","173.6689212976248","1.002027424047156",null],[null,".2670544497831352","1.060185027795567","7.366503772640656","122.5429089524767","272.7306416867963","178.599763799259",".9028832034650114",null],[null,".2100751791268368",".9083446570407958","8.760101887059848","313.4030016799895","307.4873692897455","42.72106843747529","1.13848699741478",null],[null,".04195016759273856",".9905340072005806","18.76046779718828","124.1889900234888","251.1026579381185","28.66477060833559",".9997697410187147",null],[null,".4922469063289546","1.075082778501198","27.78987872469169","134.3222841531239","119.0628823473421","295.1857679207805",".8841810776076816",null],[null,".09451230928940681",".9460635473899688",".4785614407540854","298.0581555802426","349.2103824053501","251.9258998277175","1.071084193521108",null],[null,".1251732135836627","1.035450792942018","11.36048407289649","149.9930380154765","106.4901046508497","58.35260402778837",".9354269465988065",null],[null,".285139616588848",".9926571756964888","3.703077908583253","134.1944463877964","248.1305766850412","348.4632103347295",".9965638847145921",null],[null,".2592094488094827",".938221918281935","4.334430144174151","128.2277133795778","240.7947082243853","163.0440330441806","1.084540344234622",null],[null,".6081123170886048","1.082339825303998","5.933266991024706","131.8032269380017","120.4198524431719","17.928069275287",".8753034003819498",null],[null,".2510689178889885",".9322266541198828","29.04190310849039","132.1721960746799","238.3889798244219","96.32595519861567","1.095019365532586",null],[null,".225409837657059",".9059446648128802","11.43323942155616","319.9296454458478","43.34357976566525","273.3304087272726","1.143014043383375",null],[null,".2770461924648798","1.057739571747449",".5703919062122258","4.54793405182724","234.8924360028841","42.35456618645175",".9060161630424425",null],[null,".1631726899291573","1.00393814775211","12.73236023612696","328.9613180380704","273.3915841333364","157.5344690114716",".9798139954297651",null],[null,".2531817000926768",".9526361895964859","5.028728479699936","144.528506327897","247.4829235109277","93.00194628598138","1.060018537209688",null],[null,".4198616478548085","1.05119545567076","14.95715832980466","358.6535605880283","2.85403886546118","241.1565995667607",".9144897914368098",null],[null,".01237592005052576","1.029056248406796",".6339854694301869","82.22841213520248","50.12530688163336","186.2546839004304",".944159577282029",null],[null,".5130983956706722",".9800412425783719","16.41586947667141","122.2924249826292","250.5510076271157","66.16193928818741","1.015868620556026",null],[null,".07052004221688134",".9469892075901326","8.289808623616732","148.5155766551919","176.9503626265846","204.3768170675321","1.069514137052897",null],[null,".7067975391304476","1.092243208296352","32.04799528133589","150.3959409483024","132.3991640842925","312.249188646594",".8634258455346139",null],[null,".05406554963114971","1.063456526432219","10.37932100229181","321.8769325909578","232.1946873107257","48.6068833229778",".8987201160336264",null],[null,".1402155659341472",".9934913190358214","11.29586403664906","153.61740780","242.2149399498003","351.7575148714464",".9953090635608128",null],[null,".09341116532482509","1.038811048025978","6.697389889157817","155.9812216125864","74.65259294949213","75.26920221024697",".9308918631146729",null],[null,".3833317558456938","1.028941293956043","1.950246988729038","346.4255266612374","276.3695030831774","98.21305630082239",".9443178055176438",null],[null,".09352219395165563","1.06084167708386","2.912102053823899","157.9088615176949","287.5913216843736","149.4493456456786",".9020450210998241",null],[null,".2079077724846987",".9114389544580465","1.165575351338977","170.6444181747416","213.8597396114141","231.0057768639649","1.132694246770624",null],[null,".07800739363872523","1.01296924301204","7.658789656109572","336.4054310882516","317.9717153756455","70.58735873518249",".966739993329733",null],[null,".09755941887483426",".9189663054109767","27.01117606566524","146.0577779941382","174.6557704527175","294.3641710646439","1.118805755813575",null],[null,".2995706661024146","1.068712235493837","5.229418822188157","329.2870734064886","271.3480947899565","21.62053449257778",".892098689790031",null],[null,".1149289940455293",".9594833954975409","6.854995584174829","352.5329395200835","319.4050165357692","189.886121738461","1.048691816113376",null],[null,".2037726420074669","1.096335156580215","10.27886764978477","142.6411729008101","133.4295439852318","286.7350292417732",".8585963983794289",null],[null,".5340575300444502","1.069462062568623","10.53319180808413","13.19926229827624","29.00481043562099","80.2019939312282",".8911606446130063",null],[null,".3125075794108146",".992278088677454","21.61294279865805","173.0470242384052","246.3058455440596","309.3059921121786",".9971350257832047",null],[null,".03125604485734993","1.027495981805631","3.54275091169109","169.1018983122186","125.6750870215252","30.68912465452886",".9463109722051209",null],[null,".369173698421829","1.074719963322725","3.596805610085846","171.7604117016149","118.3231058544333","291.8959329198241",".88462885200358",null],[null,".08968203047123045",".9513630422292662","8.974409964957749","174.9808619209608","234.8736214340281","96.79714519293887","1.062147079873741",null],[null,".01678241935651028","1.065064510470386","2.267050666778719",".4923105159746614","351.635135353922","184.4367250300701",".8966856167118656",null],[null,".2317648578073087","1.063675891073542","8.539352378461851","353.2511309600141","82.05210946735004","74.55730248931903",".8984421122952674",null],[null,".2653394285162409","1.032406576822756","11.83568060839033","175.178852798767","122.3795685933754","44.04557570466412",".9395673792607129",null],[null,".2079847072714478","1.012974103224878",".8959161216672722","20.67962131909972","269.8743909844538","84.77452585128681",".9667330357631827",null],[null,".151190734979579","1.025242419381958","9.060715100452914","180.6468232859755","99.59726383885875","63.7456421687536",".9494327835950459",null],[null,".04152070974448362","1.028943091543475","6.759262630356048","181.7881533543965","57.57689794326803","83.80420557133701",".9443153309010807",null],[null,".1892066829027799",".9122719128195728","3.48879959824042","178.72124140","138.6968858798172","330.0148416948823","1.131143275399702",null],[null,".1586213373328282","1.058790014194004","8.725577818551526","11.17744761885493","262.9600893336429","357.9698370191335",".9046681879064176",null],[null,".0642665594643838","1.077496675866018","7.204987090584387","8.30798726896108","334.8270397509006","212.2045979033852",".8812115187178075",null],[null,".3332896542571107",".940894542626063","6.305636141960616","192.6814277508818","122.1978423568892","265.1162952937636","1.079922648845467",null],[null,".05053937555971513",".9838069119211956","1.671128511507029","174.4471129665867","72.57740538893989","132.1375293631564","1.010041619841668",null],[null,".03497308107204847","1.068336825937877","11.9663553530634","197.0176969440549","131.4958128741927","266.5911911711616",".8925689512993386",null],[null,".1777509585724593","1.047126017627382","11.46430110480264","17.06048900880496","265.8801362054292","15.6099848876809",".9198259298047672",null],[null,".08565280825465969",".9949001541990716","7.744783879647054","17.31303392029177","71.25967504235879","302.2022612321002",".9931956908633033",null],[null,".2462427873972796","1.047953859489632","7.672218802389231","190.2743692737228","114.7397382260488","277.1009730362158",".9187362062455484",null],[null,".196916463784614",".910537935036153","17.14149058112415","204.9590578007366","218.9727525954327","192.0534820783933","1.134375942687127",null],[null,".234992502202825",".9020231087041523","1.466729967680032","173.9096815864219","187.5658075602621","312.4923868057062","1.150476039564186",null],[null,".1373200868681914","1.05623284004812",".5865204479233449","217.9862696678815","264.2925104260606","122.0128923967051",".9079555223592641",null],[null,".1701379337592939",".9356726319952352","9.542651456720048","209.0731334678547","214.24195683","121.2154119675423","1.088975687466617",null],[null,".1159301713300708","1.08873559608587","26.13397079940307","205.8740330415947","71.66892413760566","301.5107615440788",".8676017919872847",null],[null,".2308488975532332","1.07594926283072","10.86649899828587","207.5354384948263","146.6561682309425","240.4831505530863",".8831132185404117",null],[null,".1330000302136483",".9833307839424911","4.503242186255254","203.5393634871078","255.7040354530863","312.490073955388","1.010775300651778",null],[null,".1971876700922624","1.042674151690194","28.98404662473588","208.5164750908975","111.5170633923235","274.3657627001518",".9257232318792273",null],[null,".1151480526960326","1.019421860658784","2.919455653413836","29.37099560699175","277.207658407675","49.31485936985425",".9575757961569556",null],[null,".3232371486090644",".9876256802642245","3.63828346782297","212.6073348405596","123.5262551991431","116.5041109298348","1.004189123082499",null],[null,".3410154535724925","1.090128042690874","8.28856015374023","47.2498548049954","279.3913786355443","260.112548826596",".8659400101668596",null],[null,".1395645900140495","1.034731300730086","5.470043866519395","202.8341239107205","280.1942044652911","167.7666321463229",".9364027787580574",null],[null,".4717031883405964","1.064525826306853",".6348893813180673","29.58013886235088","297.4554467835986","333.3840531574945",".8973663302698489",null],[null,".4251253607603404","1.094181788879433","16.84055017857628","33.50985005888035","61.41987446471916","42.02640860065123",".8611322426875597",null],[null,".02424245633051205","1.017785123956953","4.830495134132582","38.80096270698814","31.22178680169097","276.9160725403127",".959886592442329",null],[null,".07344065499536778","1.008372331391867","7.253595933222328","210.8356244035804","254.3467770687777","259.4694592826527",".9733582023702199",null],[null,".02386633043963363",".9893210320566176","4.710489914001534","211.8223713034147","131.4364542317676","67.73055149833495","1.0016089834521",null],[null,".5483609263062335","1.039348874665134","25.97824450348579","211.8632456204116","126.4715933633322","300.1419075829157",".9301694006977689",null],[null,".6293588566568534",".9142220924960844","13.77570444260486","207.6328838758348","206.0933025842134","168.6424753243262","1.127525846178699",null],[null,".02559958304834987","1.09599643804946","14.47966152265517","213.8350298505187","160.1732351334021","208.7384285913219",".8589944539350036",null],[null,".06205986361641611","1.022193727914325","37.05814570272781","43.57110381976381","330.7158331058682","207.8013420425525",".9536834721512616",null],[null,".08611043758023497",".9388670592939237","10.70296352358219","259.0356968469033","167.0598741843603","123.8838488444198","1.083422676022264",null],[null,".2004653984721555","1.043704276437354","9.841519543021661","232.9106287073167","106.1152180847805","331.5997980794149",".9243530519913838",null],[null,".1034131577885823",".972537709898399","9.96109737958786","229.5611308323018","156.3879539065634","74.44835697637625","1.027648041574756",null],[null,".2474449701549462",".9388843832077206","6.089610020934605","235.573101909572","227.67449977","57.43296226156586","1.083392689846968",null],[null,".3523860311421848","1.070966749786417","16.12929630229272","53.26120448497819","308.9522360663683","272.0438233278309",".8892832096739587",null],[null,".2116371457533349","1.091543071618368","14.93026263537982","227.7989172635233","282.1797634986071","17.80047400436279",".8642567055950632",null],[null,".1989744077117971",".945585466694476","9.319086810378192","69.2562178316951","21.01619924765132","60.85728749934955","1.071896594006426",null],[null,".1699315592173123","1.051623166609517","3.936379470859474","61.93800298689437","261.6491745014363","326.3466037095139",".9139319430650521",null],[null,".07252275959115118","1.07675671387995","11.04358426917529","51.96112769146085","235.2165682092349","297.0235180007808",".8821200457268225",null],[null,".2354486454146688","1.087101229538241","5.146272946036031","67.95617150864351","79.22742926401159","25.56248853357333",".8695590781978501",null],[null,".1701752230719604",".9653434829846635","23.72990556732491","66.14759745788538","300.4785195183329","123.1144708074921","1.039157246238109",null],[null,".2979503157909064","1.074984823035458","36.01568515217281","235.2295628535659","205.4457228746497","117.7023654481449",".8843019337428121",null],[null,".1644396113204458",".9571592804138906","3.029450343357873","199.2055903849564","262.777594852678","16.92556132681253","1.052513686882115",null],[null,".03252588330276117","1.014179780653951","7.15316465201115","64.15451878780492","2.725020403788961","289.4575036644934",".9650096405496957",null],[null,".1294098711045084","1.055356454945812","1.818473360264441","211.3659928607495","135.3428782555452","291.94400213956",".9090867285899065",null],[null,".2797860723415743",".9683850862926876","11.25327922544179","61.82110703904024","313.0882223161033","259.3821943923618","1.034265254931131",null],[null,".3658330464611564","1.04676720841587","3.398722993961449","241.489590266152","245.2898712591117","74.01985944845792",".9202989150541375",null],[null,".1336166321468406",".9748593544963298","2.863952014731603","67.57922953533594","293.913498038818","101.1403647606411","1.02397918543733",null],[null,".2923759062444429","1.059943525789204","34.59918658681991","247.8438139455316","249.5965439631677","86.57828458047292",".9031917961205933",null],[null,".1326780994246848","1.065585746542985","4.896979496216717","60.34715047760753","106.8555082520272","60.77313969612844",".8960277704543604",null],[null,".6337411904420558",".9322367432180246","15.14951925542057","83.25134105531809","325.06511750127","194.0265554776604","1.095001589367259",null],[null,".200167789296238","1.072672278523854","12.26556157488251","247.7045346817799","259.6456799852637","65.03257967409704",".8871631375957293",null],[null,".1713955431730532",".9242906559060318","21.83348411335818","248.8719527167726","131.2157398618476","223.5543457353011","1.109152417285267",null],[null,".4823226565017774",".9821364443075564","24.03391731196315","33.96066197623004","77.32838689618907","243.7079583863185","1.01261961049294",null],[null,".06180996799829632","1.084215725731898","22.54554855642846","245.8021388330199","19.89846077669473","302.8442637667114",".8730327200038518",null],[null,".3532011917924996",".9067136673107934","22.67961218383585","259.6885938143555","192.4925785322491","194.6978213658191","1.141560231188657",null],[null,".1123610410891232",".9711050918990345","2.153086241104079","112.0146265639825","284.0571264576272","69.34182107239501","1.029922929124256",null],[null,".1658955498188331",".9604226264884954","9.950949427697322","253.4653516155809","241.599781899764","332.2135233804394","1.047153863477392",null],[null,".1528199924470732",".9145914815324414","5.510403441375213","91.84926313609327","319.2510623368851","210.4850293535702","1.126842830366678",null],[null,".1177137593500346",".9629116174090876","24.95591153695374","271.2020208738061","151.0147291998503","63.5840524932805","1.04309637042325",null],[null,".04107344600202079","1.024873014751048","4.86853877133142","99.14849199266057","357.4600475417703","236.5188198476593",".949946149344486",null],[null,".2932107055809396",".980668269066036","13.84349574743377","127.8692239490335","303.0994132497131","354.2253680814924","1.014894476609482",null],[null,".2093645533583539",".947957742745574","1.573526837461439","53.85087109701201","77.96004807458753","12.44144765586037","1.067875460513363",null],[null,".1834725465353472","1.053064002345009","7.596047375125899","235.7872333769065","295.8627704268482","76.42873692068756",".9120568785861852",null],[null,".06582287218882472","1.082744343621428","15.33280628267878","283.9862977073336","338.0954385577634","307.5420928496072",".8748129200746793",null],[null,".2750047367822848",".934877123573055","7.720365067326722","295.4823895587023","197.63873547143","52.77061755154481","1.090365934755796",null],[null,".121147570737223",".9310741703026689","6.591887829730043","301.8203797907133","163.5646390878286","97.72288718379473","1.097053117375159",null],[null,".252429612891751","1.048402628318098",".5140711670906432","124.2981678847803","279.5814768475414","271.5523438849712",".9181463717149325",null],[null,".08496312386993544","1.0796165779558","3.391332907881275","301.1158457769749","59.35103003716024","227.6505221353277",".8786173132579237",null],[null,".3872961492789109","1.019690432241239","3.594237284694796","305.3704985645431","112.1436179245885","328.9040912276703",".9571975038285038",null],[null,".1853453585832933",".900604328080712","20.02669950993645","303.5006559594227","165.029347417683","181.8032056087312","1.153195739685956",null],[null,".1950734052409011",".9680092518914079","22.23628619990379","313.5442798573525","147.7094954794637","22.27743020887897","1.034867651325395",null],[null,".0836679809356842","1.080522596424779","1.006283650416283","295.8197645833773","108.1375778057971","184.7029115400956",".8775124636856745",null],[null,".3773831495691266",".923714404085752","1.542746781575262","164.73498517323","273.139916394164","178.742061832132","1.110190482896067",null],[null,".1581865925413048","1.061989257349752","3.725397375323054","292.5268682090261","270.9734231548252","35.60601763855028",".9005832981709132",null],[null,".3779946213128224",".9424615257121728","22.26827639363696","121.9341684867824","60.82994428201078","312.6377648547837","1.077230469549808",null],[null,".09570464045123191",".9332090545051858",".3209601896805483","227.9521079650383","241.4948044159186","85.70804426390958","1.093290710607377",null],[null,".6454454773894368",".9486112128473297","33.21670254662617","150.921330575018","17.03074512604389","262.6832927418042","1.06677220901541",null],[null,".212134703161541",".9563993800454857","26.76203692883561","139.6074352375604","300.6193571989058","71.34772554815022","1.053768336985458",null],[null,".08822787681435047","1.027485551407511","14.4626675584532","308.0076664314226","216.8379709726863","176.5735531423551",".9463253817876512",null],[null,".146405396335806","1.036233758476966","7.364082554240857","320.4405846332538","216.2219447589956","118.7241188190372",".9343669511777248",null],[null,".1285528177648299","1.045614853269385","23.61556718578984","320.0416728330909","86.3153644091832","255.6669707185207",".9218207038737174",null],[null,".1231306607840689","1.004411305360343","5.087075821800752","144.1818369323039","58.49123573414606","165.4904024149064",".9791217214963389",null],[null,".07017665804544422","1.005656160960332","5.97902850408749","139.6533429809573","44.17657905672451","189.4115340444292",".9773042694686764",null],[null,".02305578106709555","1.088660151889001","11.05342922562778","140.4638611958285","339.7072784843131","83.95375315332832",".8676919808116718",null],[null,".4378463141268309",".9933284485426259","34.61152152559693","320.4052813066472","239.6260272126358","149.6372753069656",".9955538664601601",null],[null,".5461736145264756","1.065931374406229","4.487101363347829","327.1745160863359","119.3227478106594","225.7933059215803",".8955920007621532",null],[null,".1691323015382997",".9528411782829243","6.089881733105465","161.7906452828893","348.8548582370278","346.1281794825678","1.059676486311773",null],[null,".1749619565163748","1.066743908052906","4.892784082862043","318.3051841480085","252.1832062200722","90.87856526540726",".8945689435337276",null],[null,".3450928801173254","1.06408459570474","3.65227636146806","176.0000716903844","29.97521295123634","10.00982339733719",".8979245375736944",null],[null,".3268367094739204",".9882070544905792","19.63716587774125","162.2453273665804","346.994460751579","268.8758475246817","1.00330308842323",null],[null,".09914817544607221",".9614685995805538",".8090413652836559","141.3616703452164","314.2283613497107","31.11816676501184","1.045445544317711",null],[null,".0339684387171106","1.038260243798606","8.788479986218281","143.9687415354622","116.4786324011012","38.80548666205733",".9316327281917082",null],[null,".5311751520177629","1.08050107339595","25.44758304948008","145.5884931160518","332.6819136363583","141.6285344028308",".8775386832155366",null],[null,".5127354427267481","1.063106126371226","40.85977267668703","147.0977159390847","300.9808735192269","298.4048850246496",".8991644802291047",null],[null,".4172051264851327",".9694373035160705","16.62037708249572","142.2296630551384","330.6840934706575","18.7760320137337","1.032581840708249",null],[null,".2408751349917163",".9302276340125619","7.195190237733125","287.3508365328701","233.6818022052427","34.43372482888477","1.098550987082771",null],[null,".1926890968200946","1.026979321823859","18.4072164223484","158.8961678521068","52.86935850838622","97.17247305593055",".9470251771869125",null],[null,".2335869498745665","1.042865743460037","1.157001228278247","216.6833786314133","3.020943701869782","48.91922307267209",".9254681374788158",null],[null,".1133130017417824","1.079843455960327","10.06619830371475","160.0734837811067","288.0238638950385","147.5952527702945",".8783404280239175",null],[null,".2410706673231169","1.069746993291088",".3826589409885936","342.5495162248229","254.7352467294141","335.5323673062534",".8908046228517753",null],[null,".3057727495854547","1.007228058359678","23.03236199776437","337.8262268206309","139.6070824225637","282.7795971155179",".9750173655636574",null],[null,".6587671201288965",".9317836119655736","11.22765349232773","162.2252229848463","36.53828215777894","275.9858619696604","1.09580044398441",null],[null,".2203470268250872","1.010820546567951","3.361574477984723","173.9263735551056","275.8313397265994","296.6585022166892",".9698241227910116",null],[null,".3378143592180928","1.03849336560004","33.98553078904871","346.9891356410842","113.4614505011641","285.9948439975993",".9313190453364257",null],[null,".4215624138482631","1.077996030176899","13.1194874916241","347.2730193282274","108.8130201638532","180.1038347041535",".8805992913110857",null],[null,".3752929364276077",".9303478509063897","3.081810269118909","165.6371965713013","53.9505931110324","293.6264469125026","1.098338066526907",null],[null,".5551320393960936",".9618532439826454","7.531999942355028","351.8584945774036","127.3364000317183","57.81124903017423","1.044818497665118",null],[null,".06888948105495594","1.07800489448297","7.130770175920039","335.5648806372561","136.7973598440647","120.7778173612726",".8805884297385124",null],[null,".03183453339094312","1.040909660913917","3.070376690219039","169.3727767130256","105.8167833866768","19.25120991727566",".9280780790760197",null],[null,".3388231593054277","1.011472680701812","2.604195268346739","352.1579173500357","108.8251678078246","297.5834410467263",".9688863513511186",null],[null,".1769090655254781","1.069645293290888","2.807785768686032","5.542677145186839","72.46699850540972","182.5464803490695",".8909316700854556",null],[null,".5747915879778189",".9807569069344412","1.12403339127102","310.759676398992","266.835939976137","140.8903094422404","1.014756895038767",null],[null,".1968340567911711",".9687832253917799","2.122700665558544","181.4491155947887","54.88085004641334","198.2243615180898","1.033627745242397",null],[null,".1336075856095655","1.084944689605668","10.91441370666777","354.5090315030288","81.69441306104341","152.6926796543413",".8721529944174176",null],[null,".06772143649449118","1.041695620308723","4.130344191856581","345.8265548730171","271.9441886433081","32.23967032774576",".9270279247918234",null],[null,".3260355420163307",".9461563851132979","3.234477846594429","23.40013297011168","176.6393907244171","293.1432064636647","1.070926553758275",null],[null,".3378249601828537",".9732629256707114","20.5493113983766","162.3931724697731","42.9361257354669","214.5843481741789","1.026499645237783",null],[null,".3652754241536619","1.065940041249582","16.96262766584703","359.1701021874342","153.3840737871371","224.6152869554032",".8955810780958886",null],[null,".03574482629652555","1.02392753816871","7.090775992306368","349.737392986223","67.16949625491385","280.3191649408571",".9512621982459232",null],[null,".2108712748059828","1.052436468979372","3.847803325929914","177.0084346008342","277.0451821673971","201.6483959296459",".9128727446012004",null],[null,".2111044441791747",".9413432391416223","2.324536246930621","1.801502429413801","118.947893714784","64.61549662518038","1.079150614113958",null],[null,".3408725406411933",".9348239791862195","22.15052571011335","179.2885271098734","312.8075965875617","82.59249185493641","1.090458916408827",null],[null,".424991155003997","1.076534780919846","15.79061135446224","359.8509944029421","117.4051375663952","164.2745482572649",".8823928398889633",null],[null,".174449550587997",".94939695296607","8.203443436210028","183.1381296045306","49.69672162188598","252.2428012989337","1.065448159680781",null],[null,".07560468968966716","1.070750055898484","18.3435334599362","359.3014089075781","281.17439882","311.9786580148206",".8895531774168152",null],[null,".377839118218261",".9128336840761211","14.52305578402752","176.0694195435856","306.1422385534468","158.1397195088176","1.130099252789365",null],[null,".1697848624896143","1.040229090613436",".6865672332654938","189.4223944129304","78.10535022115876","12.56238165421616",".9289890212156641",null],[null,".2617200039061378","1.032592395746693","5.922551964135407","179.1012054080348","288.5644202563113","282.3825811318454",".9393137725949803",null],[null,".2278487515116074",".9429459794671105","7.326985849464079",".8131198358999674","234.1777573972967","259.3384278038274","1.076400409309956",null],[null,".1639383620473304",".924106974790558","11.27604751335166","359.4815550260653","169.5302636962789","44.07841650371679","1.109483126524777",null],[null,".3045916637443103","1.06386151844532","13.14206942323402","196.27421181335","50.16875934045128","335.8049538856545",".8982069761827925",null],[null,".08844918018713707","1.095638124258257","2.636866936401526","189.9753940581907","203.7091613314153","168.0918798213791",".859415872349914",null],[null,".3027616907423579","1.088764777821828","19.21717174817237","221.2227271980804","271.363418198106","107.1702202002583",".8675669112322628",null],[null,".2125976063230998","1.025720609110409","3.549406444516632","342.0166587446553","139.1726855157472","234.0149130182079",".9487689243303327",null],[null,".1520029024966791",".9321366270598392","29.51256865090956","11.15880930157886","219.5927347514088","301.1160129368214","1.095178007114505",null],[null,".2181071341631677","1.089625809477348","17.72394163761531","12.30114046027668","107.8199768134561","114.6853259300144",".8665387761936703",null],[null,".214422665084616",".9073870668445289","29.90518187498627","195.6377351789197","337.6743876704271","208.9176378010676","1.140289687152307",null],[null,".1756562582786408","1.045323013114771","8.489695097325079","193.163033010208","90.88916963948346","346.5733920372072",".9222067707680972",null],[null,".3886848053310765","1.041214319788639","24.90612902307092",".9574244685780451","262.4109972029559","353.6962013960301",".9276707759868567",null],[null,".2143786818614787",".9863482260653234","1.58433363926642","349.0814333269457","139.6025971407425","308.9211704511371","1.00614059545284",null],[null,".1876409258777336","1.081648924856056","7.975351960598257","14.77199341804493","275.1305058758857","269.9065926190584",".8761421809568546",null],[null,".2652012397039678",".9286377524699896","22.15637416243407","197.9125896781733","54.84090964327414","272.9954578108831","1.101373368483257",null],[null,".2434660429210532","1.055996468937667","8.714482659491017","222.6601187151835","265.7385607436208","167.847997466337",".9082603905154459",null],[null,".07995564150639095","1.076277294713145","28.40138274482631","16.30562473706358","63.65916673875828","307.3406994893393",".8827095114051114",null],[null,".2141809247699883","1.00571889009348","4.230209900317266","22.08764574326937","103.1839355285341","273.8283979569794",".9772128356282205",null],[null,".2094239797794759","1.090436710613821","10.01699375604885","28.26365158076907","79.88241265448633","124.199606606758",".8655723561081695",null],[null,".2129765083251446","1.065755937555269","26.65650113484645","25.98626334854035","97.53761339134903","156.6847234964702",".8958131484479704",null],[null,".3079155690025875","1.030003409635712","4.84796394158543","21.47266036692517","257.6883609458474","6.909948623276154",".9428575441249497",null],[null,".252019077016601","1.047888796646284","16.08273151970766","185.5913801740992","358.9499458267781","107.5145985330975",".918821773315702",null],[null,".2399118061654049","1.065730986412037","44.04892353463191","37.81451374789744","144.6424035774353","93.44329322095928",".8958446081126772",null],[null,".0895159842284254","1.052355177932662","16.790009630","26.91635761791713","106.880075129077","260.2899148777895",".912978521363375",null],[null,".1231763792287294",".9593455287495436","2.61977161933543","198.4776788955107","328.2885199579473","319.3238188941784","1.048917884177863",null],[null,".2390082536352033",".9077396808703954",".6495673224530792",".8847705249188512","165.5510637984756","103.4790224268284","1.139625328585501",null],[null,".5740837353415091",".9670122626144302","27.48727636464602","29.65185304587015","127.4454981141435","8.102267278559276","1.036468485998828",null],[null,".1937165088868273","1.039765914812974","10.65622890442485","41.57215086882671","99.27300661303164","184.9643600835393",".9296098337601836",null],[null,".3186148108707105",".9293805503105562","28.51563091913302","205.9625641204306","307.9769423973784","267.4941928248264","1.100053240352809",null],[null,".3536713346430901","1.094039860224999","23.95078238075341","215.4973267105979","282.4577639424417","295.6575049276524",".8612998188110569",null],[null,".2980229952142643",".9593804706900361",".6054219883370294","291.2211761829912","217.1109326247177","1.877285502393679","1.048860580177491",null],[null,".3701457573422468",".9280345736981965","3.805513488027321","56.44100224630586","132.0282998008808","36.40749212339201","1.102447304176752",null],[null,".09158202181206852",".9736846812420993","1.46386164416433","210.4519495385675","64.0572464804289","158.4919716054644","1.025832768576694",null],[null,".1901315356242116","1.046370842874937","17.75411449446974","225.4809051266238","283.3429411952583","155.9985211027035",".9208218787627311",null],[null,".3540984021875843",".9707511069410171","24.6971396787827","28.95150560372079","133.4969736307515","260.83632950148","1.030486323473268",null],[null,".1890869173990228","1.077958853839995","7.283287066992612","26.32102406975021","256.7587391572698","87.0885778921251",".8806448464911103",null],[null,".1734696762566486",".9320000198824812","27.99131187569187","224.1146885814796","330.9699760649166","354.4937804783365","1.095418803233297",null],[null,".07986973576727023",".9890409653877499","5.582637209243596","229.4304313587093","28.76621385396481","140.2162632767768","1.002034451899161",null],[null,".06315709700461342",".9802538164914339","3.51098127062763","43.92649575539146","254.941780930181","120.273123034298","1.015538192673884",null],[null,".2347482301032989","1.041213401803315","3.370557196882804","225.7521169148503","87.11175998752623","320.8913564846258",".9276720028079062",null],[null,".3059945049995594","1.021474056907669","3.995979113184962","229.6329930636839","73.67976368808584","71.13618667471256",".954691514226466",null],[null,".1778401696269726","1.040977557957548","4.389624872324084","231.4705669740778","266.3874112926837","183.652480613496",".927987280677205",null],[null,".1427426443506624",".9849994669549469",".3737800625954295","350.801956133249","303.4601201992771","107.5542087333185","1.008207864191985",null],[null,".4086942297476591","1.091875331368126","11.43699441875121","250.4853203676323","270.1472428776103","87.19980414414053",".8638622431573049",null],[null,".1276245488504189",".934236108785595","3.495074428894188","233.6826102320637","309.1037327606827","4.951982015158284","1.091488339295817",null],[null,".2030167494163087",".9080304736669143","10.17024464849737","231.3860557650071","53.68214128276319","298.766134014428","1.139077932359484",null],[null,".1238756349301347","1.090055489397826","8.793912746826985","54.43278627995119","303.0488314587144","204.2868564006923",".8660264661023762",null],[null,".3148923533847082","1.026984995127264","14.01401113906619","224.8237302251551","336.3343223110944","155.2764098319956",".9470173298151692",null],[null,".1584659538573123",".9233932742324096","3.896357633750367","52.46884716779711","224.0507981539967","273.3689682980988","1.110769672140085",null],[null,".02862284712757845","1.020350170082763","1.700041856640703","107.0994585624117","180.341469371688","54.52550508649203",".9562692970071096",null],[null,".2183948762563684","1.029587504827181","35.91177589109692","56.54051977250202","118.9575979797318","262.1248184007655",".9434289068088629",null],[null,".3718578970552129","1.041381252787879","45.24259172052901","263.5765938050133","342.27605261583","87.99708971130117",".9274477270433367",null],[null,".06819183620559985","1.068572157896997","14.20941918997175","255.5468034918372","8.82077309070878","346.5592964647857",".892274111451876",null],[null,".3234188801045398",".915903499090667","48.78968910690858","239.3124751907323","317.6628134660774","255.4665556468398","1.124422420368745",null],[null,".08646155897114942",".9476305217684873","17.24704417989468","61.98433831296694","216.1976418758108","217.5027759152063","1.068428621381764",null],[null,".1666293442140454","1.044966425526833","6.660506371109134","238.8425045279609","86.26100928988348","311.3615955086102",".9226788560895574",null],[null,".1017028343032809","1.058552692668636","41.47706544912156","112.8505544301709","84.5089899659598","89.11607535433443",".9049724371924749",null],[null,".08358460050708851","1.091210545052337","1.472655920713473","80.13455975912778","358.1030721396814","136.2543202101733",".8646517854567299",null],[null,".1091216321674039",".9362753583397265","2.528804560922313","68.7762821157487","234.0724932800912","216.1308384110475","1.08792431616922",null],[null,".09575683156312002",".9149267466558592","4.378029103337471","71.21358117169231","211.8126298861295","294.3329943598598","1.126223507851813",null],[null,".3638077577665486",".9206412347292795","1.24550907563964","255.3461322484957","52.80280183384551","220.8955714300334","1.115753967684895",null],[null,".4620379120105746","1.077591761195821","7.771410068193406","266.4103470755087","282.3261560684577","103.49099093004",".8810948858090474",null],[null,".192107702703387",".9521684374961404","1.042556431998658","218.2425742530477","101.3127515817397","150.5280319585259","1.060799733213787",null],[null,".2847328092696999","1.028366453560507","15.82449605007305","283.004097863804","280.058780543487","162.8017419253247",".9451097039753779",null],[null,".2701863396077084",".9243736348674553","57.28893640188582","254.0165701181424","349.5454163207697","316.0158918652163","1.109003071425535",null],[null,".2588437395130774","1.051483799015172","14.91036277090936","91.77683896957483","127.0144338124783","85.89333520538482",".9141136530214009",null],[null,".6769845288593759","1.075773714255103","15.5510404560177","81.14146057595448","126.0321704279512","311.0434858915987",".883329391688438",null],[null,".3532465962005821","1.07779356286548","16.55539816522599","255.5931671668938","36.97696093834156","265.2905014131489",".8808474384749568",null],[null,".1968460868323861",".9909294911962051","31.33161552130117","82.19968510724955","196.8180580426838","109.1992027137094",".9991712824774591",null],[null,".08079007683218974","1.024399940572387","7.504481804720971","75.7603245447628","252.1919345201414",".4911117916561404",".95060426175145",null],[null,".5342311529595433","1.095892325677731","20.39046829148096","78.47816648586637","136.7881541797612","289.7441950056644",".8591168666076812",null],[null,".1468589758714966","1.093585606817344","18.78879018520076","80.19642093453236","288.3560762355232","186.909443182862",".8618365243968812",null],[null,".2246579957865034","1.055403338620125","2.994195576214971","85.81874070703114","83.78420682073286","132.9873621292153",".9090261533796443",null],[null,".4894205821455259","1.076676529242621","13.60566925810087","263.4227886381644","297.844100308207","299.4385913383317",".8822185903581767",null],[null,".6623928799030639",".9633640893474936","5.314202951577069","312.7840831668416","278.2838711707227","306.6465495478189","1.042361575937872",null],[null,".1667929134968155",".934324985121791",".9835927374295789","80.53066052603835","126.7952155724914","342.9665521389934","1.091332603584185",null],[null,".2422378984609489",".9365836543148339","3.992993192263363","263.6132916345516","308.5118328107756","339.3807122325919","1.087387191027789",null],[null,".4577968880441904","1.049702494246835","37.44867397301778","258.5061278310693","337.4063818433032","230.7370448562496",".9164414634551041",null],[null,".6409087195271862","1.010488962484435","10.28418712358545","70.2576386459356","150.2091360121093","219.1642982808382",".9703015222989827",null],[null,".2660397714509271","1.030522453499957","32.45962646963881","87.85605647461119","180.6879464098632","78.69630289884492",".9421452993880739",null],[null,".1109949909921577",".9328472550604723","2.384819293203175","281.9684171038298","304.0073421616436","321.1529732714419","1.093926812049263",null],[null,".1231801695674287",".9393027318507727","11.28910692953606","271.8954743606534","314.48469898972","304.8085528607304","1.082668984841986",null],[null,".1152846413339284",".9047454310291542","2.598929997420588","276.9607616831104","317.2336307548849","22.60252800638679","1.145287382052541",null],[null,".3102950860096311","1.096039734820007","14.76817683565935","279.1733690022403","274.0455137334977","288.3986467964418",".858943555253194",null],[null,".1159057005074645",".9673068571362129","4.917031245567002","98.8975424854446","102.2862084226067","268.5624327028691","1.035995035376443",null],[null,".3174926631445751",".9793166662313181","3.694227075115305","287.4397909560471","47.6682558594225","62.3169606940483","1.016996259652819",null],[null,".4055939077650514",".9624067466503127","5.550524440257933","251.1437948811954","75.18209291720035","93.70294050319575","1.043917277879652",null],[null,".04941089734131593","1.090343649256096","29.11812458213532","95.5611473727695","352.6428433491021","6.443496769385994",".8656831740035706",null],[null,".2118721645429565",".9557896782612765","1.11182934634981","81.30112047301101","131.5369615717851","291.8735849941303","1.054776801870143",null],[null,".5923004827158876","1.014981114757335","24.11566188557896","100.9943284061478","236.1767582171123","54.42893488354152",".963867044192365",null],[null,".07508061444626787","1.036751756629408","26.61768498489649","285.2189282810259","251.4344574195886","145.4520059017836",".9336667740760362",null],[null,".08328699802843029","1.028685436639541","24.67025859224493","99.89912795851288","222.6210446500963","128.5094697894273",".9446701371958196",null],[null,".438686284993661",".9538659526840626","20.10593607782263","103.3843689818148","225.715423894574","84.02597059625302","1.057969269040975",null],[null,".1527530502457722",".9804872404252446","17.25726649922536","285.9872159850837","303.5704392570676","212.2116927635364","1.015175561523425",null],[null,".1887214489951514",".9393059275174424","26.53578003429193","104.7113587468916","162.49007639156","263.2417117314384","1.082663459731138",null],[null,".01417546775169228",".9751686500787331","8.401997048374245","107.5447014785737","138.475458865821","192.4116131273517","1.023492058737511",null],[null,".07467320798601708","1.024586207030231","3.956208995948384","292.2262470860055","83.44457032566969","314.2091486275301",".9503450483640892",null],[null,".1127753808420254",".9569483985506358","8.453508770467106","304.5689536027844","8.427471035502498","159.0420047524167","1.052861618299329",null],[null,".3116579844501231","1.0205977689971","20.01814764083859","109.1556246145744","118.4156646472234","278.1385466628693",".9559213290547074",null],[null,".08813061685990042",".9072690088702881","9.464275803692024","106.5508966689229","194.2195565983697","297.7471399054862","1.140512263918521",null],[null,".2030453803521094",".9103932576742967","13.30040010457464","105.921812608176","81.73013926428904","30.36805321370546","1.134646361603636",null],[null,".508084818756399",".9634282288394811","44.51806337664487","115.8915511847008","201.2816526782063","119.0787391036895","1.042257486042221",null],[null,".3465390204278654","1.094335967843977","16.31927855735018","91.65503126803165","255.3848668610792","196.9096188042582",".8609502641111524",null],[null,".09856042909017231","1.047456509685782","9.73658311500828","290.532368746844","114.2858581600056","240.4852501222862",".9193906307993149",null],[null,".07127582924132991",".9359022223408023","4.244768846382351","112.2955169149055","208.4472474879798","200.1278867895485","1.088574999823406",null],[null,".02000150406731989","1.028997615051443","4.968666532354962","288.8546385996196","177.5968719252959","223.737340755569",".9442402772250523",null],[null,".08827773196175613","1.045137267476416","42.22113282703295","121.2806654154694","193.9513768849849","351.6027825956451",".9224526286586395",null],[null,".1650524700668763",".9200170530372112","15.66100046117532","118.1316403841484","125.2552973063863","333.2245847727921","1.116889628116738",null],[null,".1547556011685574","1.079991225999526","5.687933059135288","316.3000541459133","75.81303011117224","189.8046867733776",".8781601655043688",null],[null,".2416341093479082","1.048762014144658","19.61387204128719","112.8173853165614","267.5238628533523","243.3020903453179",".9176744717244864",null],[null,".5447579332641139","1.09159913890257","9.304822809993592","260.9679856984238","83.2909015287151","63.52283917039839",".8641901208468328",null],[null,".230700182863523","1.004218142410029","12.45368203093629","116.9730440842987","98.64296683782088","190.0465122917531",".9794042385018989",null],[null,".1190419623637773",".9322664486970743","8.046038787972863","296.5004663851525","50.52187198249077","177.6267599543013","1.094949253544645",null],[null,".1434603624433408",".9468965342643403","5.294777807834635","118.0965097097646","113.3935165879452","285.0151549336245","1.06967115186955",null],[null,".3044153282602445",".9947587755612565","19.28504654545353","126.5384519148147","109.5184693729747","195.583496521105",".9934074331162759",null],[null,".4231604034328239","1.079992520967547","16.67142805458543","323.2907783580112","300.1981855122813","10.09480953819094",".8781585860642763",null],[null,".1733108341633283",".968370039497734","5.760202367077717","113.6488629197157","253.6943325886938","64.62422102889627","1.034289361061085",null],[null,".02499004390387213","1.041037733739317","8.2942842632627","296.0990102471616","285.8276692417047","89.01970362100499",".9279068202606955",null],[null,".2557347152540212",".9267816659338762","8.823563471308074","283.8311959850713","66.6650540409465","170.5133068823089","1.104683642403968",null],[null,".5097542908371657",".9217140280378294","23.37540056516321","306.9068575118521","39.23900991597438","81.25530445315505","1.113806576749965",null],[null,".1344088582079637","1.037627515478664","13.98597418679354","311.4296784635826","310.5846015123147","67.30253472344347",".9324849997275123",null],[null,".07774028033193897","1.061109632990549","11.22569404657249","119.4141521595074","291.8434198583151","212.5924248631539",".9017033603174986",null],[null,".1583471370123988","1.032145294930847","11.97057206953253","122.4101148344585","93.71878437444622","128.6746593478744",".9399241712926284",null],[null,".2093743474976115",".9140966116015407","8.569062539261306","312.2731556134603","48.44885349506306","199.1680667006093","1.127758022633591",null],[null,".1633846046673383","1.099875716810839","25.47762878319616","315.2252616542419","90.48674634662754","145.2002496994283",".854453933248141",null],[null,".2723326904486318",".9873696739987331","5.37747756279286","134.2657928035827","113.57774243","195.3751854617517","1.004579699242384",null],[null,".2083371051857763",".9816461303403623","6.675154685747471","129.4289260727217","244.38392697","30.16104869261018","1.013378382187174",null],[null,".152882617703978",".9854403636710015","8.832558901418926","131.0353757027254","235.4433142311387","37.82736248677713","1.007531315165533",null],[null,".2604690015061432",".9505048967050146","2.34823684533661","322.3909853403987","292.8780185840721","264.7940553280544","1.063585813849228",null],[null,".6747629119205485","1.09340065792262",".5510778385308499","1.657206285112175","268.2521950978413","311.5871314357743",".8620552033229774",null],[null,".09193732490525938",".9298982721760987","7.293531553122961","142.3737204591636","185.0672514557661","213.9286828464216","1.09913468449021",null],[null,".2796499698564768",".9707827184448993","8.398785248611031","336.1276390756894","339.665461605866","143.3023957450908","1.030435990443114",null],[null,".2199153156380442","1.084761535812842","8.888686751024586","156.0390509325205","112.7875075732226","349.023373555191",".8723738884102893",null],[null,".07898518492801464","1.036699998262206","3.284583342580027","333.9543923243499","259.4293397989405","95.89797540422072",".9337366964320452",null],[null,".03410144215905078","1.015181336024986","12.42611750891516","140.516209867361","222.4123151206505","355.7816546632524",".963581907202039",null],[null,".6424510409344908","1.06378270744352","8.818479492806075","150.2398521272723","128.8101855848672","304.0094543821291",".8983067943652949",null],[null,".01272861753077111","1.043743126294082","3.888146653070036","147.6373133524202","239.9776697726609","276.3768246655584",".9243014435325176",null],[null,".2335784517421285","1.056320061535934","29.30186697165359","320.3344875556521","85.08038948601839","70.34393707238523",".9078430683814891",null],[null,".164432786201008","1.043812603580331","7.208677104225634","144.5046927226138","80.24836939541883","97.81791234968547",".9242091613252457",null],[null,".04835067377833566","1.022192508305526","7.02395217511609","143.1933675020666","52.29364835790819","154.1428145620055",".9536851789522925",null],[null,".4017878871601162",".9594169309061042","2.048976938560187","353.3251676173957","288.7054729310311","233.0297286785807","1.048800791801616",null],[null,".3490511261253071","1.093983678820944","28.21499755704579","312.3729361117893","345.8775416679417","304.2926411919567",".8613661675881306",null],[null,".2622477576061537","1.09043979365948","6.198951769638563","305.1453246089688","98.19076338388307","152.1463079329838",".8655686852078255",null],[null,".2807291887500313","1.090068786641724","22.27789988994205","118.967258828626","223.6375604295299","247.5402973848178",".8660106197674977",null],[null,".2366098604032636",".9155910053473006","10.70098202413929","332.1724913550239","14.35513321997295","219.2388377003382","1.124998122205778",null],[null,".1801602570110364",".9827721102336295","14.97825405225038","139.2733012038115","258.8738207655709","5.644189670682219","1.011637312035195",null],[null,".3333498492353125",".9192880018747179","12.80723219440503","350.6612722899388","315.3610193196042","217.8036017624255","1.118218533370231",null],[null,".274044685403377","1.031305906008758","5.52644650258132","120.6012770986667","131.8832188579449","286.8267770515946",".9410719235473002",null],[null,".3803613150979673","1.072942870602037","9.08742938063599","330.113560342347","280.5986151345768","48.87634352242693",".8868275500436978",null],[null,".1254032141345693","1.034377835652923","13.25686594452986","147.8506251159314","86.63467103094789","102.1996272259649",".936882797678614",null],[null,".08335456523683087","1.068933089262116","3.069917644257967","340.7991148589129","219.9786155795527","68.53870644058502",".8918222274247146",null],[null,".03663907754773997","1.087225438142596","10.28539226591411","145.8806274310444","312.9738091751124","130.8112921838569",".8694100700470713",null],[null,".04335944557365781","1.079491175203375","13.05244957446528","335.6615909401068","44.81034723222307","125.7537677451461",".8787704190451798",null],[null,".2802760808421209",".9940127353781106","25.47656269275798","328.8408714163994","303.3921256455867","268.1040110417055",".9945260217627757",null],[null,".5032272668711849","1.087187885590024","12.02653847089712","357.9552947487809","281.6386427697906","301.692372944966",".8694551158730341",null],[null,".2666823916762898","1.016495387862754","28.74027282347599","132.3119045649298","233.2454105040252","346.2866485676275",".9617140375230011",null],[null,".1526399447616645",".959730422945531","2.454234519574748","165.8287362114025","122.8031645861982","196.2830525098923","1.048286953998339",null],[null,".1734715572418428",".9250710141836875","8.161608019264049","350.6271463190803","42.37959735487114","140.5534158281573","1.10774924872274",null],[null,".1630759666650978",".9051595376003243","17.35866279017087","164.7122073417847","171.5907534315442","263.1406730108644","1.144501525919923",null],[null,".4552298946057396",".9959700491395514","6.023222499107328","165.9798000422131","121.4164409200514","159.8405292210877",".9915957487424772",null],[null,".4272067606384757","1.024248881638228","7.477145586126498","345.7211335127946","67.32897772497893","238.5378837065727",".9508145659512743",null],[null,".06420383818596312","1.019096303389775","8.305611689797415","167.5118033684346","85.43465741701988","105.9140024170148",".9580346889858739",null],[null,".2118931783941074",".9624398109733144",".6941296760435279","261.6072081920395","104.6305399268705","87.9645609431324","1.043863483157295",null],[null,".2799039626705283",".9299232567248895","4.437865510269253","146.4488295341891","234.2844507794636","138.877389280815","1.09909038857735",null],[null,".2177386670292266","1.080454852510021","18.89920395708306","169.7281252926504","275.0637036109653","135.7656524974794",".8775949942900777",null],[null,".08529518161804589",".923881069141935","1.594547292100143","4.232754429077562","326.99288803287","223.183352310814","1.109890084467463",null],[null,".1408606857719559","1.060184676479338","11.18684624402307","350.2643905390815","103.2316630089929","169.3745305071219",".9028836522512784",null],[null,".6247612028824617","1.032640926210479","44.74347343659536","171.4857898405115","131.8642711912448","301.5862499547086",".9392475567454877",null],[null,".5030806976207668",".9502447457135079","7.338634951652844","1.626037579233826","303.9784725238728","234.8124848749585","1.064022614750488",null],[null,".2986400816955345",".917129490464324","1.652641515819469","180.7427089143033","229.6518850482186","123.3705354426726","1.122168532440367",null],[null,".1331228897734437","1.084443279979538","9.932122275198765","358.2040355824932","240.3534672112071","14.04825395215681",".8727579450771845",null],[null,".1121831190645693",".9257667661817472","22.70947992917445","175.3987268362568","223.2047102320881","137.7729817616981","1.106500704343526",null],[null,".194961130609562",".9559102655489981","3.379642815419664","355.7704204320051","67.1285234914566","32.97338901775445","1.054577219335763",null],[null,".2776114156841341","1.037291093960505","24.34508560676411","182.7259150187663","137.4680151538398","18.0968945354884",".9329386816144715",null],[null,".3914119394928087","1.081437620159014","6.961770898039123","40.80299077990037","277.2959462167741","329.0806346434164",".8763989807912982",null],[null,".2511679927037446",".916275620963533","2.556678398008133","10.51978157982516","304.0254315018766","278.783897188515","1.123737506872157",null],[null,".3222977100700186","1.086794766832533","9.937774872020578","183.3056624189785","98.62540207713209","352.3381305555439",".8699269115114644",null],[null,".2407052211225615",".9638669032517866","9.014178999313151","357.5568612722403","59.0583802037423","16.57321378440209","1.04154603978879",null],[null,".03608224885057118",".9822520119589836","7.50526883724979","16.96321634380823","8.375302437990653","34.50082524605071","1.012440904886106",null],[null,".2908488226264646","1.038477354291989","10.4909926962329","6.582868792328216","79.22507156109164","196.8874128383579",".9313405841190585",null],[null,".2075338172707778","1.014290274935058","22.98057546548348","19.5387266813169","59.98181530106061","259.6433965155237",".9648519561888268",null],[null,".09926917952566745","1.099014652090208","7.21345373340517","13.53614005181101","218.0275627413503","353.9357342261681",".8554583114354455",null],[null,".2095888706520989","1.030167070030367","7.815074477746795","13.10110688483064","84.70712339835586","210.2214171306325",".9426328684678053",null],[null,".07820793172196545","1.090970694487601","1.275571614043273","236.6997044229647","1.131786711994858","359.0941316058041",".8649369424525458",null],[null,".025466102041817",".9780405708027736","1.178334328996094","176.2381493464119","226.2348825435541","25.2662577484474","1.018987292864346",null],[null,".1893121572756375",".9987522132702247","26.8979696400092","14.12212947236923","68.64251999163284","90.32434254502954",".9874552923565545",null],[null,".1765264474946181","1.022306517218112","3.179982378783174","197.747890392586","238.7816596224548","251.1031025642955",".9535256491386914",null],[null,".2328656321686968",".9548600431226826","3.069789746529821","239.7527970979131","134.4766638098917","99.90776071931788","1.056317545265257",null],[null,".219278366981133","1.062063767526543","26.20362391337656","194.1563891378249","268.1319713801411","150.9681390276474",".9004885278107618",null],[null,".09018171397556488","1.014412716383529","15.17159748819603","18.77072760310078","343.2985445224599","3.533302799965941",".9646772723975564",null],[null,".1418222166743807","1.090356931214125","9.974846239899055","23.41044713217045","254.8780501137134","330.158760688268",".8656673563380821",null],[null,".1659610827038811","1.083801903287424","24.45450455579714","198.4620233859706","80.54975221481442","341.4699120579718",".8735327860456366",null],[null,".3031224605805242",".9403860605286934","47.94933295190818","19.96976073063907","344.046233765794","201.8563365509425","1.080798664951346",null],[null,".2210378819437936",".9904321002249017","36.73432188043437","18.90487711975332","71.7658327547303","289.7303123085605",".9999240465960726",null],[null,".2353672886076014","1.056053134672243","9.000629374682482","191.9578491734045","116.6483653347499","9.213652288059961",".90818728829628",null],[null,".2262285663274974",".9480361070645569","29.07522749683548","193.5862144965111","153.1210308629113","228.2030597835034","1.067743057957826",null],[null,".1766244771618498","1.034364047232634","12.62472284050875","17.34329802713938","66.52467372368488","222.3127501562676",".9369015311847627",null],[null,".5538297581933043",".9611716954521732","4.427445865531508","341.0016066721579","350.232928389648","287.9986020716659","1.04592998596889",null],[null,".334591771877214","1.047286394767019","2.351468095068972","195.3130786881235","118.2775780217697","29.5410140039993",".9196146503430612",null],[null,".1772700091097896","1.080228229668627","1.977397114702886","32.25043324506279","88.93486178530456","108.7303518450706",".8778711769009006",null],[null,".5766878324423313",".9301601723661373","23.30140549146136","23.20096015867355","42.41401636486213","71.48210098280303","1.098670501021165",null],[null,".404384291432914",".941745872873084","9.632609405277252","31.25548757551816","342.3267746515576","142.9505091040491","1.078458618524677",null],[null,".05900209743749384",".9798800518069222","11.90505931970822","204.03478166","242.7696545357819","332.9566409127294","1.016119297226123",null],[null,".2352286108046304",".9417637946138846","2.475813302982094","227.6352135721397","204.93806646239","47.84914090302097","1.078427834111457",null],[null,".1889239974197023",".9899864762297516","4.716482820287499","18.72729616357168","75.66543646059685","290.6277554255299","1.000599268377822",null],[null,".3165722568321313","1.056816648051415","15.03796608250737","209.5152152124312","110.5667098917913","6.479400448211717",".9072032653488781",null],[null,".4244153977584301",".9336299793798569","13.70672020748646","30.5539623785584","327.3817468947157","198.6796004086228","1.092551432640176",null],[null,".2780382187218033","1.066568989464965","5.005565511670207","83.10878862750397","339.476403030416","196.8388578634503",".8947890181165256",null],[null,".3274096612264535",".9137607968933592","14.07841272601896","208.367611902194","127.6414755027873","266.8668394762204","1.128379770457377",null],[null,".2995087020866968",".9295570946671714","10.52288114842847","209.6804192341565","128.2687494784286","227.2488711395695","1.099739866963069",null],[null,".3642201763152361","1.026410643692074","2.304538023838214","202.3733077469156","255.6158663684494","199.228024325914",".9478123286534814",null],[null,".1276080518609493",".941274873986763","10.38313846068228","207.1071247749606","227.6523504157176","61.04775106666831","1.07926818493276",null],[null,".1977332966168839","1.082708017899275","1.512920791713521","27.48829613637962","95.63495357475911","100.4477959608527",".8748569464563403",null],[null,".1045659679253509",".9521798187634833","11.65126745182722","207.8925274757096","137.3034344760088","146.8832982576517","1.060780713892469",null],[null,".2680140250381544",".9084945226447348","13.52224616063778","30.80301884873979","311.9361487731447","266.0642917703012","1.138205301156942",null],[null,".2874664174369238",".9309655284418586","6.682003447415324","42.73997419568582","51.94924961366536","43.89941241669233","1.097245158915196",null],[null,".1343379285130578",".9577759006483819","10.43093658533205","219.1897262008707","227.5063446467996","12.12097534071798","1.051497431251782",null],[null,".308625840446375","1.061509138270983","4.844682641493079","42.32533568250672","70.68649262418448","130.5676059991452",".9011943660782379",null],[null,".2613872196510112","1.02522225937219","1.026162321911239","76.20963271211026","265.1343621540144","30.37334333221187",".9494607882566376",null],[null,".3338272465015389","1.072755879857492","27.98784507899934","66.73512026913659","274.2326766938912","320.8476927069592",".8870594328603454",null],[null,".109726545515529",".9621077863000911","14.15318729654337","53.11434877645667","318.2747596036279","97.7628432537595","1.044403887783159",null],[null,".4843844006286314","1.062434806525345","29.58478561986735","221.9956785594627","244.4659369559109","63.44968013840352",".9000168463694062",null],[null,".2030293867149207",".9652075179748656","9.756541608863648","47.80344631985122","294.0476038480088","135.4126006534923","1.039376826998919",null],[null,".1301829433167256","1.052381459237901","5.625170417469794","202.0006922781822","272.7228476991002","166.6640083391333",".9129443216174911",null],[null,".2831764564346088","1.015072912385264","40.95382228855721","223.0157681190863","144.5822291081576","22.08679378281171",".9637362968710924",null],[null,".2118451019645969",".9449338220171156","37.5178942554608","227.1790585157126","236.8836117964105","10.39060983732904","1.073005586145495",null],[null,".1575697176587553","1.012723599234151","7.706232241132484","75.78493412043137","21.62276839369638","252.9435187527985",".9670917498169735",null],[null,".08842488430812215","1.040272494204383","2.194727993204879","233.7552424585867","79.09477087579356","13.15591153625799",".9289308811046253",null],[null,".1526074605175921","1.036028544783727","1.571532206363494","64.98540398348852","321.3676369881416","305.3317270751604",".9346445801899077",null],[null,".4511361614080013",".9284875263190963","29.0034507562205","230.1815527919208","136.5370859635512","264.2678973785814","1.101640677043448",null],[null,".1854152871999722",".9558374525886052","36.42392883509465","228.4758383153204","160.5737792591588","214.4976078264013","1.0546977236429",null],[null,".07648559593518101","1.09143699405564","8.866186206004018","234.2748968064214","332.4204886768949","24.24038240372272",".8643827052720017",null],[null,".079027678324933",".9663299531701893","15.18802905722496","61.30692568240449","35.70599082254255","347.720119005881","1.037566429388358",null],[null,".3180913988052971",".9655528266319224","2.550248612340224","211.3248471694175","152.3316210176188","123.4127360828843","1.038819311580068",null],[null,".109885278718025","1.066527742006102","3.599734492037159","77.16319340669773","73.27505086719607","110.0567042176949",".8948409269351257",null],[null,".09574668409084609","1.095273656121762","5.443761964310632","231.2134755452033","266.4775741798425","81.97851347581367",".8598448826107755",null],[null,".2419804440263363","1.044779153265015","16.78518975802716","238.6949917291416","260.993575018823","141.3161126639324",".9229269466529171",null],[null,".02029131557051192","1.028048353896928","12.28654503210676","240.8810280884534","62.48284902781695","36.16331992538134",".9455483929716868",null],[null,".451961680246678","1.071500040046659","13.49611897876357","240.0207093481671","247.2525320687943","61.51457659590898",".8886193920681102",null],[null,".4244456356850028",".9955124918466254","16.86132242428952","69.00189668498594","62.13905888822429","212.1253409438688",".9922794629097114",null],[null,".1128314718820365",".9129388838748591","3.28294368812897","248.0741736436418","173.773094648464","145.0874736611026","1.129903922974128",null],[null,".2014128189126945","1.074110818742341","30.58272527010363","241.7624787732526","114.349797400451","272.3591223357353",".8853814883993661",null],[null,".04724468236644422","1.06139130988767","9.852794789966037","85.2418115423304","76.28388903785545","114.4290692835516",".9013444368690665",null],[null,".3662394622989413",".9611292395905908","6.111305862354013","45.20138860073265","81.15976211358179","294.8398097509011","1.045999289365759",null],[null,".2935717959933339","1.07026604527478","14.4758319838116","81.12520263208515","273.5133930990237","303.2248809243191",".8901566748333825",null],[null,".2141791803413663",".9449826292482014","7.196127602778533","76.67339895139123","300.2227464126836","139.1868246856605","1.072922458021621",null],[null,".1232014937073736","1.059980726811961","8.695589112894842","236.8224323080258","273.1636606269932","119.2768187263126",".9031442489866125",null],[null,".6328946535117472","1.078269659029911","5.603746881720062","236.8248868494661","153.8650578174993","295.4796458043712",".8802641125114534",null],[null,".4581079917494899",".9528192413971168","14.75744263109198","75.23870195860626","303.5212256382341","150.8948694153049","1.059713082134246",null],[null,".3220539679885931","1.065147042899525","12.88267090270721","253.3463727991679","259.5138809953729","86.46147808026468",".8965813998190826",null],[null,".2347034793178595","1.01687798205723","11.61679729227029","245.480104436867","245.0171773336121","200.3834462500523",".9611713299379609",null],[null,".2274566946079394",".9043344460014736","23.78988736368807","84.57370821051686","350.0483708432445","156.8159011690561","1.146068203975322",null],[null,".1644115005866535","1.085970313939938","9.150907928981134","254.630442798327","147.5721568957496","212.0140835608557",".8709177533282472",null],[null,".2045375828608136",".9917738467640028","11.60817020172342","257.3129065692572","129.1128988352465","32.9002200609558",".997895573933647",null],[null,".09996425459150277",".9883041005465671",".7665780255787691","100.6522040186235","288.7870467254781","25.07502524123774","1.00315531373923",null],[null,".4669446820910841",".9634735349539708","26.83176846399573","249.8595075673823","169.523186165003","222.83595551341","1.042183970665069",null],[null,".0380135029228078",".9809664688531226","2.703932602502349","257.9570028781369","176.9472416008614","346.6363137887961","1.014431741655294",null],[null,".5135108859039363",".9611769881898599","16.55783328075304","80.2899545561167","52.04894460339593","69.68769901575764","1.045921346833484",null],[null,".3753348807647365",".9328200853327876","13.85928345346423","258.9667056329184","235.6808877329585","343.464359707328","1.093974605686769",null],[null,".6265652909569287",".9052649525569664","7.010448449372784","341.5653232061121","104.0211643292272","157.6671280114052","1.144301621903853",null],[null,".1663796516600448","1.030380538918797","14.34715967445369","246.2538336829273","186.5380894619214","185.004705956888",".9423399489701251",null],[null,".3302799926636316",".9697822454372856","11.15837895300153","271.1558126589327","115.5798666408326","274.7915343771006","1.03203097103169",null],[null,".3443316724244696",".9724218302225242","3.980403802242583","245.0968876869445","244.1843179234983","269.9681873724173","1.027831738195725",null],[null,".3040997645786409","1.056449237476212","32.53405320984123","95.50433204523603","283.9479694833205","305.5805700830627",".9076765654944564",null],[null,".1775803097588183","1.057353612207123","17.69223491075259","282.4526332535448","95.97940530251307","293.4323431399978",".9065122848981096",null],[null,".5101108913164959",".9461617756563441","2.136135103671966","273.5713650866813","236.1710933245981","280.1750832317103","1.07091740172802",null],[null,".09968141358963482",".9557329245747301","18.78641983355949","276.9338509484299","212.6225077521251","149.3607932422771","1.054870755987669",null],[null,".2307816129712486",".9169690583201741","10.42011156434851","272.7070129607508","221.3561360890493","35.57080528229951","1.122463045831716",null],[null,".2901452012990132","1.083876424490372","8.62650208620115","293.37483066659","101.0081308998378","251.5022330158812",".8734426988452503",null],[null,".2695004017249974","1.028264884854516","3.74077252109031","116.184584519859","279.5816923506991","333.3060988524403",".9452497397893653",null],[null,".1913306792849525","1.090589681311745","1.997228383934961","248.3997300933329","157.2307516166107","219.0952199178761",".8653902492627896",null],[null,".3002758047697153",".9947024902374346","16.48702782214949","117.1482072002915","66.33293330511407","175.9755652453511",".99349175237341",null],[null,".07886886538097915",".9753583249412664","17.85585913814294","310.5572097125385","206.0961492177004","268.8489958931578","1.023193520335349",null],[null,".1169811309230625","1.045642547171312","39.6251110060143","308.6295758859359","93.7582108777839","281.79972908096",".9217840824060815",null],[null,".3741955681179931","1.011731232193737","17.97023162341235","42.48245106374539","125.793215103472","287.3023840976062",".9685149715836862",null],[null,".3810028362054499","1.024860271730314","16.10364461021654","140.2177769670174","301.5563185987162","305.0090562229669",".9499638667174395",null],[null,".3143061132085785","1.052077478551745","6.368988775173956","115.7383509384753","71.66045851875693","89.28426742900183",".9133400208320909",null],[null,".2500668888170235","1.05462344302999","3.850922701042689","315.1165123133829","99.54492158024249","272.2116907389083",".9100346790436155",null],[null,".2148767008754533",".9797962719260912","6.58805998661514","294.7762981697747","134.058823716291","10.56706167684008","1.016249628667258",null],[null,".3669923802980548","1.036703769657142","3.293080382364651","305.7684741581081","155.4307824109362","253.3032014849537",".9337316012157231",null],[null,".2153133531943325",".9829203925263336","1.931130417292181","119.1723156419499","78.75562660041209","193.3278671192982","1.011408398925591",null],[null,".3979783035255257",".9513691671937698","22.27580185046283","281.6310024872284","244.2066277335703","106.6881117895145","1.062136822655134",null],[null,".1940923610837343",".9897095954535567","5.298809579224153","137.6374462848658","58.04948211237461","185.1198471402688","1.001019188643945",null],[null,".1699101678466219",".9395068607560155","9.601576200764166","148.936587705451","317.9843504307049","44.78925304207262","1.082316152884775",null],[null,".1582251156133266","1.021101967468385","23.21438724165007","130.1827391764154","277.5337528137175","319.4481427401117",".9552133959769489",null],[null,".3416667235859262",".9219100050684911","24.01629016726323","147.2363437253979","316.4398437609469","256.9521163781181","1.113451440827744",null],[null,".239037243960843","1.067860695909554","20.51664646968243","163.3525813245471","273.957993780339","230.3416564852975",".8931659761497712",null],[null,".09588348143387923",".9910664759055726","19.77327892261061","336.9512374857831","162.2579521296879","261.6357907299965",".9989641322084453",null],[null,".285147485063832","1.004461846102222","10.32102817418848","333.7353466240494","132.646017800683","300.3448439590113",".9790478238427354",null],[null,".4402362943220327",".9357999662593068","9.443299790088808","356.5185625355747","119.6453471827539","76.55656936555407","1.088753429710179",null],[null,".08757784417450973",".9553520461810846","15.49272208736855","162.1200748178712","28.13075903616734","267.7713875139646","1.055501650412405",null],[null,".2627420347589595","1.0648957553862","32.26002142681399","340.0076959055741","256.2721133914731","79.34420675854889",".8968987731416586",null],[null,".1711640390822839",".904629800000471","2.161109610229945","347.0466991410943","173.4226369977508","48.84234246050799","1.145506977388508",null],[null,".2155699783969388","1.079213312270521","8.129687588234951","151.3305709009024","325.6002556760141","176.2034642743192",".8791098238290734",null],[null,".235914728083281","1.08312079117698","2.710918353032773","333.3846733212969","102.3842215446491","209.4169671047088",".8743568870470905",null],[null,".1270559349567321",".9680329447741903","1.269343543960051","349.4793697560842","111.6315788284178","352.2976498300624","1.0348296585359",null],[null,".3655069785104124",".9148142372267308","6.709731954299251","258.672230582045","262.9911026274015","186.687469727962","1.12643127898664",null],[null,".05338922664001847","1.013688945222262","1.671587362418276","343.0116382615324","243.436340287264","132.6973177406476",".9657106222343786",null],[null,".4069998558715691","1.068700264493472","11.06933152796777","344.944434493476","251.6028195957932","63.49280274252298",".892113679042278",null],[null,".2274767494926763","1.064364843218696","5.134724613489658","345.8879259973481","270.4938023194813","1.98155750039511",".8975699253052228",null],[null,".03560281923869795","1.032129688393645","13.25084259873639","167.8834391354791","255.024939180642","274.8291064714846",".9399454898592228",null],[null,".2052698309149186","1.040029287433222","7.153867144423612","168.4635561605638","273.2347216305429","262.283837084275",".9292567404196466",null],[null,".2741588679442484",".9641234746687145","19.81337807539542","336.4487495376194","197.5792662022073","265.349274649193","1.04113030492081",null],[null,".1675955306119199",".9670782875999479",".5187592857803249","273.929347924792","305.003151272204","205.0383938098984","1.03636234415444",null],[null,".1119020122106005",".9915871511038959","21.93172198407495","347.370579771489","240.5939370662302","160.3223201255327",".9981774123101301",null],[null,".3187373831226695","1.060546082002564","9.589253765149241","345.5785777303486","254.0251383170346","71.86327116588635",".9024221739497376",null],[null,".1181025022793081","1.028341250957962","13.72938977586309","347.7111200303941","137.4670784221196","220.9758317184738",".9451444483321004",null],[null,".3658300499748741",".9956380533484661","21.75394289078333","167.0639253590094","358.6085200204049","178.2735818776847",".9920917619133365",null],[null,".03961587370102201","1.045569506041376","4.877752304850437","348.0880948056787","33.08857960386442","293.2525790010687",".9218806747316725",null],[null,".307758699321757",".9180685994127967","8.823060379582783","341.5086268808755","228.5885478865846","299.3719926178118","1.120447143154845",null],[null,".2170919972867272","1.060542673705473","11.77391724308291","173.1766919781472","85.44265439355387","7.876526664849601",".9024265241618946",null],[null,".09910203341316816","1.064510271060989",".5365026311532126","66.87188005391261","214.1004039796332","353.8331009733448",".8973859996031619",null],[null,".2518632793925918","1.068486532257881","17.0849280248736","2.399904468425504","249.535176504608",".8086061127113694",".8923813702745931",null],[null,".1351698977418174","1.054750179029345","17.2206402032183","176.6851437786607","265.8216114928551","231.5914182234785",".9098706629208999",null],[null,".1974258674097776","1.07150577426371","5.134503528196555","214.4229196081004","25.43265352227612","15.78893899619622",".8886122588383784",null],[null,".6356353159755052",".9152409731756287","7.165625636175886","344.6893733649445","223.6275171771213","65.1189459259643","1.125643564003063",null],[null,".06401715036201602","1.047003792998124","24.34621549409119","352.6041891057818","293.2625802436391","17.417485221002",".9199870018061379",null],[null,".3941751404703315","1.028063369288843","5.432200074505054","178.6883539734121","293.5014797356546","290.0052843245101",".9455276777220246",null],[null,".199037704607834",".9642389791722022","9.59827686327761","180.1655540625002","65.38882587919218","177.0806582525404","1.040943237751513",null],[null,".3214731645989111","1.047639497664831","2.172017122357727","177.3222876050555","294.0592928605672","234.8124645976364",".9191497606040788",null],[null,".3627223663834805",".9369752894405852","17.66420139424668","1.94768014655884","234.6253179252445","91.08245683864756","1.086705506271463",null],[null,".2156495602505533","1.044626549180276","5.827675749868887","186.2798569469843","78.33118516545805","25.27268926313124",".9231291924684606",null],[null,".2672911115645605",".9709353669685558","21.71459839484209","189.5400964016588","309.5545862669471","320.9581001983637","1.030192995354868",null],[null,".05936751520642668","1.065851247461008","7.452951286950682","346.8241484063595",".3942663075804789","293.9268094280487",".8956929938416636",null],[null,".1659770523700509",".9773954006345145","6.282879296935699","185.9005683160875","37.4940394081839","184.3585393104914","1.019996396263286",null],[null,".1770893462080028","1.04767259142144","22.33882584921921","17.67011864794215","127.3508236768152","181.5492106694677",".9191062099588176",null],[null,".267313949676905",".9248631743607709","3.213677900560167","251.6540577350982","336.0427247871669","267.7171711023916","1.108122678028462",null],[null,".2465666579039458","1.004858009371755","2.317408901827965","260.9914067608315","221.2884846008558","282.11109955516",".9784688994291457",null],[null,".4412407708762878",".9885079840592615","2.26397212949355","21.9209016292746","124.9064016408689","305.3080938005452","1.00284497287304",null],[null,".2469519638394131","1.012295482282737","26.09744089930333","187.8062287715841","285.5442732323581","279.3501962406721",".9677053139650985",null],[null,".1988841770152645",".9726519060293066","1.136481711234797","176.1783593113012","310.2765213813004","325.7834868174251","1.027467067294606",null],[null,".09946949957408259","1.063488808184712","6.760996650940087","13.29032797980729","64.94912018785659","219.3121577826534",".8986791959412506",null],[null,".1910414157850117",".9448481818038307","5.831134235830262","5.965289685167307","238.216261562408","216.9197309180721","1.073151473883739",null],[null,".1128082831615303","1.098188787967952","25.90386234056307","191.5429686520978","261.3206340358317","159.0241312068159",".8564234803709185",null],[null,".1959642216734668",".9889601082373006","4.179294788107442","20.48224209786914","137.125505150148","255.5462484369071","1.002157343569634",null],[null,".0575685539697174",".9850632652870203","9.926081273230709","195.552987504327","22.10715107405576","186.2876942851906","1.008109919814843",null],[null,".2078535943687071","1.095334580139288","18.23380408658099","193.4598668514667","101.8869014174987","286.8391897864439",".859773144973884",null],[null,".09933817810017512","1.036916306002502","3.332520427149444","192.4309624448113","265.9678349472899","239.8823074270233",".9334445360040656",null],[null,".3704979839460973",".9612365950366693","16.4816510918171","7.599595363915908","201.4642602876896","224.9808389031722","1.04582406104197",null],[null,".3906200478214321",".9212242761677397","25.76448694688133","14.11209334328819","227.3994832127507","94.16383724883107","1.114694896827943",null],[null,".3732948390272062",".9279001676856066","19.40250398405208","201.6250395938881","331.6519772905646",".5798146972471333","1.102686846506417",null],[null,".1873364346938403","1.006949922284156","5.680986547617307","196.2073604728212","74.99618421476391","81.08385203346914",".975421367128236",null],[null,".01963217449232453","1.021762633403988","16.33131689608999","19.90954555268481","199.4866096296669","130.1860802070752",".9542870923899415",null],[null,".2945200296241043",".9651111003008275","4.717753099741175","23.85051720849059","113.4070675674161","338.0585144675686","1.039532586474124",null],[null,".1581889970084908",".9845872168856531","5.164549747991886","217.7984268905247","26.47258777114791","149.7803484456736","1.008841140643072",null],[null,".278785210203446","1.07972630350862","9.28725233292948","206.3731466033339","287.3611793289845","167.4669740260762",".87848338442694",null],[null,".2708689134785177",".9476166209713112","13.19183262050679","200.1882256430635","63.18486638477345","181.3705275089868","1.068452130990556",null],[null,".2377221162036363",".984854064723041","29.51168378560986","26.54524277006684","149.4701221486646","247.6120655169858","1.008431147655367",null],[null,".4209466801524397","1.010464390921319","7.813128028964968","35.1352212952221","109.2486960487427","271.3424766255667",".9703369148921087",null],[null,".507104330482002","1.008041139581872","11.628493697481","4.68666253850007","180.1187213307454","238.4612564063783",".973837936870959",null],[null,".2100999173595837","1.087208697119571","19.34658143396976","205.7889976969894","73.94494026586156","80.92349569368969",".869430151111041",null],[null,".3472536239225132","1.092536256317768",".6647070329813065","215.5426509608004","79.78188316086523","275.3039627715856",".8630784772876364",null],[null,".404679396712757","1.085567391206042",".005984961113011439","125.4481286731183","163.7271448958633","283.2897463853799",".8714026773289975",null],[null,".08860988405028707","1.049420629463554","14.42432362310667","215.6618322023309","101.5766161402766","341.3101630748373",".916810709937345",null],[null,".2752294535637149","1.026557514996236","14.90503614861378","218.5846496707554","288.1512211466529","227.1712848146925",".947608928281559",null],[null,".5800476509591743",".9246631316055712","7.066035730820245","31.78550770305415","228.4483692645246","190.7570959398932","1.108482296404273",null],[null,".1721090831003311",".981856514529818",".2831935392216597","313.4003376270164","321.3176969326397","121.9021018754826","1.013052691978836",null],[null,".7103083602570518",".9070299018440583","9.062922637895038","33.54239901104478","144.9444010524688","298.4461242529362","1.140963278491111",null],[null,".06832959502207753",".974202503559912","38.36723840551345","35.62473346537741","153.7406471953039","239.7541159222871","1.025014978888136",null],[null,".4170538129541402","1.016964436903757","3.82479603454628","35.38785187957225","243.8791832605984","31.16452051528765",".9610487649533633",null],[null,".1812148092575809","1.03784388770143","36.08845195924659","38.03675314764933","243.4469035940713","95.87511775300669",".9321934048116669",null],[null,".1619139442426525","1.052168500093734","6.396358060845255","34.73201391237997","87.99422138077018","201.5317081031892",".9132215058499262",null],[null,".149844447497499",".9747071073851349","9.312855728094284","38.36490623752799","213.614526853818","166.2046994369449","1.024219109758124",null],[null,".2794187926177711",".9566187542778799","9.81388004100155","227.5890866041569","11.57222017662756","202.4646245880385","1.053405878536771",null],[null,".1041523260235437","1.065816711824035","14.77489059247291","37.0206919374256","280.6605056981116","318.0882732994035",".895736528876787",null],[null,".3208652418036851",".9796080763216708","14.22161552148968","212.6634735034906","31.94988065035925","126.4912131118428","1.016542495127852",null],[null,".1024782189052299","1.054247763490807","21.49856792723189","218.6239223148696","249.1027691610656","205.2356650236386",".910521156524699",null],[null,".1138315199637971","1.077507890095529",".6773054714065853","19.62440535228214","118.1683437162659","144.8294513632151",".8811977618569466",null],[null,".3934555636026969",".9991947099814527","20.29197374148613","49.9071319652849","227.2408921487628","62.29110692144629",".986799418175075",null],[null,".09652956018833175","1.063791229356778","11.7226832090753","47.03052530327069","76.13825617976882","176.475631607434",".8982960000309052",null],[null,".148175099152653","1.069988872807811","4.156559183912268","222.4490073831587","253.4904279485467","181.2370056089367",".8905025796908753",null],[null,".3661665028265767","1.086414555409712","24.12143400256439","218.9381782624494","80.61530563901312","277.3676918841052",".8703836226500093",null],[null,".2855292556337954","1.007991988671206","2.625728657146266","35.742539083114","110.7444070399984","258.4427599766855",".9739091660158248",null],[null,".1733544060155315",".9941393433053649",".6123082491740077","217.4221635784112","81.50022579003328","71.86841912028116",".9943360420506758",null],[null,".2623546125441247","1.029090538569812","10.01143584426751","28.26528422894888","119.2821911474876","220.5137867530405",".9441123873872981",null],[null,".1224557169872526",".9727145634505105","2.110859088071921","231.4686243059604","279.4871703224394","291.5940549223226","1.027367792436674",null],[null,".04792341314702869",".9698740999702207","25.75913336138024","223.7913741784045","8.339076429542445","199.3403302481102","1.031884362600837",null],[null,".07862650270394111","1.019469922874001","1.326376722584113","222.4676273755828","264.9434586338652","244.8207850040718",".9575080805669249",null],[null,".123439269686857",".9000612751351034","3.933101968164126","224.6501014140561","355.2885078060224","347.0502294801202","1.154239569944032",null],[null,".4609587746735707","1.069139884366177","4.084302348777164","224.9723663933616","289.2398112700359","182.9384073773025",".8915634929670456",null],[null,".1605465023297944","1.066496407660964","5.398570478284347","238.4211483178032","61.70548456168596","326.1060629441693",".8948803637211266",null],[null,".252100826165029",".920570753470032","9.838865964918364","52.52438254521865","124.2175699325234","13.14416638658496","1.115882107618005",null],[null,".1428087454659846",".9267226917347925","3.423708636688146","53.46696892927196","145.134650731696","321.9272671994987","1.104789092831719",null],[null,".3446401772418726","1.044991113759989","19.80664259530779","77.64664551337511","80.75361309858157","198.4747132904939",".9226461584294273",null],[null,".4825476853593628","1.029950303939428","10.28052576161147","16.55545381590179","181.0692409902879","199.6664233812893",".9429304676703111",null],[null,".2179032741118513","1.095222896604946","6.10118132843603","73.22431342644644","86.11893863282364","118.7824330803556",".8599046592324234",null],[null,".2077413183854428",".9289986628299823","26.59343115079761","225.7531139241524","314.9905802238483","343.9831527985598","1.10073161548725",null],[null,".2154096167266049","1.084709627771239","3.464416017370552","237.4879458407549","84.38171290072883","276.7821240797084",".8724365094482317",null],[null,".1643052080773935",".9366340335609966","2.502780990248002","36.02736983697855","249.4441042905967","190.5323026763411","1.087299460374688",null],[null,".1479906011511541","1.004723558648621","17.54878489071987","224.601495200942","301.7621333073456","230.0048190769236",".9786653120408806",null],[null,".1283787969316715","1.086160003029608","3.918495689872357","39.04146681535725","310.21883514489","259.4129587513156",".8706896151410556",null],[null,".4311491421129269",".9317106511554586","19.87663933934362","51.75561097440954","229.5968277347797","172.4771001728393","1.095929162143633",null],[null,".05479256851894364","1.011949026517492","1.93505084931886","234.1448957334911","96.36115319767259","30.21253910271998",".9682023189088846",null],[null,".1539252235133515","1.021991468179441","24.44907448730322","241.6590164351841","50.6910987219417","43.28561029293751",".9539665977653132",null],[null,".1456407822147283","1.081088790723009","15.82420063284804","56.21669300519367","130.1023406242859","93.2053775685755",".8768231898261063",null],[null,".4358828081861728",".9931042878342227","3.257690973568296","65.22408492839777","243.9016968539102","35.0499168322895",".9958909559107002",null],[null,".2639297208423333",".9684878048738953","21.08859806299865","66.49170263574811","131.5865669462413","250.9799602274903","1.034100716807274",null],[null,".1057981176060555","1.05196682671016","1.788028042886125","82.4861860234674","53.81663930016045","183.6285957811583",".9134841300501971",null],[null,".03536347458277438","1.04665217859252","14.95069311998006","61.73035932572233","18.09605207609879","237.0628404330736",".9204506341219896",null],[null,".3230178178087278",".9487991692070025","18.26356112166054","68.46773866472171","117.3770909695223","318.313160487594","1.066455234627465",null],[null,".1721956716360672",".9464514667385211","10.86246102971869","65.48888510411292","121.082703327304","305.8177573047622","1.070425757690125",null],[null,".2710327087509819","1.020489427483609",".2760515416695584","43.9527718056946","125.8513229409186","216.0576520259485",".9560735629356985",null],[null,".5422852473771069",".9592966801524863","16.93300040438756","66.982719132502","227.5290787774665","71.21801944218497","1.048998003533123",null],[null,".3177570302024025","1.056198039071268","6.268925922357446","208.4295954107222","86.12247125895928","86.40708272847748",".9080003974676482",null],[null,".4232199351873998","1.057211707800872",".2271847307012386","58.46682677550892","117.9512380558244","174.6743301961555",".9066948061515908",null],[null,".1067804568960044",".9895020793678645","8.881934104983943","242.9487514091738","55.39983430294552","91.27176096385438","1.001334102294029",null],[null,".09165701449557169","1.079558395016329","25.6475990620666","230.1110093853872","309.4455049193684","98.45100611145459",".8786883440057363",null],[null,".3010577371053773",".9240789495540084","8.03345862931689","55.59627527881909","164.0447085994161","320.5104164922083","1.109533599099926",null],[null,".09889673744885233","1.098009752079139","2.761539422335897","67.24113793297511","349.5165000526703","190.1104928982374",".856632954998361",null],[null,".3301109914083284","1.095990054862227","28.98029491933517","73.01182097958105","124.6955829806358","88.4972538497119",".8590019582852895",null],[null,".4481927866662611","1.071410205650691","1.854017306940061","240.4017655267651","56.90355475316745","81.54274345856479",".8887311563474194",null],[null,".1614049802023185","1.070066902436083","4.352283943474144","241.2312107703128","54.21996657464116","334.0209012019635",".8904051778578213",null],[null,".3459285471431249","1.096899462129484","13.06140959434512","65.47944310531888","255.5573623888326","65.12791128335201",".8579339196261594",null],[null,".1088643515765612","1.073029014388645","3.165333193828398","253.6014849202382","229.4699715263314","167.7290105170285",".8867207591523169",null],[null,".1741221431824832",".954190184490986","3.725904725779571","258.4699104348701","292.1576185945669","287.3206490497738","1.0574300712688",null],[null,".03385543371344597","1.049596208532178","32.55363220269299","69.53386605731525","77.13918564514746","171.8494889238898",".9165806699890139",null],[null,".3195247459145679","1.028994138437823","7.13856715530572","247.9927806022145","78.35195550335749","337.8597540978576",".9442450626187567",null],[null,".107953869583588","1.051287232591261","8.17473328114162","57.5129029875908","283.4233188717678","315.6340940103473",".9143700422057963",null],[null,".2347855577233181","1.077699272768072","10.81942233444966","71.39080620257265","269.3687533398937","267.8883194640617",".8809630416995965",null],[null,".2432739045018903","1.05711214672701","7.345652082686469","253.0620837603203","82.69630467352187","297.8788950967473",".9068229008399868",null],[null,".1391012485348435",".9296479921684108","4.252429504149454","268.7867935955178","32.36958560695444","190.3751706207851","1.099578578233563",null],[null,".5831982244272562","1.086132833347083","5.943567232175258","76.05960930014292","126.3827855651895","306.7239497066463",".8707222858824281",null],[null,".3026621498515351","1.006987723493036","10.88539556824703","71.37622546295187","254.5354348923088","74.63761454664358",".975366443282116",null],[null,".1895094871009346",".9963964394494574","14.62845155272838","257.8204397774633","289.1495941463112","224.1994662152883",".9909593129342087",null],[null,".1600804361890943",".9335590506118323","11.62127253582958","77.80731288250584","241.0658757248412","160.2905198793329","1.09267594774017",null],[null,".2416678071003548","1.091411118047785","5.049571782484458","63.12169459404838","286.2642833684419","242.2545288055353",".8644134456216377",null],[null,".1644439465293419","1.017858045056326","5.220949580125374","270.5640216947368","267.9922192115055","198.9204637840494",".9597834424025058",null],[null,".110200177004862",".9436467272285283","14.71237335857007","275.2378106931862","317.4013584075735","252.9497876809903","1.075201636868005",null],[null,".1459613305766693",".9725951310445312","7.107472920094627","292.4696839533141","296.5952410297489","214.7491589225694","1.027557035786962",null],[null,".05864245980180773",".9857671655290039","12.84716933685663","109.8339648691487","177.3429520498908","119.5402608403576","1.007030331018703",null],[null,".308624918938451","1.033084267191665","9.055839066775743","104.3630749240954","101.2287430316393","168.1914568076641",".9386430142064935",null],[null,".1886814890306627","1.028892269898456","6.089681593077423","89.94383585315771","145.3004121911606","127.8655530276308",".9443852977759862",null],[null,".2826681217591239",".9129938311705057","1.987560741706849","289.3328415473094","47.32994658035843","167.4019872600626","1.1298019219058",null],[null,".151795057757715",".9546577606082639","23.32623802925432","106.0429876221392","151.0213662780749","211.4575824089682","1.056653297871655",null],[null,".1245650927324847","1.089210581999773","9.979186705151776","287.8986207750415","99.4957162132453","226.0705442212126",".8670343346361896",null],[null,".03432600770925871","1.063836114533687","21.76720399196903","101.045368772624","339.7985543815156","19.83009497563975",".8982391495243585",null],[null,".03893067662194379",".9829603830711665","32.49677739025326","107.537870325417","227.0200251621549","132.0716131308185","1.011346677679365",null],[null,".5841490319122263","1.06059203074871","16.81571467677011","286.3370623419203","333.9096003761721","101.1293692151754",".9023635302130384",null],[null,".1876816078666712","1.032326284809678","6.678447781006282","111.5718261197338","259.4062442017049","305.834477068409",".9396769975436298",null],[null,".2055861100519333","1.095618857064221","5.157575898342323","292.7827250566581","262.1888867403251","87.3761005698115",".8594385425582552",null],[null,".280225756979573","1.080403549389971","5.415747221682328","100.4034172924343","101.8745528947705","106.2326585990491",".8776575041215029",null],[null,".2150358908641558",".9413197631656505","13.0311301547781","303.9185760235463","57.45152897911737","95.90895026777713","1.079190984463385",null],[null,".4984096694928064","1.097102514838583","27.84241941427926","123.6413889244454","126.6016836906909","66.51758972624904",".8576957498879696",null],[null,".1140855373929",".9300588610001413","4.442182317945377","302.7955561130731","44.29101416209024","142.9069786584825","1.098850023269725",null],[null,".1012222107560645","1.02552969482267","9.998093293649504","303.7598167100469","85.58515405375952","310.2495292818095",".9490338732256695",null],[null,".08889912165657519",".9255649387444379","8.03759031856714","307.955289936637","339.2532381635399","223.5135434049976","1.10686264714097",null],[null,".2746671925283319","1.068672611015944","5.911008172394386","308.4570063115164","269.6409676482747","106.7002651894952",".8921483063968116",null],[null,".08300180314702171","1.026410275652217","14.10591383613377","313.8147182186161","294.4423812455334","109.4624591569736",".9478128384390225",null],[null,".3162946039505183","1.044247088317413","11.04031346341619","101.4974243155265","163.4035487112627","92.41585303400326",".923632411329668",null],[null,".08536406895522883","1.087387812610541","23.97903751656078","129.8185253079508","331.7098270417823","166.3065942876134",".8692153399897902",null],[null,".1666061037291666",".9145797474347289","13.77591335907996","310.3977067152214","308.4452124237669","283.1150257546561","1.126864516599606",null],[null,".2262187319463267","1.050116699903188","19.1883707327598","312.9141756356833","272.6075577565283","118.487477066177",".9158992982766392",null],[null,".1601431625318996",".9099869119199362","8.418122205615788","131.4359236992007","166.9585782553499","241.2515385627751","1.135406444290846",null],[null,".07303406107186333","1.078825482191212",".3864887859353316","6.183551031984911","101.2919713930275","170.7814794543409",".879583917014211",null],[null,".1221155084965174",".9023778884863208","1.649009039537174","133.0316999584344","183.076186172551","234.3728954856668","1.149797622812318",null],[null,".3375074536143534",".9464377801088636","3.775631281437008","324.6403209658938","293.9771325572403","246.494347039089","1.070448977241683",null],[null,".02681773892543236","1.034767720130579","7.257777937663126","313.401300327551","98.77779288724027","283.5237461724818",".9363533431304985",null],[null,".06574492517768285",".9856291722895314","3.365364746846116","124.7319533523674","265.1384265355107","6.540750229306099","1.007241822691207",null],[null,".5257807679286212","1.013605920307243","2.168643095096546","119.2178729435707","252.1927033563083","62.72341928455307",".965829277348615",null],[null,".5519201094384735","1.081532611166341","25.17274013548957","311.8493331693517","64.85358953498587","51.5361746844168",".8762835221473525",null],[null,".359077869913315","1.078120992396731","17.46690221826992","133.1183750813974","101.3509352933502","89.6077477028086",".8804461937632058",null],[null,".1518209122541735",".9097038544090555",".4984058565210213","39.4854283217844","318.9913347155752","164.6371939683902","1.135936413993311",null],[null,".04366023324329723","1.091754508684431","5.287510873819618","342.1840844621423","175.68474600","110.0291541070349",".864005650454559",null],[null,".271760523277807",".9031690783083797","2.65297976926164","127.5247931941141","242.4251528909965","149.1398505432458","1.14828709348874",null],[null,".3097575103968214",".9936140739553366","14.15679113007061","318.7763998947435","290.3042024907561","181.807160360453",".9951246227701236",null],[null,".2683935588633532",".9110908264004137","21.17065810273061","125.8349613877569","157.8301116912979","269.6132834894652","1.13334351296104",null],[null,".2391182815354006","1.099493613106997","12.56007418753079","136.5394214837284","275.9798727864837","181.0767847146315",".8548993906475438",null],[null,".3256172625187212","1.055703442843843","28.720905211314","318.8834642003195","285.5181090719454","291.5290335682627",".908638568400056",null],[null,".1044155734448512","1.086287298237317","15.80293721712163","138.1449787889571","51.11842879340039","93.29752452901539",".8705365736272839",null],[null,".3312165137825045",".9813182137750132","19.20021674619224","135.1707957960516","160.4516483997677","140.6245706096537","1.013886369269528",null],[null,".3076308953213196",".9286132771488319","20.18423047314105","139.6573728547087","131.5810689921203","264.5144865768306","1.101416911869711",null],[null,".2504194488551672","1.008864627954809","2.642732649197341","146.7438035314929","252.7483572522192","306.4522782653842",".9726458336000313",null],[null,".4146497208522299","1.092088167880227","8.157124106865762","142.285810227424","107.8448631676566","301.0751166666659",".8636097189488795",null],[null,".2327061010797064","1.067763311955453","20.60433084968942","154.7414875039101","96.47863434237462","72.1876866288526",".8932881689849904",null],[null,".0529082918476234",".9647650013955895","12.20547839908961","342.1880553992615","5.407156945932958","91.27575570999565","1.040092018078566",null],[null,".4480945305606366","1.049874067859254","7.854394549340901","156.0556995290717","249.8288279641265","221.5634734895686",".9162168211556444",null],[null,".2572563041983637","1.052959974606382","11.6855239270427","341.2633677021445","271.7304999587698","93.99608279300031",".9121920426383407",null],[null,".09729586512464596",".9357569600599444","24.02641723762248","158.3425855748502","155.7390845339699","177.5706254436366","1.088828487156234",null],[null,".1177439563675222",".9487374035186255","3.281337744272537","342.3361207015554","339.4361571270202","146.7543898356231","1.066559380537899",null],[null,".2003765271514994","1.047483471088175","15.44704986161833","159.486196794701","133.3024224112969","46.38682043856593",".9193551344378968",null],[null,".2688489143537171",".9880007160986131","4.708794234893978","161.8528433654352","105.5075444384009","167.9481975500354","1.003617406142197",null],[null,".2571075199743101","1.043789407976169","14.33536719864753","163.2213164074082","96.17792887993267","98.69067354262825",".9242399688456192",null],[null,".1369037889510421","1.011016227074039","9.309301052569742","5.543262752818521","285.8406683412069","95.09531785024795",".9695425746509895",null],[null,".2060769168076408","1.014548687335163","3.912162626220093","151.1043227407381","152.4405214924392","86.5392302306611",".9644833482023021",null],[null,".2499257936363781","1.010975574823401","4.533763277807564","343.1743161984663","281.464281537431","136.6533893133655",".9696010545266868",null],[null,".1501624538852341","1.081499862051231","9.519691468462099","161.7440925271706","290.6592654501085","174.2322168461084",".8763233248231821",null],[null,".1832602805131315",".9453163003041443","12.61580692068673","346.593166508518","306.5362793078389","195.1509290588511","1.072354439291515",null],[null,".2121528638405337",".9602680950297903","5.730734149333585","188.8254541512851","136.2284971618612","134.4917636632264","1.047406644015718",null],[null,".1687130710795219","1.038732190491432","8.702386517938502","154.6701727424233","132.8156845155359","67.27737880070835",".9309978710411665",null],[null,".1012625214539148","1.081907066374818","7.540052552563327","171.0024792943912","297.8706647392595","164.1280820834055",".8758286302062583",null],[null,".2901463054953087",".925703569406103","6.577797936507942","165.7455266238469","239.262679696416","66.38260679367615","1.106614015676427",null],[null,".1127349926606337","1.045549881576826","3.865467495075062","347.4392100146615","110.3670230191404","217.0916402345601",".9219066297336719",null],[null,".1092866466350036",".9443679256061491","1.548970789119872","10.71202826252827","308.3097094752363","159.8331475825461","1.07397020112711",null],[null,".1830754230483496","1.093101336856747",".9725492928578949","133.4181950384259","322.2480512809807","155.0293481421624",".8624093090246684",null],[null,".1301220530638145","1.079289918366853","12.50025510827615","355.7987321133119","108.6695594014952","168.5568301972407",".8790162289909114",null],[null,".09370067542942888","1.051219895725138","5.552466724184142","178.2647477194395","300.3047453119464","193.1508090196148",".9144578998453144",null],[null,".3428971441101297",".9119762728415559","10.07729464232784","2.221931845966237","48.73485451235515","79.6776059091615","1.131693352660773",null],[null,".4282641269609507","1.061712560854137","19.33665251623657","3.915322136141215","300.6159360513246","49.73437153194531",".9009353771891105",null],[null,".07756734027216719","1.098124577805929","5.485886112965345","183.121860994872","315.7488486399048","122.1737945863859",".8564985973868831",null],[null,".2910469858221709","1.013878510261245","5.065201957632188","186.6233877291263","241.3312060335654","268.4861253942457",".9654397962734154",null],[null,".05840882326654673",".9920907327021434","18.51935722249891","10.37939017122429","44.70608734003733","336.928543539789",".9974175020008842",null],[null,".2546972017898263",".9005007829909224","8.027226938780807","190.3195730760572","207.7282162370689","128.0849129901857","1.153394647656653",null],[null,".3556928558315194",".9238983003578091","6.517287644630222","14.5826394042961","300.4519475121249","225.4192242111978","1.109859034513486",null],[null,".4296394720848356",".9827157484272097","2.80954767783071","241.9040831346626","178.0456060136751","304.8927022420566","1.011724344105202",null],[null,".2187599708896987","1.066211863187031","15.98778956308904","7.130576529947768","91.23949506656325","179.9885033905115",".8952386183876645",null],[null,".05616508588296406",".9701032664689078","11.84393357381574","9.959617282911944","349.0240765656649","71.33629290776227","1.031518742720066",null],[null,".2226378182770355","1.042746501299416","3.795515037137227","74.70083644136187","7.968621379362793","223.5195817068198",".9256268883952338",null],[null,".1684186460110697",".9813828764855641","8.669586936215909","18.83136929373127","40.67546486867965","336.8297457670099","1.013786164401812",null],[null,".7028622313905744","1.018937560417865","14.46273013473036","358.3403022735596","49.95954494737013","230.5412590512953",".958258579834678",null],[null,".1903414779044626","1.018462811548124","4.724112488874352","176.0384064555854","158.2974111734159","47.31198106399896",".9589286855826243",null],[null,".2329104168064196","1.068388281895051","9.454351682015528","190.2002858964058","272.1139799792335","172.3647609583549",".8925044699153112",null],[null,".1602827452176116",".9706442556671714","2.844014096100412","18.66166837443374","46.32129803826434","350.7137189281245","1.030656486443765",null],[null,".1425611576397109",".9820317285131199","33.30365397522921","193.1496034837547","124.2510582506615","248.3592506367989","1.012781580965324",null],[null,".3458718782160115",".9098651218078631","1.829719106250574","186.6036159185346","237.8568911438211","65.32709633102525","1.135634421881308",null],[null,".2360719824766697","1.027652346802242","9.530291479614505","11.86101830700919","1.397526821610882","347.1893308515446",".9460949979747351",null],[null,".3337445755494289","1.006661037160704","7.71198640053645","192.4510020092823","249.8276303715196","258.7411925430879",".975841277495605",null],[null,".1697520347859024","1.014952151007893","13.65955622131239","24.60850081028391","293.9337517944614","67.00725382513041",".9639083033804189",null],[null,".08797843686464893","1.09600964681291","9.180299943979323","197.1634321258224","39.74784526150032","40.33256199855763",".8589789254832847",null],[null,".3094941231699117","1.087383670358611","11.89428023457697","204.6430202876043","114.4120898406232",".5632401362747957",".8692203067450118",null],[null,".3813992876662343","1.064308873069471","6.425262576269096","42.27854853487325","61.73026736622447","158.6857584797419",".897640728693781",null],[null,".1877961258012044","1.047546079980064","9.580265520186369","30.58592614686694","71.78419008378931","201.0424960663893",".9192727147516452",null],[null,".1134524438428162","1.08152380292402","7.832031706599638","210.7105552395574","291.2359938407094","134.767278284781",".8762942272262358",null],[null,".315715914152738",".9063425910822477","9.612973086342963","211.6147845866216","228.5796487308973","57.88324273391406","1.142261372056588",null],[null,".1016561551916447","1.008309333136708","25.19982957077789","213.8824346975509","248.5243645841848","264.4312966872902",".9734494256052491",null],[null,".228856660283407","1.091020414173882","7.936672566306193","212.2952903779044","95.63729961592678","354.3735915216699",".864877818118679",null],[null,".1795609990948918","1.082096838648816","23.09967532100399","39.33726933742623","266.7099329967233","1.838576027647706",".8755982431963251",null],[null,".1528566939995822",".9269178606691548","8.618243445880442","50.24169924099466","350.511687578188","94.85421674336193","1.104440179780308",null],[null,".1228694246760496",".9842504062259267","11.0095716542001","41.25772269932881","297.8182237468724","83.04095526063833","1.009359023361608",null],[null,".2826723284436559","1.008764600151276","20.28713939677021","216.0925164113183","246.375045575736","240.889678591352",".9727905066557536",null],[null,".6487349564963055","1.032773102876461","14.73736521927718","69.06694696290988","8.817929097264221","198.4680556476676",".9390672519336889",null],[null,".4123553128115657","1.090145663223335","7.464117242577094","36.15573524168354","66.25411550809976","64.99914743523276",".8659190153658641",null],[null,".07319114928511056","1.075185793755357","11.66829411125689","48.24654203368089","123.6773929421476","117.9209353180385",".8840540084646916",null],[null,".1240136565981132","1.036217370270971","32.65846607150733","221.5108863362074","100.1495577072024","32.92927966508757",".9343891173646468",null],[null,".09412985795129222","1.067947932172918","5.548652981895282","48.18918810629452","282.5644393171842","342.1509747722226",".8930565398156781",null],[null,".1405940037860289","1.029464726389672","1.650418347816322","50.89717810385515","267.8996226293455","47.46480213153238",".9435976879862683",null],[null,".1879039865396189",".9192019449120454","3.202975381752232","233.8317974760966","207.302469011154","48.90971949390134","1.11837557080094",null],[null,".3669719132850927",".9648256883248779","15.34859412593545","222.3153429501045","244.6993454030896","287.3857849490632","1.039993887920513",null],[null,".06577169844791098","1.010029147965005","8.942402599367746","61.5043848559564","57.05195516022292","249.2938420224816",".9709641905549351",null],[null,".202891719759681",".9724269090137017","6.771169623623627","66.66883167553503","292.3746975418427","84.70958542723316","1.027823685966967",null],[null,".2721756008087587","1.079853955171462",".7830534138464963","95.21550463752492","40.47562641094383","124.5584710786671",".878327618153921",null],[null,".2570929623408873",".9717670866602699","30.20891501632144","55.74829445714234","311.1086080171006","77.41399022832402","1.028870690171367",null],[null,".4022119543072908",".9010466910437269","13.48583839744478","253.9505405118631","150.1664580499267","124.6533389621855","1.152346613098657",null],[null,".1893855386571353",".9443452867923352","8.248765905811288","224.5318739167777","234.4430372613421","350.5324722435366","1.074008820831387",null],[null,".2753920395298617","1.037945757070618","8.148730180762026","68.41549907641389","277.1057037580546","24.66417947056406",".9320561727477359",null],[null,".1693699578904796","1.065805372883228","14.77448446311346","234.0627875198371","263.7596327376372","148.4684467941611",".895750823321277",null],[null,".2489933432284342","1.027786116124975","11.43566721736408","60.63845297553338","72.90888283511039","189.5165772391575",".9459102985021636",null],[null,".2027875355854737",".9283645432036381","14.34922612592577","59.1367876488948","347.8617779904221","87.40835000624048","1.101859590543653",null],[null,".3230949723976128",".9279606959080501","4.777695313734871","230.5979759486179","201.646915218693","44.1161774633066","1.10257896060138",null],[null,".2697833977435298","1.047535897067054","22.51123956884896","62.42782213352925","60.90577592957465","182.0597563612202",".919286118917835",null],[null,".2396632917322528",".9120853085988814","11.72109081050067","240.9999509541179","230.8463971208874","19.65704424210636","1.131490425336928",null],[null,".3077272093427319","1.063432294643253","7.440402131209368","242.2165545227899","110.4200504001085","353.2516267755527",".8987508340967686",null],[null,".1913040309918712","1.068753939927662","15.50014398854399","239.9864146693592","274.225298929624","129.057876389279",".8920464736908365",null],[null,".2764674346932617","1.070767939708342","16.52792919036035","73.99149692540125","281.8084230823094","338.0379172466352",".8895308917288515",null],[null,".2576594993432661","1.060360060995561","12.55449383667298","238.6055675409087","266.5621439389445","139.1142385881676",".9026596548512682",null],[null,".2044671532874056","1.091987872409534","8.803807677981037","239.3582035308672","273.1522800427813","104.163098325727",".8637287012187889",null],[null,".4548306437983713","1.089736395272625","2.506429143493674","255.4941227766069","231.9994253839219","99.28249837966464",".8664068757878048",null],[null,".2415477766462627","1.043707645733728",".9329881013269838","44.582247614505","94.91174111655367","165.4733204686439",".9243485760010731",null],[null,".1644962285606658","1.083565003329293","5.365574703845964","257.3628885002295","72.71293236538354","340.1145596628496",".8738192725834287",null],[null,".3634720363142557","1.08968444264649","4.81441885310715","222.2635591563184","279.1218621579217","98.59410696392038",".8664688377383113",null],[null,".1068195428573895","1.081547113355887","7.135327550214541","99.59859275559714","296.3356952682885","273.353174613871",".8762658974106922",null],[null,".1795113308063132",".9353163982780945","2.665119263309804","196.9720336678006","242.8823819856974","34.50827766689194","1.089597883538039",null],[null,".3914668606549062","1.012091629545035","23.11364091735528","76.04401235782106","63.11280517180699","186.9130249277743",".9679976975371191",null],[null,".415517235805681",".9481700902112156","3.644164246280596","176.5176517868135","304.4527087241802","285.9437537843201","1.067516746470154",null],[null,".2266418444380359","1.035469251256943","5.918032655868699","73.37699583151382","73.50430507593481","173.259243736279",".9354019342748758",null],[null,".1306391936482982",".9158648331034184","7.631796854934977","84.67728126602111","24.23682199203162","28.14297490432932","1.124493627426648",null],[null,".368184956350176","1.046231272865876","3.505902069523358","90.46501316358551","70.1925956357765","127.4623939024832",".9210061450058614",null],[null,".1299860504984695",".945776491062073","23.58345311924863","94.54009035482161","321.9614229769227","52.11692859401604","1.071571863959466",null],[null,".3370750286798603",".9939068630010125","5.59656903859381","91.77513966898258","298.8787804977201","35.93259220055864",".9946849334881499",null],[null,".3486741219839922",".9456674029713628","4.044116051058263","256.6670073610515","136.4888973127989","103.5003984455311","1.071757287131628",null],[null,".2613199682484255",".9012271609588741","9.742198193255156","271.4089556853147","218.5144169187273","13.87647316116503","1.152000495893691",null],[null,".1851087196183626",".9847553892395532","1.07319949043381","162.985499367681","351.2142113214238","230.9828630275003","1.008582723251969",null],[null,".2359714749772011",".9234266296333485","26.52562622514701","102.2732440804078","352.4458444501898","48.40308857849377","1.110709488961478",null],[null,".07820890817686305",".9725233790541907","1.153526718198686","307.5538650137844","133.6705950487839","342.9350049361753","1.027670756378156",null],[null,".4088074333287117",".9020858127657814","5.989553379582752","287.0858030212694","218.4794855997618","338.6323301972307","1.150356087117568",null],[null,".1962670711290581","1.055193438855267","21.26623700504711","100.1878318327883","270.685193643398","333.0123548604332",".9092974029779207",null],[null,".1918569806091034",".9072777576234259","31.37370584646717","283.7847905210913","219.6123151872369","129.1729969789507","1.140495767259597",null],[null,".1612638496324931",".9052679427203233","8.565568484043482","281.4837809497701","214.4906835447433","12.09259144281529","1.144295952346048",null],[null,".02454885087542263","1.023673014847711","1.066083703054175","274.447716852931","171.3652642200962","274.962256695034",".9516169992316202",null],[null,".0460707563096065",".9780024248853829","24.75902807950844","294.0758038180633","165.8795632301898","197.2009972117422","1.019046910179363",null],[null,".1826183039091171",".9110155202054191","4.424195849277214","119.001476942207","41.0203977316234","330.93522044273","1.13348404221013",null],[null,".2747123918381872",".9762627272951212","6.196587897329478","104.7539384142081","74.18032651527346","205.3764013585924","1.02177203165201",null],[null,".2749114078353301","1.018506677752463","4.580222765867153","295.7710609560129","255.1229474065896","141.0262067531335",".9588667359022793",null],[null,".6408935768131627","1.014744121458735","1.059957726540449","24.88606742952838","136.1387574387844","63.19185818847338",".9642047303572505",null],[null,".1936456413863598","1.047456184871681","6.883012587132164","315.2863220439743","96.93892885167624","299.6946989680512",".9193910584511858",null],[null,".4145087159301412",".9609175649151418","9.377987611462173","137.7397391666682","292.8120549848881","41.91610352993851","1.046344933614159",null],[null,".1406911778292482","1.09065255322287",".3462019231201132","324.7990105656165","58.62604878810203","279.818304782433",".8653154207284069",null],[null,".1279189827590954","1.015255667004402",".3670714914792715","278.01269830094","130.448176466237","333.9345373782273",".963476087537715",null],[null,".2191887678465766",".9906693592504978","10.18190516846545","127.2395260223654","292.0005061561336","1.940003150018885",".9995648549075119",null],[null,".05859563140055714","1.008820970724084","2.060143699551957","302.6866907823575","105.7065341277396","334.0599312720344",".9727089718835356",null],[null,".3012221343250315","1.079078925506218","6.423484040737128","308.480013178058","96.87714067576688","287.9720250791019",".8792740533401221",null],[null,".7661909035791574",".9751964164977501","9.602133358870011","72.88790138209974","55.65054542319018","271.3747711115886","1.023448346763298",null],[null,".7532618778821755","1.020825629725032","13.42611894515715","21.24747652577627","89.51251324293173","320.4291337852753",".9556012869683923",null],[null,".3300955900837139",".9689223266914092","7.87130404840569","8.657129059180097","94.63802699378893","344.5161118425791","1.03340516733556",null],[null,".1853112142405119",".9542643901210927","13.2399913083061","296.8146754548774","240.3706145739305","247.5422118605231","1.057306731647078",null],[null,".1496489958851202",".9083547636019632","5.050951196016311","310.7247590521866","151.924667787404","54.37567409557645","1.13846799687072",null],[null,".2655572646099165",".9203696099236834","10.56851616070821","317.2091191514306","198.3552431937045","318.9513347243144","1.116247935778059",null],[null,".1390072723630118","1.023159548307312","18.67285620538302","135.930865971908","288.843189687175","309.4076240627513",".9523334341032803",null],[null,".253478839411224","1.067622409026948","14.11955606688449","330.6431043945219","169.3608266449586","177.3311020864025",".8934650167226983",null],[null,".109558317941997","1.053544292632134","3.013356563149154","312.3215638411329","283.8843996919428","77.26104088830556",".9114332662693896",null],[null,".0904257107157601","1.052951732243794","19.44040503441317","155.6637018966905","338.9716371041707","199.4974246384232",".9122027534316972",null],[null,".4308317151937991",".9531011688379283","15.23528850255263","325.1700129373944","147.3732950581059","11.07224655855936","1.059242922020432",null],[null,".1887525838726133","1.062169663264713",".9687488779624365","156.7065435641923","76.85457091979144","61.95890974940825",".9003538663853509",null],[null,".4927664437001225",".9634524297345337","2.160140912478431","149.5352078815499","43.46113273417426","95.42224364819138","1.042218215698101",null],[null,".3242187539908029","1.009757307721624","4.81865802658891","330.3086059897522","249.9416822908962","117.3001952425912",".9713563118650599",null],[null,".1819732763817617",".9360132404676472","26.39343200978393","151.5725245626141","333.4190920497301","353.1663513477298","1.088381335938151",null],[null,".1987217453539613","1.08903252237458",".652011928785233","156.3421027440181","83.20133908488718","29.63921303919521",".8672469868515943",null],[null,".1385684725579987",".9183339584647552","2.760985973708813","165.9277215989311","350.6050401553903","331.4332416995314","1.119961536623034",null],[null,".6386218416067","1.09729105101053","7.820252996972095","12.90325512605961","106.618804882551","247.2461356278979",".8574747058993192",null],[null,".1498431321357677","1.034201850153245","19.43079334861384","334.6014037767724","108.6253558660642","280.2139377064411",".9371219455797629",null],[null,".3175140596422323","1.029461471640394","4.163473633325205","324.4186442579324","261.060578022062","89.21014297612123",".9436021629128287",null],[null,".04703729785180115","1.06150103433409","25.05801653551501","339.8290730685883","176.3371717618479","160.33226666021",".901204686232397",null],[null,".1685462096163778",".9696780501764921","4.766035780571745","338.9058698468042","240.3100377214328","183.5260949620687","1.032197318444319",null],[null,".2529607881015766","1.010970977294277","9.171591010741967","166.834954856774","295.8669340017115","300.3841356792167",".9696076686247983",null],[null,".3511787984913871",".9422537551135086","7.548317578070077","6.093288518346609","109.0437550489845","16.93323343301225","1.077586789420132",null],[null,".3472021062435598",".9937547737335745","7.581538787522992","339.007567868082","243.9253037513047","128.2442099672384",".9949132896604914",null],[null,".1064504562793475","1.072610819603979","4.552899398041916","156.4815516524671","296.4670878657351","225.4004253878562",".8872393882752235",null],[null,".2389983188360103","1.047311023024122","16.66534004479085","160.2220985302392","76.97111216162511","68.40896055242278",".9195822124534595",null],[null,".06589971485801439","1.020576163163266","4.951466843286134","160.3924703684924","92.83335428855978","100.4896184395388",".955951684827012",null],[null,".1279339519406112",".9733327605622374","5.216831991385504","140.5804057395126","335.8157559700826","312.0381554968402","1.026389172938217",null],[null,".03553075463129114","1.033005446402938","1.371925768643997","145.4565932275409","304.1692817322742","263.1741992978523",".9387504473196282",null],[null,".2430734264342622","1.084993378537221","4.574149856348105","194.7963701288008","311.6995047200024","160.1108241753097",".87209428845401",null],[null,".003974444441281066","1.028723267102802","3.093161766681524","150.7120825752319","47.11649781008339","155.8485516339098",".9446180284561061",null],[null,".1246584270753872","1.064326480326926","6.827955143686579","208.408075298526","250.5580617421657","235.7648439028309",".8976184541478524",null],[null,".3975861704044276","1.039279725441103","5.83457496115145","347.6107347404346","136.754095252724","280.3011777565368",".9302622364747813",null],[null,".4580234986835369",".9517148210832858","20.57774902381909","352.78332756304","236.8228402966311","159.9551998103595","1.061558238008597",null],[null,".1335219696960006","1.085752819100766","3.169227315274028","180.9091128213415","244.7478455779291","244.944028525634",".8711794559907652",null],[null,".2384705737824135","1.076639931447992","9.936183377806476","167.2753016659614","93.66044063730654","66.8889954281581",".8822635740987727",null],[null,".3115736661859569","1.065950940726421","10.91905041248211","183.3221535781811","278.4748592404978","251.3217118548394",".8955673419920848",null],[null,".2794904569664868",".9204413957979558","17.36875617940009","192.8029013531613","351.6020150206099","292.6643385973408","1.116117352877364",null],[null,".5242199788359272","1.079202719978537","5.525478175996425","353.2077037145349","139.611555576775","216.8532692862028",".8791227664541462",null],[null,".8328918901612195","1.004558506799925","6.214978907013936","58.43242386964883","138.023233119816","88.40158438078247",".9789065182315313",null],[null,".2399525847799837",".9725456935472399","21.45349353959036","23.70163235987471","155.3300518693935","237.4512710724204","1.027635387622896",null],[null,".1783803629133154","1.01252457249581","1.537199929804713","7.239865073996623","95.70917127580051","287.6619248770929",".9673769081925629",null],[null,".3243046535880626",".93953125290121","8.806629964690039","354.733273222442","240.9918265907685","185.7282375233923","1.082274004460256",null],[null,".1289566547441865",".9444473062369853","3.053430300299894","190.2358511413952","318.4071337651955","311.7531382502967","1.073834803461014",null],[null,".4527243146745777","1.093125159278024","25.58139003349704","3.011704356679611","109.4587800875117","232.0491160527593",".8623811175146221",null],[null,".2781451618387769","1.016202886746984","22.52604522243703","186.4268768493045","37.6216621108853","111.943614177713",".9621292931880736",null],[null,".04949559317851107","1.067587751027667","30.06738943551317","183.7472584223561","330.0499386994022","214.4797715193265",".8935085250355171",null],[null,".01424507082419387","1.073731296362562","15.58368240823214","6.620270087442502","224.8266239229198","134.6389248772267",".8858509519141162",null],[null,".3976672916652212",".9838346752154619","5.394799760961991","6.007982994347223","236.8221400673287","113.1916317444583","1.009998865882717",null],[null,".114289712230448","1.027684871847466","4.167534183554684","353.8352178856379","266.8788606564964","82.24306578842105",".9460500841008943",null],[null,".3888373221450203","1.042042583765037","16.40870514156998","197.4462212208687","308.2268604690311","240.4167285774271",".9265649618923508",null],[null,".3044395842178911","1.055417681654102","33.80485100214661","4.347461265289013","231.4746883575425","95.82205592237338",".9090076230637326",null],[null,".1143497040466353","1.054235933462341","18.6873600420324","43.23959788994546","177.029972921871","101.476000860293",".9105364825837101",null],[null,".05478772745086751","1.089156144021652","1.41733830769229","163.2948913164099","187.6665042749353","304.6839079696616",".8670993393458077",null],[null,".3219534158129763","1.004431071782762","7.594545704892692","11.5647808695174","109.1348888843254","296.8036431629325",".9790928191074041",null],[null,".1906459859817792",".959137225326091","11.26316419552827","218.0466705563443","331.0929955379639","236.1732162294571","1.049259605429478",null],[null,".1188148786319024",".9672479351298957","18.74088104996148","190.082110907915","11.49926336921503","218.3414133334633","1.03608970164571",null],[null,".1760856669419079",".9010499072928505","3.29165061967324","149.9833728363491","74.06597627127715","273.6048771810087","1.152340443245389",null],[null,".2708405730846611",".926890356025839","11.07502441358837","171.7492673658984","59.11450365109415","221.3473683732978","1.104489340058594",null],[null,".7010775533262827","1.080524952268298","40.0669015854501","194.2376394466714","336.7205745489962","190.0876759493655",".8775095938570981",null],[null,".4873558100028378",".9479544570023706",".9660057339199064","90.44275421540198","60.05738979370942","349.1925776787037","1.067881012627524",null],[null,".3596628601548131",".9408881869060437","14.3985686219422","26.53888078723791","120.7743025322545","344.4537218344271","1.079933591215164",null],[null,".1362509031339092",".9151588518843251","2.60710209442176","21.41497614140214","220.0083089553905","234.0442394533403","1.125795080936175",null],[null,".3855510241963955","1.096767744774991","12.20444359608482","44.61011547526167","113.0944791421553","176.8929937130984",".8580884758385582",null],[null,".3248952866710739","1.036493988118009","7.746297168339418","22.8512271768954","256.902624628758","28.76544474617171",".9340150899271387",null],[null,".1097850198790678","1.017250185163556","30.13819067921525","22.88518590627454","108.1213659692282","264.6765241592429",".96064385169303",null],[null,".3143005061244249","1.092591825716291","27.09646062447606","201.3340488955059","84.1297833695988","63.4804518031321",".8630126336565968",null],[null,".1140963791573367",".9972372446316421","15.60641842034174","18.13553249892374","141.8132079750051","234.3362243569167",".9897063090782061",null],[null,".09841271474327182",".9672471545994101","3.078074017195773","204.749325925352","351.3717877755976","227.1464158726848","1.036090955771541",null],[null,".06629621217350819",".9517635067920795","8.278364858474843","24.70023712874577","196.8998083590021","215.6516489856831","1.061476785966254",null],[null,".2468165381843666","1.070071516164524","24.46923143490073","204.9036321930131","277.7237444867706","291.7585189841232",".8903994192474808",null],[null,".2821496279385296",".9591136431475145","25.21303623728582","16.70759453611684","223.8651079066145","116.8323944438504","1.049298303627019",null],[null,".2593074540048116","1.005418550008679","2.022737898596553","189.3198880636847","84.70394248011172","76.83880858838545",".9776507399764578",null],[null,".2106829061351417","1.023710964328601","16.77368003409175","27.19669076108567","96.04637410317494","260.1240633033659",".9515640843400668",null],[null,".2821458657528094","1.055041891313439","21.61477060246138","21.2311110262082","251.5390167456296","82.60519030960556",".9094933289440837",null],[null,".3166273656407356",".9739018141179376","6.327786497662208","20.98024792200693","246.8811712723922","110.6021327416419","1.02548972125871",null],[null,".3981787281343527","1.020786000293334","15.00092967780665","31.67314332198637","111.5772812931435","263.9235353345543",".9556569357088779",null],[null,".25736514015671",".9440093098760524","3.149709336698907","349.463778431059","255.7089117911417","179.7852785344918","1.074582238284455",null],[null,".1882172692257763","1.047585853603163","10.46645712429737","206.7099853750478","35.60629958466888","83.95096172282668",".919220362298656",null],[null,".1633498616201455","1.010646850448626","9.767288594482055","207.9279388221643","283.9627779556885","260.9678020389281",".9700741536363969",null],[null,".434849931757716","1.068326421240169","13.32743865243186","29.70381872588775","108.1018124614816","229.2719659079598",".892581990758837",null],[null,".1722156963035374",".9380596036810394","10.81647028006058","194.3068315343231","5.6735069330052","261.0204956056316","1.084821847159216",null],[null,".112355707349725","1.01129826776182","6.445069021726584","35.21275378602022","88.50803853087042","261.1527449367666",".9691370097497327",null],[null,".07775917286838881","1.043015456371738","12.39206871527998","212.4448382891595","103.3673001453265","15.83163415270791",".9252688841169338",null],[null,".1109220209229521","1.0047004360979","17.23085832434624","26.20817489596397","258.2545279178418","83.75732968777197",".978699097288257",null],[null,".1780619936491815",".9427364548549787","12.71403906940981","35.81286674811235","144.3523889913318","284.4881411023966","1.076759276692026",null],[null,".1282540290659505",".9337838600769706","31.22456730682481","36.71315715255518","139.3839958125786","293.9828092053824","1.092281377132562",null],[null,".3352077718597002",".9485941798307939","5.163620958135176","209.4499067879273","63.47942811609474","133.1003229927798","1.066800941687341",null],[null,".1820814161884205","1.016490471366212","9.111145135843119","211.1559260320976","80.03402359742343","54.18036498533345",".9617210148674871",null],[null,".2501036834999689",".9131658217124264","14.22581804237424","345.3309443480376","224.1798627674155","298.5907211334018","1.129482747517681",null],[null,".1869643558516845",".9886709804934597","3.206278799351026","212.6368418906922","77.39111407510447","84.62680842014312","1.00259698326807",null],[null,".6263980941062393",".9105866217602356","11.60827455443942","217.3024118306604","320.4514944190494","287.8805682225095","1.134284965658205",null],[null,".1780986265658455",".9447799223966392","12.16453745024529","212.8161141913685","51.80812315944497","164.9241294058981","1.073267777170023",null],[null,".1355507278790777","1.002139867607239","17.241257549636","215.9916917949915","59.35923637613921","94.6949787955508",".9824525047582259",null],[null,".4567962916854869",".9683042286253899","11.40419217598594","36.33656671749155","127.4632134275765","285.5719203070471","1.034394806188198",null],[null,".3893551614017111",".9328107199006751","22.86749036069958","26.3492485757114","230.9176351222029","155.8468207212189","1.093991081007646",null],[null,".3674554388367595","1.020352752877265","20.67567743382858","8.610753085985323","226.5389446203165","110.7374862771045",".9562656661370306",null],[null,".309634072618491",".9475644697236243","6.479157180645553","41.86221308737617","227.9787688236273","139.4588314747651","1.068540339044226",null],[null,".2287666530676882","1.023168794310061","11.78639638404517","243.4743580502789","276.5800668224504","231.0512918702054",".9523205252982432",null],[null,".08496581933988261","1.091020081001955","16.19862158066002","213.508438623834","249.8421329948488","297.0470889367769",".8648782142887907",null],[null,".318924727003385","1.085499561050933","6.333681306816391","216.5419356874338","288.339013876909","195.0582132874999",".8714843562686918",null],[null,".2011776787932707","1.064813448465635","1.326666985105897","225.4236572891165","90.77579509599882","342.1205750249603",".8970027665704359",null],[null,".2960728463517563",".9812171568023303",".3141870837698178","347.8077342039231","300.6292800945982","81.96471700915824","1.014043005735524",null],[null,".3540471249924614","1.067406361510486","15.39407572074354","35.15299905450686","260.336664514606","341.5130973674893",".893736292038415",null],[null,".1173255830387906",".9683666665170451","15.68360084991707","226.6268704621578","15.75227429214352","172.8343267656875","1.034294764966239",null],[null,".2214445003619605","1.009117502309171","14.98357015997211","38.85636660833485","191.7309526312496","138.463601188027",".9722802541049625",null],[null,".0770983987545453","1.089570709698471","26.33257209242324","48.29970929906335","358.5562646259065","252.9712017156933",".8666045085479256",null],[null,".3345027412694263","1.033981592738488","10.07492571966404","230.0391720914177","74.91538215335964","6.1214278355823",".9374213982735518",null],[null,".3256072446075471","1.099762056693154","4.081541046731323","39.11225524565755","270.4582893582982","303.9386086282926",".8545863980525562",null],[null,".1677982205034837",".9951446276039498","5.824779670177352","242.5951317639033","270.2265350735652","254.0990532210773",".9928297214167098",null],[null,".1761847837941115","1.018443159225381","19.07816521722528","222.4980244036315","84.52968018876135","79.06037587164195",".9589564415748311",null],[null,".3195392775203842",".9773226956308789","13.13209609751963","241.7583723178255","12.97185723283206","119.7376420660273","1.020110217759327",null],[null,".422066086475579","1.058957292149587","16.43643193365835","52.07156065609905","110.3433729377523","299.4084930698792",".9044538378051319",null],[null,".1536026098433413",".9113698518106067","22.57221825722191","233.5623873694616","320.5929006594459","305.7454105193208","1.132823075348926",null],[null,".1990191343652533","1.077590678013888","11.16163738335723","234.6982620908678","272.576508027367","286.7973365093159",".8810962143092662",null],[null,".1876686020300262","1.072027192918756","5.086165507636166","242.62775820","304.3309449681932","145.1612037868811",".8879640252856424",null],[null,".09000765222698424",".9544640839052217","7.312919886225592","237.6296293220144","42.14594093248839","146.5934540381091","1.056974933088378",null],[null,".3748438527359635",".9728771364280063","1.667421511577861","250.8707142822423","49.78650299394098","69.33271974345455","1.027110285208412",null],[null,".06290283282700854","1.018651680684785","9.665251690874584","58.78404481913925","74.81294986078441","240.520723645626",".9586620041824414",null],[null,".08944843872881925",".9802881114462842","14.26847785429941","59.57380316567621","114.5890488709857","239.8258337006671","1.015484900894485",null],[null,".3526942103468868","1.037405868071013","34.80339525513858","232.0197252635903","77.03311421225439","65.5710653832266",".9327838614294192",null],[null,".3647185425434068",".962759404593816","1.001499158726794","222.4611221544679","56.56490108678849","109.4122589099352","1.043343751403996",null],[null,".1328915092831508","1.086445186634192","2.591456557856672","181.2973182962294","141.6940204198905","322.3475820367568",".8703468135290298",null],[null,".1643946624477684",".9045410543881026","7.174703917755136","56.47197506145225","175.0920943623386","265.388147398612","1.145675562127329",null],[null,".2624682747159756",".9461409670085885","20.15842827375271","238.2132300163253","306.928846865939","283.0119626891132","1.070952731239621",null],[null,".2260918867744305",".9231230249097678","7.311452212511096","226.2432940406033","324.5877821760789","300.2064534431601","1.111257483697998",null],[null,".128004295868004","1.067771828277782","4.21579344863759","58.70751191661903","63.60342974582033","210.3064036099514",".8932774819899661",null],[null,".169957689156119",".9671831756850862","14.22342688431252","65.63825741826265","132.6557993598276","229.642699144371","1.036193763190619",null],[null,".1683851766162837","1.096570378946624","22.37658355555961","61.14955028097658","293.1140482129376","284.9947060514939",".8583201503844412",null],[null,".3555830904750763","1.080124569701393","7.142683202543668","257.1505824662448","271.2999129826187","295.5136845369083",".8779975543807932",null],[null,".2253262490926982",".9531042102765392","12.05596462072978","247.284916170715","304.4290562152501","263.7306477855991","1.05923785181974",null],[null,".1789600484997244","1.080357451405521","17.33904023685477","63.74105904924053","101.7570528847429","164.6705100982753",".8777136781315513",null],[null,".2757660754841184","1.071061540575829","3.282526640012378","2.226554416345406","176.7909536483303","169.6211232985862",".8891651576423072",null],[null,".04745683636579769","1.018366676357056","19.88544242321469","247.7484741906497","271.8927189011291","213.1464412430273",".9590644750337438",null],[null,".1958375883264893","1.019257673049375","15.69065326107857","248.9630628659829","14.23564290998731","94.59645972106851",".957807182806771",null],[null,".03764511198584825","1.047573369715573","9.052042103740183","61.89989507809234","318.9986092921271","316.9369539627451",".9192367938129439",null],[null,".1903212746589758","1.0313264610073","3.309579589339826","63.0315566361316","263.7177247011707","4.257617777682999",".941043789433651",null],[null,".4081448050714621",".9721408579991978","9.861986803590828","246.0638324738921","302.0121340400103","272.5789589129595","1.028277372743875",null],[null,".2566029567905307",".9298654851702195","9.79999914151426","61.22159574693442","235.7038424709601","138.8863479312477","1.09919281814546",null],[null,".3969044138769832",".9386746861298528","16.97734050716198","68.91745882379563","121.466878212316","306.0250426457039","1.083755750083169",null],[null,".2106751660354064","1.027084595023524","8.090747638739037","55.23780193983981","221.886623044382","67.68342730737919",".946879579904123",null],[null,".367298502615709","1.098382727716173","16.06807166720189","75.60153108750038","118.9422493245594","141.4885892177607",".8561966643194886",null],[null,".3687303171622686",".9107765177578504","6.079022007403661","246.5124059600128","58.87025155839017","141.3560114242476","1.133930238220017",null],[null,".2514061420648513","1.070019383061457","4.085840771682185","274.3760276094095","255.4070269564001","177.9267885964477",".8904644926248848",null],[null,".2237021514705114","1.045821242200248","10.89291694403862","261.5082422765841","91.28744297413748","323.8558879089027",".9215478405079599",null],[null,".1961447409351537","1.002996237419868","2.364393563226708","273.9728299467624","271.1726505718166","219.6665227617425",".9811945293689257",null],[null,".1216556697324503","1.096347428664921","2.937364509938094","262.1519922989859","225.5372791668116","180.8415843974078",".8585819822309056",null],[null,".2036252768940018","1.045605741736136","3.208061701322785","89.51801545702145","89.8993652902045","185.4482596297452",".9218327531834465",null],[null,".2506211962516523","1.087401516531836",".6607781525944922","261.6501814500859","103.016515066758","275.3233563937752",".8691989086796021",null],[null,".216572229120791",".9176467523888661","28.57810067178871","92.3295489814208","169.0978563937682","187.8110838358429","1.121219845082104",null],[null,".2541706573252711",".9720389452319209","19.88054873930507","103.5818518516234","145.1901391697111","173.0116109239709","1.028439090553378",null],[null,".3558117446688803","1.079777659179372","12.84760904636744","101.612689244595","128.3890541147664","122.0241870678916",".8784207124037264",null],[null,".1617689026691916","1.075400896236468","2.734290175534608","76.07928447385612","300.7961116503411","283.8107859192957",".8837887780256412",null],[null,".238887371396026",".9381173844750325","18.36661748499255","84.90403570391335","123.7797973037456","269.7054049864774","1.084721623716739",null],[null,".1487298186860544",".9196789874389426","10.80434067132541","86.86726371704066","142.9802613599747","255.2392256291052","1.117505522350946",null],[null,".2680195736434539","1.097180979865982","1.510649165829083","296.3851976489404","245.280627185372","148.1434155979744",".8576037442136415",null],[null,".4463655279710214","1.003555946797749","7.039298754119245","20.02065500659168","293.6180774276713","27.60233780103393",".9803737870863809",null],[null,".07241815178791718",".9368930831400024","1.603264450205253","271.1891179807108","342.7898808079763","201.6242453140686","1.086848536461896",null],[null,".2949511241375103",".9321590911390006","20.1863946166972","76.82289936329414","204.9676647986303","169.9912068587687","1.095138418350968",null],[null,".3335014031303245","1.081055986281086","23.71565017527464","272.69397936","279.0207812911017","160.1200394133593",".8768631006826826",null],[null,".1540982965792935",".9209862225860536","9.331314856552014","104.0422785482396","156.2287361043321","213.3043303023785","1.115127108924433",null],[null,".1768578160147575",".9746073229367092","11.51233132946924","282.5740404678928","66.4733651209402","45.19987708310607","1.024376409655884",null],[null,".3981119330285108","1.061900333784165","28.43570206172627","91.55547379805486","112.3232454694307","294.1651379621979",".9006964228474243",null],[null,".02573332391176617","1.005922259115001","11.1439779431767","290.1479045098195","297.0383399301094","155.7367523050355",".9769165034244836",null],[null,".2423605799213581","1.022864052820897","14.49342604890583","276.880324950138","291.9456286424602","184.448568087733",".952746143720588",null],[null,".2818033976126383",".9708305508383513","13.13070418313539","270.6894793276444","318.1317319548436","214.1869385649535","1.030359837690341",null],[null,".07205204963534319","1.024653215806326","17.02569019579725","272.883338403718","89.81952977161961","353.4992021248977",".9502518259697774",null],[null,".1658139080733371","1.029394585152135","21.31292872527135","95.46495744843313","112.272989737283","266.893489803445",".9436941323982799",null],[null,".297782231359286",".900653038336702","30.51130368300511","97.33307201087771","227.5429633690189","105.5519371563067","1.153102188066535",null],[null,".03171587589802865","1.071704856962215","10.55894561690111","87.2602849809216","353.6359145872718","13.26708856241865",".8883646639301552",null],[null,".265195859838508",".9881046757082955","3.120662802661911","268.6552877223413","86.52773899614489","11.26561759646263","1.003459022725928",null],[null,".1727032420496621",".9311826605216653","4.882023093539861","118.8150702579388","122.1869000973035","233.5450247668884","1.096861399781096",null],[null,".2762198809848675","1.039408837307942","9.850137690887442","300.6819975038999","279.7022182697394","161.4479806011219",".9300889107922924",null],[null,".4766511053790954","1.042949067638685","7.148318507243152","114.7347124219235","127.0085572200681","288.8025392837768",".9253572322564316",null],[null,".3041940964197035",".9814295720060733","11.08119091803911","141.5979645363216","100.1748731942738","190.0580938819295","1.013713812736107",null],[null,".1432976375764133",".9507567867682342","5.507530943911694","141.3685529902247","209.102844905206","73.59212287385164","1.063163167979732",null],[null,".1746687806142532","1.07002482953333","21.25026076285393","303.2659859561447","78.13832298393862","284.0238944855773",".8904576938803495",null],[null,".2744975609223206",".9681658470303152","11.66828310526002","125.367107939179","109.7635038447131","213.6713210219638","1.034616585832237",null],[null,".3994222270661372","1.009823618244357","15.02431433103463","301.3708508061504","61.16216825391688","74.50714279930212",".9712606366111409",null],[null,".2060820287038549",".977562479719342","1.541383308870625","187.792889199816","173.4055950439405","27.21869240931651","1.019734909986014",null],[null,".159290710838501","1.093582191521377","36.90628434795417","122.0008062207663","98.04772150941709","284.2406903691339",".8618405617190785",null],[null,".1383393512152382","1.061816609938818","11.81531916691485","134.096239564583","68.75672549447691","145.362372636732",".9008029543149976",null],[null,".149191821602105",".9778128997768736","16.76668381953184","131.6898327567602","98.44935503377918","193.5061993276571","1.019343200501785",null],[null,".3843672895539623","1.066308522146514","13.51977379683859","136.2587785458433","243.2297537560719","265.8401274316042",".8951168934780763",null],[null,".5012432479481088","1.056541816538166","18.16424533680777","127.58369229844","247.1216579592643","263.2579319738623",".9075572659037999",null],[null,".2839796645476197","1.056228706162749","3.102335907523668","112.7321515663526","274.6893828905227","66.62683178372473",".90796085272148",null],[null,".3211895556559288",".9507343291323056","18.52110259393555","293.6504906273561","67.22130200086855","37.10518810874292","1.063200838238852",null],[null,".05480981997009819","1.038861070796524",".9147438231116318","329.0452767322151","178.7580337967942","206.6662638803424",".9308246280952531",null],[null,".2425107998023149","1.094945637238954","14.358741361093","1.691133519613175","38.21987255908298","245.9696182261351",".8602312942333312",null],[null,".05508644288514621","1.096722076465032","44.43995822525954","330.4341581466866","347.0598983665636","347.723925722841",".8581420735447688",null],[null,".03641846576884599","1.059802027412665","7.386522239339469","123.3894031981935","323.1652039581095","244.3485412468977",".9033726852421906",null],[null,".1188346323256724",".9818842403784709","9.90701223456619","328.5737122656732","22.26928840507718","45.52224587127461","1.013009783335162",null],[null,".1646773731452713","1.010920878636472",".9252716976242131","338.1206486822695","69.90922814507495","310.5953670621786",".9696797464386664",null],[null,".1621210906019857","1.038794743094763","18.89916481563863","320.7814897259079","269.0050165350716","141.5404154286425",".9309137801306998",null],[null,".4825616353275122","1.066417456114203","9.896081312413505","124.3680207172754","136.87811674","128.1351601490884",".8949797434191988",null],[null,".4060858434620074","1.020642413971578","6.602192196576908","339.5231355634464","50.30117908727489","291.2519283580866",".9558586088242833",null],[null,".1513502134906604",".9792917415246386","1.185770535237044","158.5051759148622","230.5668036582406","358.6813261879499","1.017035086429888",null],[null,".07924580889035364","1.077909907891213","9.262381322720406","325.843324788481","166.9157817475501","188.4902085044379",".8807048299159448",null],[null,".0843888197941433","1.072648911237331","1.389181261547734","111.915694217703","81.27242136648574","140.9054867138897",".8871921275680031",null],[null,".1473881582121658","1.065065168393412","1.955566791145228","321.5229840683754","106.2795801872356","248.9773073635299",".8966847858449528",null],[null,".2407591923872197",".9955320133706993","28.48929416170926","139.4880780724914","239.5365018393672","97.78269335565443",".9922502764362456",null],[null,".1503100108365986","1.054296118865733","7.286439038203393","144.4373407899086","283.7878145726252","256.644877072044",".9104585155556213",null],[null,".1796702980106902","1.016364641791763","1.839952250513964","349.7345029416922","259.1083397073177","144.6988422108342",".961899617142366",null],[null,".2477050625795874",".9308671408130571","3.553594173550023","150.1535385728427","248.4322670306572","28.20070565779598","1.097419122841717",null],[null,".2309490419375702","1.039894546200032","12.50857166982668","136.4402167047928","171.7133193528414","65.95069250457665",".9294373547743811",null],[null,".1958022520064051","1.069716175116656","10.37185319134175","157.6660169250624","272.5626637284679","239.2541146058937",".8908431188154016",null],[null,".1808934839447998",".9928990379678511","4.674023369318085","346.0506111330391","58.33881934155432","329.1098798753416",".9961997743923184",null],[null,".107843921539124",".9350862244308482","14.18648878136884","166.6114675346895","215.1150959171337","59.19480406379149","1.090000219220881",null],[null,".3811973389422679",".9385640683487023","12.47150748513734","168.3032621410962","239.7224800530319","353.9629987938058","1.083947350517261",null],[null,".328907624619895","1.033261777808119","17.41287924585984","348.6149039726828","78.01000535871451","255.3058991197224",".9384011414100977",null],[null,".2392721826726601","1.062294198504166","3.258912028067229","169.9415834307746","266.858388012971","232.7907086750524",".9001955451336994",null],[null,".330047774285639","1.084129921292735","5.110666820872246","173.3146878864486","250.9453829657903","217.0740566510134",".8731363674961309",null],[null,".180402053531092",".951680249953721","9.331352709159047","352.2849498384192","60.26029295235564","359.791493370725","1.061616082437976",null],[null,".09310720981200249",".9506948491039955","17.37939538162409","172.8363180131122","164.6023185319077","99.44690108294598","1.063267067116096",null],[null,".3139841615527002","1.049908671929489","7.499073448415206",".0851981370400902","281.3757744174593","102.5548825307328",".9161715249729844",null],[null,".1549317235862529",".9720149959188716","1.584633061588092","88.60203412413914","248.4655217020003","82.64542066984509","1.028477100092661",null],[null,".2633323813711305","1.031870994348443","26.3142417417097","182.7855354522953","113.7599852256701","273.0384146749208",".9402989839615633",null],[null,".3057894640013427","1.066907280309122","4.385159696009761","269.4335663804223","30.6398161808232","64.25707590437891",".8943634774787214",null],[null,".2951249818576383",".9087672907500988","17.60327844711683","5.328459026487145","307.1209561645225","192.5235146777686","1.137692888118804",null],[null,".06723652412717585","1.069137003124072",".5929957562594343","1.815626711797117","154.4628821029031","174.0705259606163",".8915670970121745",null],[null,".1933105264195857",".9174816153769038","3.764648178488635","179.2008021536894","213.3640240688508","60.18142135167626","1.121522570318935",null],[null,".2361488839400553","1.053929298444352","2.341337800628731","177.7899747737895","102.2653172004339","91.70372346933037",".9109338849686454",null],[null,".4136941941298029","1.087084221126763","6.020267790343354","179.6173986869709","124.2612069604293","288.0388176154577",".8695794858298007",null],[null,".2203136057897272",".9458094607127113","10.07856020306368","2.79704480844317","58.87132791923968","349.6054966039811","1.071515834108469",null],[null,".04796047837086242","1.044161164261247","24.11857826912978","185.9463744045225","90.27165493461918","277.7746092683421",".9237464222868301",null],[null,".06730405378606483",".9401975008507355","4.687577179324506","12.39547956641331","5.896595457281125","61.75098026835926","1.081123817803192",null],[null,".1352649528575575",".989123857725851","2.116910607868","201.5302598543103","107.0578952003826","97.83073404188642","1.001908493095778",null],[null,".1774725160608281",".9997077338463968","2.74970032399178","69.73307972557916","354.8567691946101","304.9549490727675",".9860399161526847",null],[null,".1553972180478992","1.078615814868811","13.88113029364543","158.1211732098568","280.4663602645175","235.6206519639766",".8798403970750739",null],[null,".1654207700922228","1.090337184407366","6.884665492801306","29.30278195627313","91.97251974796535","181.2604290843351",".8656908732514436",null],[null,".3578221128127069","1.091190845072961","32.60172676391749","199.6001913720462","261.1012437654602","62.44795991821735",".8646752007455829",null],[null,".1242618920085763","1.051830012660044","26.53054860080385","200.8196624138587","280.6714587715583","212.0818655585472",".9136623644502226",null],[null,".1935904134957015","1.059453335570859","2.595560003337353","199.3445554242728","91.89172162365016","72.26064587816647",".9038187047957",null],[null,".04346923422696815",".9831663619166194","2.7335599668285","24.81756325165821","304.1778111249509","76.50283139781973","1.011028870155358",null],[null,".02559373678220118","1.032508416204394","4.749865159665382","23.43514347374792","155.1822466007544","182.2653090296856",".939428374193131",null],[null,".2160662518968999","1.033220741529862",".6210041061798985","142.2525749151073","320.1971576930542","234.6038160461713",".9384570474781292",null],[null,".1469550096046114","1.002618652829583","6.898995150363328","198.9052606485369","254.4462613355013","275.5618453908597",".9817488559995577",null],[null,".03758853535629559","1.082761864773533","14.86064727440098","26.8458434793898","236.3231608345786","65.81598154686078",".8747916859482391",null],[null,".3274221234051609","1.046255667900049","15.28131390679546","312.1495803461542","356.9066639663648","67.68519582148431",".9209739332156155",null],[null,".1596809445007395","1.090372624443409","3.158651821570649","56.08283284194506","213.4142646291234","299.4975505138072",".8656486676800214",null],[null,".3000298042890214","1.037202409337902","4.205672369348453","27.95188025291323","74.2397700214046","221.5569723657293",".9330583387074953",null],[null,".02564956060374363","1.059173232442684","1.260559453958209","79.94559904662064","194.1431707698858","71.27433745825087",".9041772568845048",null],[null,".08848898108278189","1.067371169925226","2.21335135655303","200.3529920559191","81.07081353345527","64.19414163356056",".893780492580436",null],[null,".399684816741965",".976163836120191","20.47387854850897","207.2904169036966","120.7001261898527","125.438509413075","1.021927302916987",null],[null,".3752797392020923","1.090143183598044","2.745643283825218","29.46705968389515","284.6383522619093","51.80241053663448",".86592196977733",null],[null,".346513067970852","1.077342681428411","16.34328897578506","26.6038521259871","58.31609066451561","83.96370329213009",".8814004648936501",null],[null,".2507536833025115",".9509887971498749","3.840859501066817","245.2076713961629","194.9631629443285","322.8383394878298","1.062774125782935",null],[null,".4292499871923189",".9952395377921136","31.91049189963519","210.8220047084194","241.1195959744371","249.2203778618661",".9926877042356282",null],[null,".471327536764486",".9446795284060241","9.533731629877542","212.1854421716859","233.6813177586315","296.5281100857769","1.073438870902731",null],[null,".04893090384673649","1.013346813013808","1.539209155100449","67.91537161301862","35.25894003059849","269.987938935106",".9661997370024904",null],[null,".1719453195393714","1.016014249523324","7.509805479217272","144.0546544188618","208.3314296751086","42.11285040630245",".9623972547191579",null],[null,".1594397479328246","1.034324601240816","10.45244041848073","209.8780204841804","258.9768189489411","232.0084746642074",".9369551275544763",null],[null,".240804572804374","1.058171447369952","9.093165490822782","208.9864164161923","270.2656122730986","197.2490282462834",".9054615557975078",null],[null,".2252187707516203",".9788161506265705","7.153786631267031","207.9785959008328","252.7814792202088","278.3375142878697","1.017776417750877",null],[null,".3545662960042745",".9520348555481164","19.88719127894245","216.9607418508675","241.2441659621421","289.9041555669099","1.061023005499304",null],[null,".1860265544991429",".9521576098592014","1.535757526667351","130.54444471744","302.5654209276682","339.1660643567272","1.060817827886734",null],[null,".3605032972795971","1.069046710685363","11.68787291502662","217.6483295525766","256.921517701527","180.210943373955",".8916800529753363",null],[null,".01326084561771929","1.056003248747373",".8398638928750016","213.5162578466776","53.66130088020635","80.31402502110419",".9082516436350717",null],[null,".2640223153851122","1.079349631211445","2.65338956923913","29.63827206557584","268.2197885795659","61.02559980741312",".8789432852959377",null],[null,".167352804021529",".9364403899275412","16.8344653446494","49.20713335665392","304.0128563414657","104.064562363347","1.087636736785541",null],[null,".1699988301706505",".9264001767369074","14.8396677618933","228.5163782211454","221.0309787834331","345.8896209228891","1.105366071448139",null],[null,".1401376915324184","1.040951708443469","26.62243936914708","217.0296099108846","258.1284114062244","223.1117446275863",".9280218473660378",null],[null,".1713894685514195","1.015324185535171","10.17614936198676","50.58739601248322","283.9344125743642","60.1988827659395",".9633785597927111",null],[null,".3805865678923238",".9529039241657096","10.03775383629537","70.6871177344095","32.27682841314802","281.7011241236506","1.05957182322819",null],[null,".2281225683097129","1.059310178002027","8.055412907813439","230.487298396925","268.9035608088672","178.998151819478",".9040019271358054",null],[null,".2517929820866241",".9405439562783371","5.46977062904955","88.74996118952483","289.619445372104","80.30394707812538","1.080526514428437",null],[null,".2358998026481947","1.063671081986238","20.12976002966101","74.16809301660574","297.2045606288644","346.5617297701031",".8984482053769471",null],[null,".3333013963188573",".9288373565393548","29.65645738480731","227.4424171232796","202.0699704476814","1.354003252879054","1.101018365327502",null],[null,".2878373643591991","1.099110275286195","5.60567751041377","69.53298502866613","264.5326260014374","18.93863435146902",".8553466758511155",null],[null,".2416505992611493","1.096238436288864","9.203594373826872","238.0030982764277","252.437826861788","161.0902902710199",".8587100308558345",null],[null,".237140880372396","1.079270564916318","10.1681966803503","236.268100465104","271.6608490669526","157.0721726854493",".8790398728397171",null],[null,".5865684957155082","1.023067316819297","3.745609395183194","27.62959509347038","49.71543673514375","246.2634341511776",".9524622190442124",null],[null,".3552937370138567","1.077004476048693","2.935978404081844","19.11379574193642","343.832680443093","3.774788806213511",".8818156689896276",null],[null,".2856481691839361",".9335609830623945","19.8054323230984","59.99152707131739","303.8443487905469","108.7956196688941","1.092672555019402",null],[null,".2956161151086382","1.049338272625529","14.89422294370055","239.0586756335975","248.3404411073851","190.5880642038398",".9169186452637237",null],[null,".04111954424487134","1.045213389276946","9.124537804192791","61.39846322396086","229.2156470206739","67.56102108794572",".9223518585998002",null],[null,".2400046678997642","1.045064176166163","13.44413174254697","64.88284732903256","71.30973405088528","190.242767019899",".9225494042227927",null],[null,".3578435790203331","1.012836656526634","11.81779344903505","59.35667912822161","65.54142980019257","211.4668252903423",".9669298277692884",null],[null,".24650081217326",".9221968357295139","12.04773406258538","232.3518143590031","221.8455548952338","337.1782925730825","1.112932006420285",null],[null,".145313338985483",".9105059246334212","3.511976909892415","236.3193833380432","214.9607568630027","2.868527511639534","1.134435764620639",null],[null,".09046513874136636","1.066671073663322","5.975300675217114","63.28495210992228","112.8453516540744","154.7879831518048",".894660569474271",null],[null,".109781874329789",".9762486585622812","3.118560487653802","67.39354222650557","60.71135311698339","266.0389867414194","1.021794118887778",null],[null,".2335427624124782",".9516591312301317","14.51817740821781","239.6308935238607","240.1886788047528","281.8967199041231","1.061651420880465",null],[null,".5152653819546198","1.020921698196746","18.86997163123876","245.5356568554395","239.8568286854322","185.644642143466",".9554664073850635",null],[null,".1400271450328336",".9073383316809224","28.13038516361829","243.8312748070238","161.8857309410315","71.93361292514064","1.1403815596331",null],[null,".1966157508246256",".956816031617132","24.90935554775066","243.4927073703088","240.2420256932656","276.9285632473806","1.053080106826451",null],[null,".07960514750728807","1.048076559575242",".5849041227096885","233.0336152950855","307.0326675628419","164.3461839308607",".9185748739759956",null],[null,".1133509502837944","1.019805213505356","2.373582733321036","257.813269814701","265.0139769550922","196.6270483137922",".9570359064275883",null],[null,".2007251884444023","1.091558464692725","29.15544390463065","193.4980734484341","298.3269529242727","163.7235821134527",".8642384241361287",null],[null,".07774489219651794",".96933862396568","3.812889761590297","90.00231743705912","328.4959043181408","355.9618778971522","1.032739521371842",null],[null,".3452390263971228",".9299367468689433","18.13008359890607","256.9636222379349","203.4876011746626","322.5324543099269","1.099066472702509",null],[null,".0920430619509191","1.030818789036606","15.39395062085737","97.02576707365122","276.8344120287571","357.1383200037636",".9417390625163895",null],[null,".1409796745732465","1.095321000024492","2.340688192177253","242.3574051454631","296.7264655645445","132.1388471988502",".8597891346073298",null],[null,".1354567280687957",".9388000220885893","18.47622337777628","264.2900432277987","219.3840555405764","299.4531292138259","1.083538724578789",null],[null,".0795048971017332","1.084841923778052","24.05148318655043","94.92332796751039","240.7954974116427","2.571598433120676",".8722769244272075",null],[null,".2542930284616546","1.06744426376643","15.32482389632663","98.17286098743558","273.2090779215347","359.6053888727205",".8936886909755756",null],[null,".1191672962622599",".9399346379392757","4.025176443142856","106.2297595318362","34.34579538090561","281.542034079692","1.081577371504189",null],[null,".2846571070787235",".9412891836251176","21.07261646085935","283.0428609196238","134.082720504732","37.73036308775589","1.079243574198375",null],[null,".08308547658206356",".968555387726197","3.027116083798476","113.293439468724","17.94930654819458","273.5624429967241","1.033992484086028",null],[null,".1682845087258039","1.085568081501963","11.11595594301635","293.5565644568155","84.02465889769303","334.4438416468052",".8714018461619404",null],[null,".1244502305543998","1.032559049984665","20.23177519983193","117.248568088606","270.8173074501445","349.6597540904302",".9393592746679167",null],[null,".2021055485434495",".9732227882932689","4.079623040541257","116.2284544785509","297.4932683085397","12.17383926485319","1.026563147802146",null],[null,".3840425554292497",".9105091636977719","7.006835158022649","124.7290474735857","306.9355577278405","61.79855917956299","1.134429711127733",null],[null,".4574564317117814",".9523425565275179","20.27603601357286","131.8949460905258","41.15408993841982","82.49779072736085","1.060508823743275",null],[null,".4879647971733782","1.04594822210713","22.21147005250427","121.6670801668049","313.3435833928424","338.6304984808294",".9213800293703505",null],[null,".1608370714596183","1.043016390164048",".3762022906154748","136.5150801714238","262.4544818842063","337.9113871384269",".9252676415543291",null],[null,".2912360650266826",".976438421307402","13.08736203775265","308.3600503148619","132.5455049132576","352.5003339088379","1.021496267484497",null],[null,".5140984006211394","1.022969734756952","17.80834037675296","130.9939069739758","298.6335280992374",".9183403261038402",".9525985067186165",null],[null,".1247043337689218","1.023738254690464","1.7228522110547","139.418751486042","274.1735420532971","331.2722899734425",".9515260350315459",null],[null,".182552514997237",".9799899646492013","5.550105259432402","125.9168394493227","311.5780746487516","339.0175825811758","1.015948354513746",null],[null,".1703169674897107","1.042315429659988","1.022977354817616","84.19684780184596","139.3773843353559","116.1172117562416",".9262011666909346",null],[null,".05977063915167383",".9674029224447778","1.095028574907334","319.3034734441137","148.7668108584581","301.386587984307","1.035840724215588",null],[null,".1812925203646302",".9046121087406434","9.520190426273688","141.9938236669585","324.2989220243959","359.9126576905933","1.145540581118422",null],[null,".08589838032550452",".9601929896735387","12.67239796159157","146.9314521296013","335.6637608493896","292.1489986698642","1.047529537103238",null],[null,".3171628960765131",".9406041381183021","9.372857808436416","328.2765265059977","134.2303656991568","355.2924520092909","1.080422814533394",null],[null,".1977444967674455",".9791926924608813","8.117675940859643","331.2123697873921","124.9794276655744","321.6728435074994","1.017189405780898",null],[null,".6027592928009943","1.053142866830924","27.35909748441895","337.6801463133972","125.4002831760406","318.8502562189583",".9119544315880048",null],[null,".154276608598393",".993414995056093","4.631779319274132","329.1354710185558","110.4981136493211","326.0167623451914",".9954237700152114",null],[null,".07220889334049224","1.075234843283726","26.17299510705182","330.3679105235337","176.8318875184959","180.3433230170829",".8839935166503964",null],[null,".208910840233577","1.012104880536225","8.645648086096061","332.1031029788347","110.7286625495475","317.9798688283112",".9679786873230224",null],[null,".2676841255570189",".9839169827418791","1.29073657656507","348.8845484925029","98.1142547193672","337.9534912525349","1.009872134505109",null],[null,".07165199609166965","1.09034136479729","7.298891409538832","152.683412286409","264.1916551900724","285.3479496036239",".8656858946428374",null],[null,".2172227958332303",".971943622829525","25.09128928627424","334.918321257921","233.7833143426376","179.8775086997709","1.028590388971491",null],[null,".3449888835646784",".9218961959217661","8.879482685431329","315.2318026406215","248.9389675110205","199.9337455202498","1.113476458620361",null],[null,".5672973910088549",".9482007842556217","37.1663668611361","151.6933124832153","48.7433127863023","67.47441953921468","1.06746491228831",null],[null,".2350935114545285",".9836982746431205","12.63946447735929","168.1777814164941","34.6521233762185","167.705811595363","1.010208944322086",null],[null,".1975046324047007",".9074741854153475","4.487289820566079","344.5664967058951","138.3353836397456","340.7380611535876","1.140125487398299",null],[null,".2036977709047995","1.035769245675935","1.613361519203854","345.8149501563975","261.7046979009588","92.81665362060733",".9349955768149196",null],[null,".03448739358094088",".9906440911949371","1.614214059930228","165.2539791172671","28.65234753788963","190.1289401032938",".9996030985435009",null],[null,".1059972419123586",".9797283764505387","4.013424423693834","201.8831077170597","329.9513997225782","226.6094487932448","1.01635527011167",null],[null,".1691507638069325","1.048762614646295","16.88250417349695","343.9845796110431","272.0654901122117","81.80785170600399",".9176736835600302",null],[null,".1072041591641754","1.025987999332328","8.827895287529484","337.6941653540596","102.4623854272052","301.2445892627301",".9483980501043578",null],[null,".08669702920260142","1.049887128488148","6.447973445668602","205.0694304416483","255.8208649129829","267.4280893776877",".9161997245597151",null],[null,".3490109492182364",".9359195173803219","7.775790598991374","169.2192175161839","54.45311687299589","88.32592531489846","1.088544825977821",null],[null,".4333135009526387","1.028746080289797","8.078253081324103","33.63521772803699","87.40648679685478","293.7857481557091",".9445866072502361",null],[null,".1333112031412194",".9409863503375991","14.33266891557771","359.010619637268","191.4607791835382","226.9279133845569","1.079764608069426",null],[null,".4731540622381414","1.053647347066545","28.0029325988046","173.8266504820911","59.0010725653311","70.43914775274774",".9112995522568841",null],[null,".04399881045320948",".9917306535348953","8.027075802927513","170.1361236664937","301.8745173245961","280.0476804112683",".99796076724189",null],[null,".8356955973452245","1.079422529005859","3.823636396289461","18.37640086513352","177.849436527799","44.52659852460142",".8788542488759054",null],[null,".121687437927587",".960268807672097","2.128011753325641","255.0160642292929","279.0468470103316","235.5353530911318","1.047405478051341",null],[null,".1849118080678567",".9742404367330483","2.115785361668529","156.6256792532628","314.3335782317204","308.6634989950709","1.024955114263276",null],[null,".1601962212792133",".903978151003341","2.142298921227758","147.0446613782931","12.55506095031848","293.0169826980979","1.146745839714481",null],[null,".2488082934564662","1.00699647336104","28.46227919131649","168.7884520603585","319.9898101120123","274.7637829400496",".975353730758861",null],[null,".02186890507047689","1.031887730216192","3.173345744931831","168.191681657944","34.53711184034514","161.1176910197883",".9402761084269894",null],[null,".2669379378188558",".913017854028952","2.947377667820422","240.2103596500386","333.7528910818257","206.9037331266918","1.129757332044291",null],[null,".1286800207919259","1.069405804407847","6.455108820976318","205.1040221231298","296.8546733586916","220.2149890409073",".8912309673797136",null],[null,".08523554871967566","1.058265295435355","7.856044737126298","193.9039343521237","280.5330783252148","248.6438446037725",".905341112561235",null],[null,".1906365092442003",".9093878524044561","13.61633666617664","173.8876717677683","36.42328306076735","217.7572844365606","1.136528553031637",null],[null,".3649767538367535",".9291177999803192","14.46100609920283","177.2400183600314","303.7285875063174","347.9911281796714","1.100519908493737",null],[null,".05264010107308053",".9914159915182434","8.036232661042021","182.0228651724449","275.3869656505723","295.7911470721974",".9984359137979986",null],[null,".2476894086380722",".9722777685804643","11.98550443375681","187.9994030452933","11.33023231325789","190.5309762179994","1.028060186203349",null],[null,".1497543793344793",".9958559307681066","3.574417981343037","353.5289966765766","249.5711658927063","126.2364446867389",".9917661989003407",null],[null,".08784975385647022","1.011575750295242","8.058447240151125","198.890773748359","13.13971528765686","159.2757027037925",".9687382751761734",null],[null,".1928040745517069",".9806086184914115","15.40631678128586","359.3379505966043","230.5504127901575","148.3129049830111","1.014987082300802",null],[null,".3110735221847136","1.034093403897311","13.27786926374361","352.766085813273","246.2678941453674","81.82380625954926",".9372693646093583",null],[null,".3051259705810212","1.012913198805106","15.13069987519251",".9544963006298104","106.6427179765709","304.2992076482659",".9668202286239391",null],[null,".1532081593813206",".9507174241796076","5.96164565130264","183.0017412062976","303.3331470757685","302.4238350311674","1.063229195939025",null],[null,".4222946653477683",".98190170455256","3.32272462852258","356.4118425614677","242.6069108382734","106.6509222971605","1.012982757258423",null],[null,".3602770159511343",".9507143799970568","10.70131359905309",".3375305788682985","118.5347290910852","335.7554476853258","1.063234302624731",null],[null,".2795467330830999","1.077487700888488","2.218697131365613","205.1827531561064","57.03590813697384","49.36467363575059",".8812225288692016",null],[null,".08175821591881127","1.08924130794789","1.812182326913968","190.3471606104892","128.8967871485142","12.69959579248964",".8669976481867577",null],[null,".08787917831278319",".9828529203485353","2.816740534134508","29.94491760550236","104.9085278448333","267.5059918530726","1.011512549450684",null],[null,".2870417287110248",".9669275559874215","2.381183412341643","9.78476353608762","114.7057526320361","310.7022900807139","1.03660468700741",null],[null,".3304961071746935","1.024665169198905","10.86402383353117","189.4357368156264","65.87607709824916","78.02726349630379",".95023519805023",null],[null,".5902614315465522","1.05668071638121","22.7084232595731","10.37050985387605","132.6236471475012","296.6191480071544",".907378325259096",null],[null,".2225708430065856",".9929425920669467","19.4795189143737","10.85555491781286","247.7056638001727","103.2375568588715",".996134229654525",null],[null,".1877419225151357",".9088253920789158","12.18858444387675","12.93754115965705","162.4567339559041","274.077665374087","1.137583790574851",null],[null,".09155264202052303","1.076515455465339","1.130504550186828","340.7568413525099","278.4992075154036","76.02666602820916",".882416600884399",null],[null,".08610504039086896","1.053218108658439","4.406781896690916","16.92495808567291","292.02841761745","38.75936456227227",".9118567083928319",null],[null,".3125319210656125","1.025974787684072","12.35674053926481","21.26925818063777","102.7630367559171","282.8177768720817",".9484163691828568",null],[null,".1480436690133416","1.073150781205782","7.36715958401586","201.0235880847007","257.2094079465946","265.3885698742154",".8865698435910661",null],[null,".03737204512057295","1.081064694628011","15.56236800947408","203.9765552410566","119.0768863862344","50.30697665659333",".8768525055544539",null],[null,".3781428076253586","1.042466229488775","7.800842951639614","17.86148638492724","235.507736083444","69.92678981645668",".9260002020138105",null],[null,".2699594364548111",".9431853390879573","1.036002508810504","21.46574920204737","236.2973326810022","129.9914515827884","1.075990685309461",null],[null,".1330462530807554","1.046527080844144","5.102037802233682","210.7704641888081","276.8656881612902","246.2397328672142",".9206156796495636",null],[null,".1609183370455547",".9641026488724678","10.28383693633512","20.28566162879912","113.364144538347","288.2616748073714","1.041164039634711",null],[null,".3514300161407622",".9290418757484262","1.703857753242134","198.3659364068321","303.6754385225088","323.1733524823223","1.100654818186202",null],[null,".3702920802238998","1.05798823707117","21.75218272202921","170.6921159926532","22.28881372855189","158.6637137936985",".9056967621890547",null],[null,".09946398436290778","1.006548001844945","13.96014465704128","199.6528670387609","345.2773433037623","199.7435665429067",".9760056625375563",null],[null,".007070857831929555","1.022109113870185","34.83146955231652","19.12500702082372","237.9708885272784","121.5145953579601",".9538018988672555",null],[null,".2144284685876175",".9990369401319219","4.494630667314681","35.80327852867529","97.08193782093095","276.5518540612014",".9870331833181528",null],[null,".08995950031247049","1.096988278738077","1.394362825745869","13.58248518144033","38.95493383122584","289.2716000244523",".8578297290341718",null],[null,".4653167558407985",".9682995589719657","16.56561053174343","25.58796298235287","211.1416747276942","106.5118745999749","1.034402288796799",null],[null,".4224266726239119","1.030804789563623","8.386721300649816","17.62325304697287","246.3220289708957","66.29876683430797",".9417582473738796",null],[null,".4070315194386934",".9624090079475378","24.38429000301588","27.76915522606422","120.2966669778444","299.3735129708148","1.043913598665559",null],[null,".1483894184742467",".9704486414168739","2.827258342148888","355.1027461742819","249.2189415956121","142.7355189447936","1.030968127750732",null],[null,".1431099462575974","1.039321187758428","19.88557921767506","25.94749604773484","86.89026682277505","267.7225401936664",".9302065696936951",null],[null,".2188836216696415",".9128880458131428","1.992814324948575","337.3740460943765","265.4144790703482","173.7118551907763","1.129998309561869",null],[null,".4360097904984584","1.076942111435939",".6976107813747211","222.5913847357695","46.63872399473849","62.85642454539389",".8818922676595398",null],[null,".1792568815100221",".9040358386565455","8.381814581426926","24.30494868465761","138.4056954359347","295.3742937241429","1.146636078544379",null],[null,".2506535225312075",".9375058966146737",".4593301667465175","16.29818254561961","246.0457208830607","130.8814467851197","1.085783060642751",null],[null,".2728882893733837",".9659491841270096","11.14760608907775","206.2618001497947","293.3199334220124","294.6129168251421","1.038179989781782",null],[null,".8145406900309772",".9647900021461213","18.85563263700351","205.2218846941948","31.4659369560315","56.59594918764291","1.040051590245731",null],[null,".1039279944368191","1.099402001092699","27.7545991489488","21.73779577425751","228.4792785540495","125.803404861671",".8550062496763516",null],[null,".09862656994505301","1.012006162383835","4.088212465881228","217.8291298864766","59.34041903526327","89.37853209563723",".9681203258842376",null],[null,".7155772668825912","1.090892839640101","4.680677682553434","240.4743932179348","281.1597459479905","305.0137227678149",".8650295373428446",null],[null,".1779927413453858",".9652385202645767","12.67196063990843","25.50040981742353","245.722930870259","113.2916290534655","1.039326752117804",null],[null,".1506230836409804","1.032472036063486","4.164791709658024","30.48642265016263","93.36129495417657","259.0650659111933",".9394780271180878",null],[null,".2971855145755121","1.017673965371183","11.57830029249827","169.6552222790713","14.19323559393398","223.7711220971398",".9600438666087261",null],[null,".1515735026298444",".940765639606819",".5292947460819144","89.10268149810805","74.11668270750219","268.3974763080573","1.080144611764501",null],[null,".3337940250311291","1.074549452309015","4.242710478377937","22.91409477182042","265.8681731578035","19.99861385308222",".8848394215740464",null],[null,".1730538480194359",".9772470928863016","18.28385598425105","64.45317334744142","191.4329843498307","117.2956135334971","1.020228598194114",null],[null,".1061176774349636","1.09995306413318","27.82486777476047","227.8492655682022","262.2379974642418","215.9471521955992",".8543638086363209",null],[null,".1192212052347932",".9956466796445508",".1124597105785082","109.9962207152695","28.23115278661687","261.5623124827567",".9920788686944512",null],[null,".2725291186788444","1.066161857359222","5.458678649221497","19.58832593985527","287.3582453459412","14.04024107014344",".8953016027358812",null],[null,".1353473957895956",".9083271445849859","5.506295122436327","217.1105727008608","23.46036991287757","189.5276674623394","1.138519922445344",null],[null,".3113168188319602","1.036952117709834","2.71327509863177","216.8968084998816","72.9727719422346","40.75478766625781",".9333961808968058",null],[null,".06773785566903885","1.053534762117397","28.94653711769822","39.83893064623555","234.3385309174628","75.29252790818994",".9114456338458565",null],[null,".1500376918919341","1.062181010538559","9.145924953317531","37.75829387466031","275.4864587142218","22.69582059160512",".9003394387108405",null],[null,".1819052274438401",".9423729009710321","19.89022510286653","224.8538063924184","301.413097081723","268.3864950202294","1.077382434100088",null],[null,".171066788601931","1.019940070437863","5.862798264112445","226.9769020591039","274.9487629628392","252.1171341952508",".9568461031282133",null],[null,".3469393711469591",".905326810197245","4.509152083407392","226.5765817614835","52.33422399075497","122.402667480942","1.144184345046168",null],[null,".3631524818972742","1.041274405548582","28.71744159236492","53.37725722565594","123.3089540166846","267.8880352410766",".9275904815911463",null],[null,".1006827317198487","1.014871456088427","1.298335563464258","37.20923982640871","109.4794763156258","242.5124820155555",".9640232697368912",null],[null,".117049162932243",".9211602672322187","8.971772374636268","227.9996104186","32.64599027582425","159.1197749872302","1.114811084543727",null],[null,".08777096398962642",".9621178961963176","8.818295378229466","227.7021294593909","53.48392752842209","114.7093299754454","1.04438742599522",null],[null,".3030067315739811","1.011940422791573",".9086807092849791","268.4921545104487","254.2733714392262","249.4803656033543",".9682146667184559",null],[null,".08209906591449834",".9602567562822696","13.71882320677775","229.2052239324792","348.9184479248566","190.6780658994204","1.047425195795441",null],[null,".3443271354481044",".9326917361319965","16.44532362877712","233.0855153962081","306.1358192372244","282.2833916613474","1.094200428846736",null],[null,".2548318103866765","1.057279263524848","12.14736988272695","249.6629073034266","63.16799247695501","17.81719606791537",".906607906529541",null],[null,".6935772553437429",".9028509116276814","39.26849628468131","232.5151579950654","326.7101624346301","293.3219249060393","1.148894135371861",null],[null,".08225383403770047","1.091506032682622","17.03321689056503","232.5619567304223","217.7260324487173","259.2743861996033",".8643006972256971",null],[null,".2488185962300482",".9235424519833092","5.337109712971437","222.3811473658178","65.01272646147844","113.5408166733076","1.110500552789565",null],[null,".2271873777464455","1.087611375267508","2.106760552696702","53.95676566385059","283.5594342482343","343.3933079061013",".8689473479814128",null],[null,".3748078868438618",".9093892684346482","27.87873906561791","57.79069834992617","227.9733144645301","96.12497523332074","1.136525898461959",null],[null,".2146278290050434","1.087646513973115","9.670722783792012","71.10340111293243","243.4945907387687","16.70159035024803",".8689052385671296",null],[null,".5325577044202175","1.09386673411796","10.90153261848597","238.4636162491836","333.575958838142","181.4798365953667",".8615043035690672",null],[null,".2057970631417081","1.06963792688746","2.483904150649989","251.7176285457413","263.1413059597749","222.3536741659053",".8909408736298174",null],[null,".05081907746550363","1.028491952680673","9.18337630677725","69.73888808417814","283.5163965370633","12.28214516709461",".9449367223332135",null],[null,".1953282634051726","1.022441440555963","4.185282920241831","68.29153741308201","98.49405574457721","230.3792454279763",".9533369117492534",null],[null,".2045817272671904",".9033272244185006","13.03145525547188","67.41831493753789","141.0678511719577","245.0755935413944","1.147985559586218",null],[null,".2530246561525705","1.09745359239622","1.068220120760256","117.5434234641664","42.65904843846136","212.424060219559",".8572842149750171",null],[null,".1446306627620679",".9431655632886725","5.017995577045496","251.774527452656","55.71553557315428","90.26224255899868","1.076024526696688",null],[null,".3425541533763516",".9843161040787479","2.648712454642936","71.94981960158923","116.9337452364616","242.3171326161188","1.009257971046551",null],[null,".2207188123786866","1.093163665161744","1.812540916454396","241.6448201630952","108.6875527297159","331.3669029356535",".8623355528077953",null],[null,".1950263314777039","1.018650610530289","7.323928133886197","78.51601721183134","92.77857097146106","227.0861233666386",".9586635148820554",null],[null,".1029125947979728","1.097766922548439","1.005666599566854","225.2067209933453","159.2879788709248","310.5618524990938",".8569172056127465",null],[null,".4650329617970606","1.075065223428391","45.02003840406527","73.3324261539872","116.2658501294971","299.4242453901398",".8842027347936495",null],[null,".1376760681328668",".9359834237562599","5.115747111771505","256.037171259175","60.62704893075864","85.86593222202352","1.088433343606976",null],[null,".1295972791301603",".9487187705523296","5.716948692310155","281.6116854867324","305.7234962466046","186.075371697058","1.066590801750146",null],[null,".126132676746993","1.086302384388176","18.6423117212169","255.9987601138707","131.4998677810763","311.0269176693055",".8705184391731891",null],[null,".2619334120615447","1.034275498530713","3.131023877961882","229.0962056920902","328.5569107349445","202.1520682199985",".9370218519167772",null],[null,".06646828975353271","1.026209240758637","1.937333037388408","260.8662575991722","279.4688464035634","200.2047887375859",".9480913675787802",null],[null,".4375805836507249","1.084991777067172","18.71870375503012","262.8780512865168","61.92957856973244","64.74095577618436",".8720962192982258",null],[null,".1509511124248072","1.098137273993188","28.74842878581838","267.0065164591623","84.56400440423256","340.3502481262431",".8564837437314163",null],[null,".05762871830703023","1.051198167747926","6.446112956184353","79.80647395137679","7.461669490240901","276.7092884276894",".9144862523820082",null],[null,".09867800812694787","1.022934598331546","5.342024380417365","83.16240104275381","109.0827875914559","193.4026494577865",".9526475878531967",null],[null,".06913943189816778","1.036058913123879","1.229592210397065","257.9878902434496","133.4828045923004","331.9094207207623",".9346034868753552",null],[null,".4050401110495213",".9217803888185898","5.716883911641727","97.46829682669777","125.7455247182288","244.3741122920238","1.113686301227164",null],[null,".05479516294495583",".9488405793260408","8.000759071420726","270.5423403537192","335.7765737228762","166.4287762610971","1.066385420650279",null],[null,".2801978238379528",".900594141597437","5.331328467901934","64.03976173076016","236.0805194367986","126.5135577161089","1.153215305173543",null],[null,".0495172887930994","1.00771712112007","4.477789875271241","290.8227623083798","239.8273533603513","217.69338475684",".9743076621940936",null],[null,".2867974337067644","1.069373392753304","22.8913439412053","283.8527292305988","272.4489093740074","193.871542868855",".891271486186296",null],[null,".1221985637224798",".9350630025103241","13.02863779363134","94.91848594889736","182.2032021594509","140.1838225870103","1.090040824060682",null],[null,".1117981234294058",".9538589734543932","1.249346771312054","168.8039739186353","162.0642459319623","64.4459091928139","1.057980880541025",null],[null,".5757368303044065","1.082018526866734","3.478112952527661","240.1946567991799","346.3449803438657","308.1135564727816",".8756933028895579",null],[null,".1367878929287216",".9665303299207993","8.287684976437404","118.9480808673388","103.2962282889768","192.8760634300772","1.037243790655647",null],[null,".2532451288992146",".9991789200810334","5.75213095448481","101.8921817768105","256.7034174746906","358.5806386601454",".9868228096705194",null],[null,".334712183097889","1.048047275459628","21.4552035631781","291.8444189043715","44.23531375429496","95.90775751297706",".9186133739196679",null],[null,".1042426993500453","1.073130404075024","29.13235685327781","110.1826951354045","88.10754117352263","169.8251624604762",".8865950956508163",null],[null,".09419494579218132",".9318228220326763","3.828090712569887","305.7079683547187","356.9097677088451","111.2584308661627","1.095731279617656",null],[null,".08735479859312117",".9129886982832431",".09663001430181424","334.144424820863","340.4156526091119","107.0661831828389","1.129811449659083",null],[null,".1127227677288004",".9724752808807436","2.733210668826757","222.2131473782708","113.9043828869399","56.53925555594732","1.027746999494724",null],[null,".1599450854576893",".9637088483495374","12.74602345361312","133.80753249504","128.6807404089372","155.0087517145323","1.041802281402688",null],[null,".08404182173754826","1.068400974178039","2.918523093007947","315.1276842952676","130.0202352380321","273.0158602217782",".8924885659345994",null],[null,".1445964256522354","1.023394765539205","2.904670041683405","19.31626352843014","350.4605746417776","353.3775804230389",".9520051262450996",null],[null,".2444664309264888","1.006848801070312","7.085010537040574","109.9076538599214","258.4261977209112","348.4465515072593",".9755683180940929",null],[null,".1113015536530832",".9702328185144912","8.544532681823688","309.0297769094514","285.7833235416796","175.9624996302898","1.03131214658218",null],[null,".3077813545546122",".9255762242816026","32.5549321534563","307.7147914536147","51.01149933129149","27.94181430154361","1.106842403262937",null],[null,".4134289836799253","1.096954196506505","10.64696924317609","309.0465543306327","77.91067922663753","278.0950625566156",".8578697083405018",null],[null,".1866323728166178","1.015112225468095","2.407609457261755","131.1010181450144","259.5696683037407","328.3380136421657",".9636803123054133",null],[null,".05011869492534334",".9568945357893144","1.348489646732821","296.7648755120208","58.44596979202839","43.8719245446343","1.052950516547718",null],[null,".2144902710947772","1.048159178292178","19.89054041793054","327.4474579304876","256.4133643371963","169.5956628986427",".9184662693142842",null],[null,".257938533873764",".9346821312021859","14.80515241915056","324.3878536259929","46.93345619275465","15.02369316796171","1.090707158985978",null],[null,".3085788612519353",".9545856433219284","1.56053397572083","276.7508269726329","95.7511801441687","358.3142179369986","1.056773042613584",null],[null,".1284955231053641",".925954716883139",".3231255933188631","302.6072184338254","29.64361623836909","79.56960923196087","1.10616382443031",null],[null,".03453271812901813","1.028732867889944",".1148316389515742","30.39435231754731","127.7284890351015","221.6450884949687",".9446048048257382",null],[null,".1617625985073124","1.02367061844414","24.40554715414371","300.0365086685418","316.1135580768126","245.0541862051456",".9516203408236352",null],[null,".22635364712086",".9338849047638312","1.901615202704491","287.1569413297123","80.80350320731839","23.32202283145077","1.092104107572373",null],[null,".04715565751698883","1.007674562840432","10.44757998502999","135.3477493979187","261.4938542887755","342.5972483630495",".9743693864311773",null],[null,".4433375132148529","1.00797728626661",".9033577542821173","299.3349416261559","319.5444292046077","177.4244900189192",".9739304743215875",null],[null,".2748868484082659",".9866890982254581","13.47626851123432","331.3641187695287","278.363415992731","278.2922585744871","1.005619252363158",null],[null,".2892620918366239","1.057142644512365","14.50703930214676","118.5561768716218","160.2253497599155","129.7020816954437",".9067836593655317",null],[null,".2048148309213948","1.043925392798947","13.62034684669577","323.0680477145403","74.25706035773028","308.1048352819822",".9240593833609697",null],[null,".1247501933530169",".9316231984952408","5.197780999286758","148.172009045406","140.4276090816217","134.5765968440433","1.096083480171502",null],[null,".05673939830944361",".9949407122004725","36.69413945208426","322.9491875285493","325.9523772331812","102.6324330732497",".9931349611818135",null],[null,".0995445751689306",".9427457074006533","1.064129839034273","162.9020630094108","136.9268046251001","115.1379815109846","1.076743425004983",null],[null,".3844095045183988","1.039099793478159","16.99107099870973","339.5513753491448","293.5666409674198","282.8152447827014",".9305038751853432",null],[null,".1861157029609328",".990810148243384","6.53123235478263","151.6755806536923","110.7158537421091","147.2987015376625",".9993518129889252",null],[null,".2148518737734431","1.092524991933928","15.02988980630234","327.6915098575108","255.235393046538","157.0479550381531",".8630918253653235",null],[null,".1528822510947382",".905794867378197","24.39008741969405","147.7084165288778","143.8620404927543","144.8790822791541","1.143297597071611",null],[null,".1491011466348084",".9145421677123068","3.393366970573516","149.110983549275","147.6988448487214","136.6546199559187","1.126933973797304",null],[null,".348198614691006","1.024124564620472","23.10921822718031","126.7111025231796","153.9520391874468","140.2938075003604",".9509876982377098",null],[null,".1684026266352246","1.079538167199557","7.948277972258295","329.5252810892299","105.040215466036","268.3765710335348",".8787130407195091",null],[null,".4679065106412501",".9337503909231681","7.728098834497501","130.2024414560499","243.1288823125188","84.03264468952881","1.092340104916806",null],[null,".03039043572927463",".9788233511265625","4.576469512462355","16.63729552319185","277.3511176593108","103.6445016581831","1.017765187196965",null],[null,".2773217288436439","1.080131474966267","10.0560717933762","129.1503987048428","124.928882365165","289.4440183343746",".8779891348557789",null],[null,".6359261879957672",".9799883214269073","3.623118113783804","342.7249698214698","314.7389893479231","170.6412161208671","1.015950909793716",null],[null,".1926558468087675",".9130508791779075","9.092875936479942","347.113284873043","8.96830415881613","58.28056380668439","1.129696037431401",null],[null,".1901441417274234","1.054164067957929","6.569065989142409","155.5856118126461","260.7591907160822","291.900410849489",".9106295951467739",null],[null,".07996322880179733","1.099451919654256",".5364787341309069","356.1424576216148","111.5026771856366","243.7785838555151",".8549480203938151",null],[null,".4336475802169525","1.08999467250213","12.50346112781489","158.7406317101052","133.1517444199318","112.9340847576228",".866098947799658",null],[null,".04295185919094083","1.067144068221736","5.253941649927434","165.9698581610843","270.2265800087337","283.8462797599176",".8940658193847525",null],[null,".1159460406180962",".9416500202858412","6.339318301580997","346.0000075561762","13.26722462518945","45.10689274562531","1.07862329065953",null],[null,".1051313979394684","1.055456348354044","15.34144570368643","356.2290553847088","255.6142771905891","131.7134330470798",".9089576712066852",null],[null,".2353226837707677",".9629940962833279","8.593929381702734","168.2637767434668","247.7193150295542","317.2932498869887","1.042962364037582",null],[null,".1406803648119918",".9248191317139282","1.423881392715387","156.9178963852272","239.6723995175832","5.30684730114168","1.108201837133975",null],[null,".3654756343008269",".9307205210716861","5.467942204405669","18.59781022162547","281.9909026807292","151.5505418697236","1.09767845360924",null],[null,".1628268886435914",".9470361897709767","7.769958192939749","356.5861721363284","305.3481647457135","118.5095760909636","1.069434550627466",null],[null,".0962621299882781","1.06723498268856","6.872783475211532","355.7242450712985","254.7322243262406","125.8277498428387",".8939515777404629",null],[null,".6587605830711734",".9597697881863478","3.788326058483019","46.30750228595324","348.6775386533132","64.86738013915263","1.048222460961948",null],[null,".5584366353424296","1.036926658440082","18.12569483066237","172.5877208551501","228.1671214357156","277.0627054737697",".9334305570951985",null],[null,".3089356534893255","1.055149325889807","1.714274672635417","148.0714862176997","275.9807915374207","272.8226217646606",".9093544265050915",null],[null,".4925781080778318",".925562617110071","27.24200610593647","183.1829492741782","145.4054535689631","268.759751635675","1.106866811740844",null],[null,".2205245693283031",".9869831022535216","5.51395822698822","175.5197997311539","238.111141926493","314.5900233578342","1.005169952737609",null],[null,".1774269250573225",".9547925741743363","4.846907312167843","162.2899215701562","243.6680344425366","340.4340585412515","1.05642951182454",null],[null,".1619903801090563",".933371509963531","10.99381671270254","180.9382525068973","126.07651843185","119.3784014043362","1.093005288383257",null],[null,".1450940690779433",".9741103185803864","9.547709996053799","178.3611410744753","129.5914172356812","102.7779984518331","1.025160485847478",null],[null,".2954382655330182","1.065123910932698","18.30130214264865","351.3692410575019","302.4783191018453","109.8550161828185",".8966106074120991",null],[null,".2295076029662113",".9169996101521806","26.65431164238056","176.5475345037456","192.8743510482603","45.40794175667108","1.12240695036059",null],[null,".6444228367903991","1.022317205736233","11.90325678649899","56.92121412977359","267.5495451436332","289.4856975146897",".9535106952435352",null],[null,".5529919778649139",".9173840169649137","16.0054990252686","23.74250645929576","305.3923767263568","287.6737354222489","1.121701549455917",null],[null,".2524008576873916",".9701105125841906","31.10130372950555","28.6970236036925","313.5278858605549","62.2973249278478","1.031507185547447",null],[null,".3334325417215551",".9367457604552392","8.950388467195008","158.0703204904671","254.7132662371228","317.149150799612","1.087104940728182",null],[null,".3857544207839073","1.068326563738088","18.7228436611076","171.6815401154215","156.6819471594544","86.91206689079353",".8925818121742969",null],[null,".05973147164481839","1.023709723509456","13.40189816961725","15.53609843027644","71.8263628626226","285.3604601706886",".9515658143997676",null],[null,".3441626829249008",".9538195732388719","10.94514383700628","186.9154427085235","231.2563118472205","306.1501486909551","1.058046435557435",null],[null,".1413012512469184","1.002433977179368","10.34781754903145","11.09342437127068","276.8142988547073","278.7715751132374",".9820201658252463",null],[null,".3493248931277173","1.065461358224044","11.38642046511723","177.1983836657758","271.3319295895915","239.4800911502762",".8961846864797419",null],[null,".09687147454384612","1.045747258093074","3.352233650534394","30.58119543542312","86.02137874064924","248.0829269318218",".9216456381826088",null],[null,".5509546074810394","1.087071489272599","11.86342001861943","199.7101337168698","120.7885273558073","110.1947822379192",".8695947627343882",null],[null,".1855512520575811","1.088451499326294","24.73939811557722","197.7942072395593","117.2210070962812","71.40222357745992",".8679414933050066",null],[null,".1591229903515243","1.055225152600375","3.345694514428273","212.7456142682178","250.9122756738116","249.244014115142",".9092564112388717",null],[null,".08592688829594351","1.02145736714331","3.967947883773246","180.1329579167624","139.8683002894572","241.4646788343958",".9547149126183943",null],[null,".1538031914632761",".9721511462731655","4.529094066266698","24.85685170013341","60.9999849464637","292.7343467872262","1.028261049400469",null],[null,".4023108092632502","1.066548213678105","1.022036219855357","201.9181049003445","105.6931089373413","109.8362396238265",".8948151632587008",null],[null,".1312937191330573","1.057529803525692","28.92184861365426","28.04205782822435","14.86196769660892","322.5352198194577",".9062857481024402",null],[null,".2512826358974384","1.015697856840625","1.7807785037416","195.321725653846","109.7598608074085","105.7893425885679",".9628469738340814",null],[null,".08315833812355283","1.028667348098939","15.69628756571221","27.81888999286657","296.8726585386966","61.30651939794071",".9446950545478756",null],[null,".08804278157403549",".9460595687871413","14.70048010549536","201.093271456225","166.8780106730473","38.50849454775424","1.071090950108994",null],[null,".2353188002468697","1.098632355684791","9.078843287630646","196.3839967694603","281.5102330898405","218.7251332243029",".8559048672160132",null],[null,".1980010464312805",".9053710917013199","1.072057406982023","190.0285232565219","158.1361475682534","82.70440059951605","1.144100403359695",null],[null,".2126263956949259",".9080614063355698","13.65159390449592","202.1376416332889","225.6904549596605","329.7899548161372","1.139019729654341",null],[null,".200926886672075",".9047784636085866","3.980645856838989","199.4179668247923","158.804555880133","72.30705189687524","1.145224662636728",null],[null,".1961860845541168",".9270668460775215","3.652400650211603","197.2694897412235","233.4947866252764","320.6114875453836","1.104173954867536",null],[null,".112043822707981","1.047195810416868",".8095121377493344","25.24599562971374","254.3982506146199","107.7828856786388",".9197339754436223",null],[null,".02076719180900303","1.025115970354947","6.178914598200599","68.28245227421773","353.3363231097144","316.7741713253828",".9496084591634402",null],[null,".04370734124668306","1.09222330502915",".8973341766037739","176.518834332733","9.821414666176826","176.461441404951",".8634494465765791",null],[null,".5625139781981643","1.047678963178837",".5156743299296334","27.2288306446746","300.265631181014","114.8578335700671",".9190978252630853",null],[null,".3364258171620983","1.011972181066161","13.94764617781163","204.8884355232748","251.6335209154401","248.5603134785449",".9681690894981886",null],[null,".09037480081125886",".9417479315325807",".8642865687010785","141.5204764203822","263.1446997424424","356.0781225880958","1.078455082263345",null],[null,".1855647268957393",".9603640733710049","13.71330861985927","27.97009230505749","28.35031076067714","333.0398332429335","1.047249631935623",null],[null,".2319830988022009","1.016806772058586","5.703494933812304","208.947416903943","258.219070142338","249.266066224513",".9612723022308099",null],[null,".3290499763687948",".9364075283441822","7.292102213643332","41.24627751144538","297.7536312058935","103.0613761400393","1.087693990349471",null],[null,".5230133864980187","1.092638289197699","5.665180729192587","223.0287848415592","239.0632961322653","54.42232941366584",".8629575859630056",null],[null,".1095199181328277",".9728534985672994","11.70386238074774","40.45115950344899","48.96409054927918","293.8274564112012","1.027147719679324",null],[null,".3726895768864161","1.092195533623593","18.40260241752587","211.6853109385964","260.3854965804208","67.98936715144717",".8634823793570892",null],[null,".1073466543080487","1.090971323945026",".944596692955101","88.90013878141777","194.7162390461601","93.97807726219271",".8649361938890089",null],[null,".1540477495110693",".9182821317700623","9.680997688225057","50.23968827775644","355.6823040945999","1.885850094265247","1.120056351802801",null],[null,".1267582698726047","1.006414221621274","19.11866069545354","218.8280130039109","256.6114710626559","255.7155546041151",".9762002761350714",null],[null,".2183649326539963","1.070825024139312","4.116536220276624","43.99540009525517","88.86518198136183","213.2941426960293",".8894597628979494",null],[null,".1587663213660507",".9494185428026054","1.935638851953396","61.98398446345966","34.35558404930113","289.1095881014679","1.065411817351563",null],[null,".3065693460389886","1.084111451561009","2.403649298966696","74.80563635981267","250.1396418833446","79.4228490780847",".8731586806952909",null],[null,".155176950031453","1.038890066516534","9.353156508131921","222.6018024304459","268.926991075975","229.2855978804072",".9307856589932663",null],[null,".07968497870813834",".9862264257971168","3.250842415996874","45.8382493610213","311.3261970753455","41.08456220291595","1.006326990749313",null],[null,".06865561602274438","1.077632291398093","27.36287245622574","218.5350711651812","276.6363212159342","79.57884306114654",".8810451787543554",null],[null,".1034740122871209",".9667349461658924","21.13907325925261","220.2565691148615","164.7577615964069","199.6894337989332","1.036914498175154",null],[null,".1998077369255591",".9960947533759521","19.98586649359372","223.5027570278992","254.3274301689523","246.5516933679014",".9914095430829177",null],[null,".5621274832938024","1.044656848049121","15.45072753631797","179.3619940494243","279.6547223463378","214.3038489194615",".9230890315760475",null],[null,".4011397253932805","1.040060169521592","12.07340700970227","251.4801688743345","98.82726588563251","74.88424190877474",".9292153526568179",null],[null,".781098300140932","1.019904032899889","47.35975014453765","34.46512081267014","29.35574181831881","112.7741410955028",".9568968177267416",null],[null,".4353283838053194",".9298925971285985","4.557020165326699","62.603151457183","39.21595940726716","255.3456679643056","1.099144746379744",null],[null,".2399268352120532",".9565491728658295","12.751975555","234.2807997095247","174.9124790785671","353.3465385983533","1.053520821087829",null],[null,".241535404628957",".9338822282469766","3.882946004682446","53.66997298504614","302.5680543350612","73.0990398397532","1.092108802549518",null],[null,".3514549402035832","1.002346054515706","5.935189957250913","268.3187500561376","107.981778779852","58.95956102339793",".9821493782690038",null],[null,".1250955983568666",".9422224341476421","17.45939068367277","60.02899850030349","343.5447698754999","352.5658374057385","1.077640520903765",null],[null,".1306866435768232",".9288689771008379","32.4792738193839","230.8032582498943","207.0189626824197","321.892400030036","1.100962144498494",null],[null,".1763832272109019","1.048176332342025","2.168639893312605","217.870313873225","284.1374552044745","214.3946814138538",".9184437225091066",null],[null,".2476339878930462",".9948065034253185","10.85477066736284","230.3148925489172","117.7343999059568","68.22544325772202",".9933359428625355",null],[null,".1309361962500047","1.09453737054496","12.8262360122449","246.209713348863","93.26730711023424","44.09957644236911",".8607126435377197",null],[null,".03626155897364638","1.057708759337854","15.56046730921513","75.94407197398448","338.2084761450953","319.9349212357377",".9060557534460093",null],[null,".2292046422427154",".9191535962520636","10.21809255455675","69.49089356743764","308.5798255885106","49.92434552515133","1.11846381394901",null],[null,".09834718351754017",".9608172130407029","7.534714851796997","77.77014395198245","338.5341046520186","339.7500958725414","1.046508865029507",null],[null,".2454452870195619",".9844641545560804","1.290179945081731","85.26719534520593","278.5322356381404","53.15272082279122","1.009030310893885",null],[null,".5242905628570913",".9800274598817741","16.29284474414727","233.0372380768521","237.9948691750888","222.9546472008638","1.015890050756399",null],[null,".288791236950713","1.043796065922682","6.571193196130503","82.16165176654434","60.23713964526376","202.7489567725673",".9242311258388299",null],[null,".4124459324890892",".9849652528129695","23.31847516660742","117.293583686439","266.2865142037072","46.1178608416723","1.008260396907934",null],[null,".5012398463174305",".964659985392248","25.53016228295236","80.74821446585716","38.20999121458887","221.0205110872323","1.040261864368131",null],[null,".2653110801376959",".9563549459306516","12.45238312945082","253.040567343008","240.0606928453577","233.4492604873198","1.053841778034774",null],[null,".1417802812184673",".9560904061572599","8.702072262418312","258.0933938667475","225.7371524648475","257.5258202254045","1.05427918805352",null],[null,".2422218904325676",".9119556889223529","24.20968117328794","258.6278152027909","222.339176724041","263.1504644882378","1.13173166836448",null],[null,".2601180927909449","1.073561332077562","2.628405197497559","84.6723875206617","278.2006251539545","40.41734077771586",".8860613297167893",null],[null,".4525505715857596","1.01171510381656",".9108994196790805","233.3332011660094","254.8133753772802","86.08524693798753",".9685381312216483",null],[null,".05212071718950052","1.01498046349719","4.2667296755253","269.2613451890147","261.8241492457699","206.2746176357331",".9638679718851028",null],[null,".1223008372798401","1.054335851170549","9.043914093843645","103.4240884509734","74.37280530134908","184.4900419431551",".9104070505394035",null],[null,".2454715161779696","1.08131115485092","1.251676229801085","239.1319617313424","304.4529505613091","162.0786973178698",".8765527348340957",null],[null,".06981302209280589","1.027514455362188","4.476345628504165","257.4336992869975","279.7412243262384","194.6559521390467",".9462854519062115",null],[null,".2833497616799224",".9339862163356667","14.40946012596868","271.9157970273836","237.3092588311919","217.6142700326757","1.091926417931981",null],[null,".157505525918205","1.042035526510604","4.54175926391938","101.8369368179951","293.3299542650171","3.898854899512397",".9265743747418989",null],[null,".093042295543295","1.060579581696528","6.533048649204385","284.8471457567312","73.30506948083269","28.16657747598892",".9023794181348397",null],[null,".3565368574065709","1.048461031307141","5.140496263373863","101.374222144912","61.75524313223207","84.90954531964647",".9180696567811315",null],[null,".1832504881662564",".9405358775360092","9.075719590842452","114.5364051407083","306.3491156211464","350.9650119459751","1.080540436248288",null],[null,".3780383328764547","1.025795197824601","12.38331738277","157.8871717068381","287.7848489374951","348.3453423943338",".9486654443649816",null],[null,".3186046886940109",".9272818315160154","30.08507531031442","132.5348150940003","327.8468807923326","313.6801680346608","1.103789981698283",null],[null,".3930685369653456",".9234297931191477","1.561060344557909","151.2524764290938","284.1640059268277","2.646423677164933","1.110703781363491",null],[null,".4502253882836707",".9832575450984357","14.27601282588142","132.8093514271427","308.2742154836629","277.1874327744805","1.01088823554887",null],[null,".2505582459607461","1.097611953324447","23.13190740682013","293.8472526421484","209.0697533950265","231.4714193139592",".8570986911748542",null],[null,".228269262697432",".9433987982202798","5.714466669416895","155.115896567915","313.6556103462362","298.7410311912531","1.075625515702795",null],[null,".2046216193586685",".909803646130271","5.486111350757087","321.8332229573022","214.2348519500751","202.0864357605394","1.135749526511634",null],[null,".4461755595189772","1.04114828658923","22.94861858267076","130.5848850096645","37.61881389800398","201.7224395805476",".9277590314852309",null],[null,".02032333148413534","1.05881374806012","2.187833650634296","129.6640776420891","211.4600782816786","38.55771920200208",".9046377701582053",null],[null,".1517742557925708",".9725912740561123","8.254126583594079","315.7856830570208","141.6458860640578","304.9023867965785","1.027563148240808",null],[null,".2446032223584362",".9560315060429458","14.88359409174014","324.6970441744644","223.6922504930054","182.6623011643905","1.054376619133032",null],[null,".02147672213946774","1.012305050523066","1.520513695194916","305.5723068484546","116.2485028774479","323.6772452563687",".9676915939676614",null],[null,".3236438050802761","1.024699298317973","7.295446448715747","151.8211001125821","300.4619628320307","324.0644678622275",".9501877249716935",null],[null,".1597734431649062","1.077752562871217","7.751736713544336","333.6822656626957","279.5774091155989","108.0079923138452",".8808977029112989",null],[null,".251130080798759","1.088639395776041","43.02325095752546","328.376984751627","186.045203288227","211.5174665003346",".8677167961894943",null],[null,".1221897549910466",".9879703838798162","30.62078934723842","332.784941864664","186.0575216898863","176.1334601443669","1.003663625406814",null],[null,".4403321651799978","1.066361820535398","6.156333299939856","355.7775166236603","104.0362321485071","334.2437327363494",".895049785356946",null],[null,".1669369565625728","1.042194568957048","35.51652042401823","336.6911405135502","268.0556471626375","73.0028871642691",".9263622852182194",null],[null,".3783969736041063","1.078616340575623","15.48064619214809","159.4647241644277","285.5279873770067","338.0945424583157",".8798397538370427",null],[null,".1846047356893171",".9358898336187907","6.025166810378588","319.9801563956455","251.6321878892186","157.5308045799139","1.088596614703503",null],[null,".1828913286987254",".9620328180243523","13.07784072489506","173.1313842491977","335.1387062035527","242.9813592316181","1.044525970963462",null],[null,".2300893552504821",".9360074651453686","5.707137959672919","352.5380910262074","122.344983729747","296.5037242243973","1.088391409195428",null],[null,".2228259494513154",".9003135161974006","6.275663961328152","172.9733838365633","358.4181467190508","213.7306534055649","1.153754528539416",null],[null,".1520187849416231","1.021791392959398","18.50724825959595","165.5181234123544","65.6070351439908","134.5689598357251",".9542468033256843",null],[null,".2006611095941139","1.059868173810202",".9837696848183546","341.541751740872","269.3708736561883","106.8281020325695",".903288117296048",null],[null,".08208035613244737","1.064347733976872","1.033481244199424","191.0258347414517","74.99418553405405","106.427864431951",".8975915678598076",null],[null,".5283939191537136","1.018792662738743","14.72030234029391","344.2672034190481","127.2505533036697","291.56692226605",".958463019441686",null],[null,".01901892517693188","1.020432447439186","14.56280582685676","343.1608256220328","263.4113341737804","134.0511463205797",".9561536435055182",null],[null,".3068687485570079",".9601819887336822","40.89961410946657","172.5002495693309","15.46890406307538","187.9872629465799","1.047547539694275",null],[null,".2412090082860903",".9191793625981067","3.203813231545072","159.7237156293334","306.9159903604766","307.9073772305138","1.118416785276134",null],[null,".419369776855476","1.016003110869164","12.55179178712383","339.4959520683677","246.6960247751977","107.9776023517415",".9624130812054916",null],[null,".3197190090234507",".9710308847515002","9.324931300315576","178.09834746957","307.3350327397661","291.9605423309936","1.030040992984172",null],[null,".3388006797215827",".9199077643491166","9.924884805442645","343.5462916225819","134.0920200021253","308.6168483317117","1.117088670399454",null],[null,".10532372679585","1.01575378822311","8.484676168464741","332.8034537276155","217.6143602074649","186.8029345671955",".9627674477398024",null],[null,".5676489912752065","1.073311593162277","27.0971946919696","348.1270457798099","240.3857144752542","52.95213170187795",".8863706017889438",null],[null,".2625242048517449",".9368719453931887","13.39824678228422","352.4596408576081","178.4980053495715","221.6138737115813","1.086885318957439",null],[null,".0374065399235169","1.039999065766473",".8977882658646854","340.1135640503556","269.6550059261513","127.5121155253785",".929297246068853",null],[null,".2005707109636677","1.023954067115841","12.66528276568035","185.9653175693606","293.5368046507547","284.6104165855214",".9512252300528384",null],[null,".2544662714818235","1.059887634892003","15.82300021482743","2.845888439873462","97.98099576331091","311.0758763917416",".9032632388806374",null],[null,".09438962898007974","1.088240792468075","7.682218410713998","184.6588882958509","229.7541760153244","334.7021808920169",".8681935837595115",null],[null,".1361120872719426","1.088961124391128","1.330315441556485","190.2704194398382","250.5533746340236","314.512549267544",".8673322801181248",null],[null,".3329477050733912",".9524405566116203","12.88541872749331","181.9717698325754","306.693622454283","291.8856735071204","1.060345148520106",null],[null,".4386150434865281","1.046747849467271","23.20599004379995","5.368847885152579","113.1840056323048","296.2589549721091",".92032444570153",null],[null,".1055207880190485",".9640999293075605","4.342618608905179","2.203609360967577","236.3864891792055","135.3613106094814","1.041168445062658",null],[null,".1346940555446531",".9303739192900149","2.474899616801133","187.1425635172882","38.5314501137531","149.3443424610314","1.098291904929544",null],[null,".4077038672198949","1.022036754534587","14.45310092064153","6.836368030854617","136.3077529524136","288.8367161895978",".9539031932086046",null],[null,".3509422707204364",".9807668815606276","5.50840891484741","140.5866096040485","92.04994251087027","119.5560335656223","1.014741414609391",null],[null,".4401898365448991","1.019457921602877","29.69067996524866","187.1621256982697","43.84396611720046","84.97916857635444",".9575249885937118",null],[null,".1096005400462637",".9149854878186234","18.53001165561337","358.2085099882159","191.3749424716225","195.5719664753211","1.126115055940601",null],[null,".2780657709429368",".9118982788075981","2.783705879180964","112.1078482210399","84.92666657533692","183.481472153558","1.131838545198888",null],[null,".07120455080721838","1.086055970457545","8.542229150245875","180.1690371852216","153.7499124556861","44.99081838538511",".8708147222971957",null],[null,".1797046511562217","1.093301634418778","1.802586647027384","38.47709578839156","93.64404892407988","267.2202794312425",".8621723242373283",null],[null,".2188418965447907","1.032913948402703","3.294559999213106","8.780024784712092","97.80306649108556","301.1524455163454",".9388751852383929",null],[null,".04946455119529165","1.064072899406059","4.417715862129212","185.4519465256966","180.3556255453805","15.92623293085844",".8979393426060149",null],[null,".4293780486251822","1.026219095276624","13.83935233541437","179.9560221223508","71.66392026201028","66.20745006446468",".948077711195292",null],[null,".2205944672916852","1.055406421081997","9.291976066812929","201.0141201882815","58.56985326407995","92.03035464902767",".9090221709757715",null],[null,".1367465479613552","1.031077028344902","10.38696103346282","7.554527549983943","274.289889801375","85.65310956039082",".9413852885362205",null],[null,".27904479140483",".9944372824753384","14.07759177188756","190.2304992187393","289.3287843881732","296.4698482114117",".9938892122664187",null],[null,".5701011848999039","1.015473140499505","22.90671019321551","201.9095303034945","36.55148073910549","66.45404954243583",".9631665973820479",null],[null,".04618621483025148","1.096005083782189","20.07736135223717","196.7571303345844","245.0228122103768","288.9347941846546",".8589842898078169",null],[null,".5239158904581687","1.041411168666157","33.49277204532748","184.4671964848012","61.27552826054801","60.38495983001605",".9274077641330728",null],[null,".4206587098828043",".9098191354259769","17.5460025017243","195.9563399410461","307.898275023999","287.6200944841607","1.135720523133866",null],[null,".1325599384743768","1.064471424580119","29.15639793837039","191.6887788981111","264.9248648981889","300.4484840551453",".8974351234292762",null],[null,".2771393729010159","1.043698575415595","24.05166383835484","200.7153822635415","288.6945939412307","272.4021069959741",".9243606256781499",null]],count:3332};var H2=new Ni,Y2=new C2(75,window.innerWidth/window.innerHeight,.1,1e4),T9=new Ii;T9.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(T9.domElement);var w3=new Ki(Y2,T9.domElement);Y2.position.set(0,200,800);w3.update();var s6=new ki(16777215,2,5e3);s6.position.set(0,0,0);H2.add(s6);var or=new Wi(4210752,2);H2.add(or);const Z4=new Hi,ur=Z4.load("./textures/sun.jpg");function cr(){var l=new c3(6.9545,32,32),t=new P0({map:ur}),e=new E2(l,t);e.position.set(0,0,0),e.name="Sun",H2.add(e)}var hr=new P0({color:16711680}),dr={Mercury:4880,Venus:12104,Earth:12742,Mars:6779,Jupiter:139820,Saturn:116460,Uranus:50724,Neptune:49244},fr=100,pr=1e-4,mr=.05999,f8=[{name:"Mercury",a:.38709843,e:.20563661,i:7.00559432,long_peri:77.45771895,long_node:48.33961819,period:87.97,texture:"./textures/mercury.jpg"},{name:"Venus",a:.72332102,e:.00676399,i:3.39777545,long_peri:131.76755713,long_node:76.67261496,period:224.7,texture:"./textures/venus.jpg"},{name:"Earth",a:1.00000018,e:.01673163,i:-54346e-8,long_peri:102.93005885,long_node:-5.11260389,period:365.25,texture:"./textures/earth.jpg",moon:{size:.01,distance:.027,texture:"./textures/moon.jpg"}},{name:"Mars",a:1.52371243,e:.09336511,i:1.85181869,long_peri:-23.91744784,long_node:49.71320984,period:686.98,texture:"./textures/mars.jpg"},{name:"Jupiter",a:5.20248019,e:.0485359,i:1.29861416,long_peri:14.27495244,long_node:100.29282654,period:4332.59,texture:"./textures/jupiter.jpg",moon:{size:.03,distance:.5,texture:"./textures/moon.jpg"}},{name:"Saturn",a:9.54149883,e:.05550825,i:2.49424102,long_peri:92.86136063,long_node:113.63998702,period:10759.22,texture:"./textures/saturn.jpg"},{name:"Uranus",a:19.18797948,e:.0468574,i:.77298127,long_peri:172.43404441,long_node:73.96250215,period:30688.5,texture:"./textures/uranus.jpg"},{name:"Neptune",a:30.06952752,e:.00895439,i:1.7700552,long_peri:46.68158724,long_node:131.78635853,period:60182,texture:"./textures/neptune.jpg"}];function L0(l){return l*Math.PI/180}function a6(l){this.name=l.name,this.smA=l.a,this.eccentricity=l.e,this.inclination=L0(l.i),this.argumentOfPerigee=L0(l.long_peri),this.longitudeOfAscendingNode=L0(l.long_node),this.period=l.period,this.trueAnomaly=0,this.position=[0,0,0],this.time=0,this.texture=l.texture}a6.prototype.propagate=function(l){var t=this.smA*(1-this.eccentricity**2)/(1+this.eccentricity*Math.cos(l)),e=t*(Math.cos(this.argumentOfPerigee+l)*Math.cos(this.longitudeOfAscendingNode)-Math.sin(this.argumentOfPerigee+l)*Math.cos(this.inclination)*Math.sin(this.longitudeOfAscendingNode)),n=t*(Math.cos(this.argumentOfPerigee+l)*Math.sin(this.longitudeOfAscendingNode)+Math.sin(this.argumentOfPerigee+l)*Math.cos(this.inclination)*Math.cos(this.longitudeOfAscendingNode)),i=t*(Math.sin(this.argumentOfPerigee+l)*Math.sin(this.inclination));return[e*100,n*100,i*100]};function _r(l){return l>0?360/l:1}function gr(){ar.data.forEach((l,t)=>{const e=l[0]||`Asteroide_${t}`,n=parseFloat(l[1]),i=parseFloat(l[2]),r=L0(parseFloat(l[3])),s=L0(parseFloat(l[4])),a=L0(parseFloat(l[5])),o=l[7]!==null?parseFloat(l[7]):Math.random()*(1-.1)+.1,u=l[8]?parseFloat(l[8]):2;var c=new c3(u*mr,32,32),f=new E2(c,hr),p=_r(o);f.period=p,f.trueAnomaly=0;var m=i*(1-n**2)/(1+n*Math.cos(f.trueAnomaly)),v=m*(Math.cos(a+f.trueAnomaly)*Math.cos(s)-Math.sin(a+f.trueAnomaly)*Math.cos(r)*Math.sin(s)),M=m*(Math.cos(a+f.trueAnomaly)*Math.sin(s)+Math.sin(a+f.trueAnomaly)*Math.cos(r)*Math.cos(s)),d=m*(Math.sin(a+f.trueAnomaly)*Math.sin(r));f.position.set(v*100,M*100,d*100),f.name=e,f.eccentricity=n,f.semiMajorAxis=i,f.inclination=r,f.longNode=s,f.longPeri=a,H2.add(f)})}var A9=[];f8.forEach(l=>{A9.push(new a6(l))});function vr(){var l=[13421823,16764108,13434828,16764057,16777113,10079487,16751052,13421823];A9.forEach((t,e)=>{var n=new G2,i=[];const r=.01;for(var s=0;s<=2*Math.PI;s+=r){var a=t.propagate(s);i.push(a[0],a[1],a[2])}var o=t.propagate(0);i.push(o[0],o[1],o[2]),n.setAttribute("position",new g2(i,3));var u=new l6({color:l[e]}),c=new Fi(n,u);H2.add(c)})}function xr(){A9.forEach(l=>{var t=dr[l.name]*pr;const e=Z4.load(l.texture);var n=new c3(t/2,32,32),i=new P0({map:e}),r=new E2(n,i);r.rotation.y=Math.PI/2;const s=new S3;s.add(r),s.name=l.name;const a=f8.find(p=>p.name===l.name);if(a.moon){let m=function(){const v=Date.now()*.001,M=a.moon.distance*fr*2;c.position.x=Math.cos(v)*M,c.position.y=Math.sin(v)*M};var f=m,o=new c3(a.moon.size*10,32,32);const p=Z4.load(a.moon.texture);var u=new P0({map:p}),c=new E2(o,u);c.position.set(a.moon.distance*2,0,0),s.add(c),o6.push(m)}if(l.name==="Saturn"){const p=t*1.2,m=t*2,v=new c8(p,m,64),M=new P0({color:11184810,side:W2,transparent:!0,opacity:.4}),d=new E2(v,M);d.rotation.x=Math.PI/2,d.rotation.z=L0(a.i),s.add(d)}H2.add(s)})}const o6=[];function u6(){if(requestAnimationFrame(u6),A9.forEach(l=>{var t=H2.getObjectByName(l.name);if(t){var e=l.propagate(l.trueAnomaly);t.position.set(e[0],e[1],e[2]),l.trueAnomaly+=2*Math.PI/l.period*.1,l.trueAnomaly>2*Math.PI&&(l.trueAnomaly-=2*Math.PI)}}),H2.children.forEach(l=>{if(l.name&&l.name!=="Sun"&&l.period){var t=l.semiMajorAxis*(1-l.eccentricity**2)/(1+l.eccentricity*Math.cos(l.trueAnomaly)),e=t*(Math.cos(l.longPeri+l.trueAnomaly)*Math.cos(l.longNode)-Math.sin(l.longPeri+l.trueAnomaly)*Math.cos(l.inclination)*Math.sin(l.longNode)),n=t*(Math.cos(l.longPeri+l.trueAnomaly)*Math.sin(l.longNode)+Math.sin(l.longPeri+l.trueAnomaly)*Math.cos(l.inclination)*Math.cos(l.longNode)),i=t*(Math.sin(l.longPeri+l.trueAnomaly)*Math.sin(l.inclination));l.position.set(e*100,n*100,i*100),l.trueAnomaly+=2*Math.PI/l.period*.1,l.trueAnomaly>2*Math.PI&&(l.trueAnomaly-=2*Math.PI)}}),o6.forEach(l=>l()),R3){const l=R3.position.clone(),t=new L(0,0,1).normalize().multiplyScalar(20);Y2.position.lerp(l.clone().add(t),.1),w3.target.copy(l)}w3.update(),T9.render(H2,Y2)}function Mr(l){l.preventDefault();const t=new w1;t.x=l.clientX/window.innerWidth*2-1,t.y=-(l.clientY/window.innerHeight)*2+1;const e=new Xi;e.setFromCamera(t,Y2);const n=e.intersectObjects(H2.children,!0);if(n.length>0){let i=n[0].object;if(i.parent&&i.parent.isGroup&&(i=i.parent),i.name&&f8.find(r=>r.name===i.name)){const r=i.position.clone();Sr(r,i),Er()}}}let R3=null;function Sr(l,t){R3!==t&&(R3=t);const n=new L(0,0,1).normalize().multiplyScalar(2),i=1e3,r=Y2.position.clone(),s=l.clone().add(n),a=performance.now();function o(){const u=performance.now()-a,c=Math.min(u/i,1);Y2.position.lerpVectors(r,s,c),w3.target.lerp(l,c),c<1&&requestAnimationFrame(o)}o()}Y2.position.clone();let S2;function Er(){S2&&(S2.removeEventListener("click",$4),document.body.removeChild(S2)),S2=document.createElement("button"),S2.innerText="Regresar",S2.style.position="absolute",S2.style.top="20px",S2.style.left="20px",S2.style.zIndex="10",document.body.appendChild(S2),S2.addEventListener("click",()=>{$4()})}function $4(){const l=H2.getObjectByName("Sun");if(!l){console.error("No se encontró el objeto del Sol en la escena.");return}const t=l.position.clone(),e=new L(0,0,1).normalize().multiplyScalar(400),n=t.clone().add(e),i=1e3,r=Y2.position.clone(),s=performance.now();function a(){const o=performance.now()-s,u=Math.min(o/i,1);Y2.position.lerpVectors(r,n,u),w3.target.lerp(t,u),u<1?requestAnimationFrame(a):(R3=null,S2.removeEventListener("click",$4),document.body.removeChild(S2),S2=null)}a()}window.addEventListener("mousedown",Mr,!1);cr();gr();vr();xr();u6();
